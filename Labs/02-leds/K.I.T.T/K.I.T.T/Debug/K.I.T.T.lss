
K.I.T.T.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000808  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068d  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cd  00000000  00000000  000010f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d6  00000000  00000000  00001787  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000195d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	 * when a push button is pressed.
	 */
	int main(void)
	{
		/* Set direction off all pins connected to LEDs */
		DDRB = 0b11111111;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
		//turn LEDs off in Data Register
		PORTB = 0b00000000;
  84:	15 b8       	out	0x05, r1	; 5
		
		/* button w pullup resistor */
		DDRD = DDRD & ~(1<<BTN);
  86:	50 98       	cbi	0x0a, 0	; 10
		PORTD = PORTD | (1<<BTN);
  88:	58 9a       	sbi	0x0b, 0	; 11
		
		//  set a variable for button check
		int8_t BTN_CHCK = 0b0000;
  8a:	e0 e0       	ldi	r30, 0x00	; 0
			
			// flip LSb in variable BTN_CHCK if button is pressed
			if(~(bit_get(PORTD, BIT(0))))
			{

				BTN_CHCK ^= 0x01;
  8c:	a1 e0       	ldi	r26, 0x01	; 1
				PORTB = 0b11111111;
  8e:	ff ef       	ldi	r31, 0xFF	; 255
			// if BTN_CHCK has a nonzero value, start K.I.T.T
			if(bit_get(BTN_CHCK, BIT(0)))
			{
				for(n = 0; n <= 7; n++)
				{
				bit_clear(PORTB, BIT(n));
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	4f ef       	ldi	r20, 0xFF	; 255
  96:	54 e3       	ldi	r21, 0x34	; 52
  98:	6c e0       	ldi	r22, 0x0C	; 12
  9a:	41 50       	subi	r20, 0x01	; 1
  9c:	50 40       	sbci	r21, 0x00	; 0
  9e:	60 40       	sbci	r22, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x1a>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x24>
  a4:	00 00       	nop
		{
			
			_delay_ms(BLINK_DELAY);
			
			// flip LSb in variable BTN_CHCK if button is pressed
			if(~(bit_get(PORTD, BIT(0))))
  a6:	8b b1       	in	r24, 0x0b	; 11
			{

				BTN_CHCK ^= 0x01;
  a8:	ea 27       	eor	r30, r26
				PORTB = 0b11111111;
  aa:	f5 b9       	out	0x05, r31	; 5
			}
			// if BTN_CHCK has a nonzero value, start K.I.T.T
			if(bit_get(BTN_CHCK, BIT(0)))
  ac:	e0 ff       	sbrs	r30, 0
  ae:	f2 cf       	rjmp	.-28     	; 0x94 <main+0x14>
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	90 e0       	ldi	r25, 0x00	; 0
			{
				for(n = 0; n <= 7; n++)
				{
				bit_clear(PORTB, BIT(n));
  b4:	55 b1       	in	r21, 0x05	; 5
  b6:	b9 01       	movw	r22, r18
  b8:	08 2e       	mov	r0, r24
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x40>
  bc:	66 0f       	add	r22, r22
  be:	77 1f       	adc	r23, r23
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <main+0x3c>
  c4:	46 2f       	mov	r20, r22
  c6:	40 95       	com	r20
  c8:	45 23       	and	r20, r21
  ca:	45 b9       	out	0x05, r20	; 5
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d0 e7       	ldi	r29, 0x70	; 112
  d0:	42 e0       	ldi	r20, 0x02	; 2
  d2:	c1 50       	subi	r28, 0x01	; 1
  d4:	d0 40       	sbci	r29, 0x00	; 0
  d6:	40 40       	sbci	r20, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x52>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x5c>
  dc:	00 00       	nop
				_delay_ms(50);
				bit_set(PORTB, BIT(n-1));
  de:	65 b1       	in	r22, 0x05	; 5
  e0:	ac 01       	movw	r20, r24
  e2:	41 50       	subi	r20, 0x01	; 1
  e4:	51 09       	sbc	r21, r1
  e6:	e9 01       	movw	r28, r18
  e8:	02 c0       	rjmp	.+4      	; 0xee <main+0x6e>
  ea:	cc 0f       	add	r28, r28
  ec:	dd 1f       	adc	r29, r29
  ee:	4a 95       	dec	r20
  f0:	e2 f7       	brpl	.-8      	; 0xea <main+0x6a>
  f2:	ae 01       	movw	r20, r28
  f4:	46 2b       	or	r20, r22
  f6:	45 b9       	out	0x05, r20	; 5
  f8:	df ef       	ldi	r29, 0xFF	; 255
  fa:	44 e3       	ldi	r20, 0x34	; 52
  fc:	5c e0       	ldi	r21, 0x0C	; 12
  fe:	d1 50       	subi	r29, 0x01	; 1
 100:	40 40       	sbci	r20, 0x00	; 0
 102:	50 40       	sbci	r21, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x7e>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x88>
 108:	00 00       	nop
 10a:	01 96       	adiw	r24, 0x01	; 1
				PORTB = 0b11111111;
			}
			// if BTN_CHCK has a nonzero value, start K.I.T.T
			if(bit_get(BTN_CHCK, BIT(0)))
			{
				for(n = 0; n <= 7; n++)
 10c:	88 30       	cpi	r24, 0x08	; 8
 10e:	91 05       	cpc	r25, r1
 110:	89 f6       	brne	.-94     	; 0xb4 <main+0x34>
 112:	87 e0       	ldi	r24, 0x07	; 7
 114:	90 e0       	ldi	r25, 0x00	; 0
				bit_set(PORTB, BIT(n-1));
				_delay_ms(BLINK_DELAY);
				}
				for(n = 7; n >=0; n--)
				{
					bit_clear(PORTB, BIT(n));
 116:	55 b1       	in	r21, 0x05	; 5
 118:	b9 01       	movw	r22, r18
 11a:	08 2e       	mov	r0, r24
 11c:	02 c0       	rjmp	.+4      	; 0x122 <main+0xa2>
 11e:	66 0f       	add	r22, r22
 120:	77 1f       	adc	r23, r23
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <main+0x9e>
 126:	46 2f       	mov	r20, r22
 128:	40 95       	com	r20
 12a:	45 23       	and	r20, r21
 12c:	45 b9       	out	0x05, r20	; 5
 12e:	6f ef       	ldi	r22, 0xFF	; 255
 130:	c0 e7       	ldi	r28, 0x70	; 112
 132:	d2 e0       	ldi	r29, 0x02	; 2
 134:	61 50       	subi	r22, 0x01	; 1
 136:	c0 40       	sbci	r28, 0x00	; 0
 138:	d0 40       	sbci	r29, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0xb4>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0xbe>
 13e:	00 00       	nop
					_delay_ms(50);
					bit_set(PORTB, BIT(n+1));
 140:	65 b1       	in	r22, 0x05	; 5
 142:	ac 01       	movw	r20, r24
 144:	4f 5f       	subi	r20, 0xFF	; 255
 146:	5f 4f       	sbci	r21, 0xFF	; 255
 148:	e9 01       	movw	r28, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <main+0xd0>
 14c:	cc 0f       	add	r28, r28
 14e:	dd 1f       	adc	r29, r29
 150:	4a 95       	dec	r20
 152:	e2 f7       	brpl	.-8      	; 0x14c <main+0xcc>
 154:	ae 01       	movw	r20, r28
 156:	46 2b       	or	r20, r22
 158:	45 b9       	out	0x05, r20	; 5
 15a:	df ef       	ldi	r29, 0xFF	; 255
 15c:	44 e3       	ldi	r20, 0x34	; 52
 15e:	5c e0       	ldi	r21, 0x0C	; 12
 160:	d1 50       	subi	r29, 0x01	; 1
 162:	40 40       	sbci	r20, 0x00	; 0
 164:	50 40       	sbci	r21, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0xe0>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0xea>
 16a:	00 00       	nop
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	98 f6       	brcc	.-90     	; 0x116 <main+0x96>
 170:	91 cf       	rjmp	.-222    	; 0x94 <main+0x14>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
