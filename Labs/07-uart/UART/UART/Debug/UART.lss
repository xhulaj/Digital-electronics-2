
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000960  000009f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000960  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008c  00800130  00800130  00000a24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018a6  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0b  00000000  00000000  00002442  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aea  00000000  00000000  00002f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  00003a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bd  00000000  00000000  00003cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f50  00000000  00000000  000042b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005201  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_18>
  4c:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3b       	cpi	r26, 0xBC	; 188
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  9e:	0c 94 ae 04 	jmp	0x95c	; 0x95c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_gotoxy>:
 124:	61 11       	cpse	r22, r1
 126:	04 c0       	rjmp	.+8      	; 0x130 <lcd_gotoxy+0xc>
 128:	80 58       	subi	r24, 0x80	; 128
 12a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 12e:	08 95       	ret
 130:	80 54       	subi	r24, 0x40	; 64
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret

00000138 <lcd_clrscr>:
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_putc>:
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 146:	08 95       	ret

00000148 <lcd_puts>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
 154:	88 23       	and	r24, r24
 156:	29 f0       	breq	.+10     	; 0x162 <lcd_puts+0x1a>
 158:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_putc>
 15c:	89 91       	ld	r24, Y+
 15e:	81 11       	cpse	r24, r1
 160:	fb cf       	rjmp	.-10     	; 0x158 <lcd_puts+0x10>
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 168:	cf 93       	push	r28
 16a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 16c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 16e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 170:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 172:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 174:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 176:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 178:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	99 ef       	ldi	r25, 0xF9	; 249
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_init+0x16>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_init+0x1c>
 184:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 186:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 188:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x2a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x30>
 198:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x3a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x40>
 1a8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x4a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init+0x50>
 1b8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1ba:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init+0x5c>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_init+0x62>
 1ca:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1d8:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <func_parity>:
 * and UART.
 */
	int8_t func_parity( uint16_t n)
	{
		uint8_t parity = 0;
		while(n)
 1ec:	00 97       	sbiw	r24, 0x00	; 0
 1ee:	79 f0       	breq	.+30     	; 0x20e <func_parity+0x22>
 1f0:	30 e0       	ldi	r19, 0x00	; 0
		{
			parity = !parity;
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	26 2f       	mov	r18, r22
 1f8:	31 11       	cpse	r19, r1
 1fa:	27 2f       	mov	r18, r23
 1fc:	32 2f       	mov	r19, r18
			n = n & (n-1);
 1fe:	ac 01       	movw	r20, r24
 200:	41 50       	subi	r20, 0x01	; 1
 202:	51 09       	sbc	r21, r1
 204:	84 23       	and	r24, r20
 206:	95 23       	and	r25, r21
 * and UART.
 */
	int8_t func_parity( uint16_t n)
	{
		uint8_t parity = 0;
		while(n)
 208:	00 97       	sbiw	r24, 0x00	; 0
 20a:	a9 f7       	brne	.-22     	; 0x1f6 <func_parity+0xa>
 20c:	01 c0       	rjmp	.+2      	; 0x210 <func_parity+0x24>
 * and start ADC conversion four times per second. Send value to LCD
 * and UART.
 */
	int8_t func_parity( uint16_t n)
	{
		uint8_t parity = 0;
 20e:	30 e0       	ldi	r19, 0x00	; 0
		{
			parity = !parity;
			n = n & (n-1);
		}
		return parity;
	}
 210:	83 2f       	mov	r24, r19
 212:	08 95       	ret

00000214 <main>:
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 214:	8c e0       	ldi	r24, 0x0C	; 12
 216:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("value:");
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(3, 1); lcd_puts("key:");
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 232:	87 e0       	ldi	r24, 0x07	; 7
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(8, 0); lcd_puts("a");    // Put ADC value in decimal
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	88 e0       	ldi	r24, 0x08	; 8
 23e:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 242:	8c e0       	ldi	r24, 0x0C	; 12
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(13,0); lcd_puts("b");    // Put ADC value in hexadecimal
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	8d e0       	ldi	r24, 0x0D	; 13
 24e:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 252:	8e e0       	ldi	r24, 0x0E	; 14
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(8, 1); lcd_puts("c");    // Put button name here
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	88 e0       	ldi	r24, 0x08	; 8
 25e:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 262:	80 e1       	ldi	r24, 0x10	; 16
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
	ADMUX |= (1 << REFS0);
 26a:	ec e7       	ldi	r30, 0x7C	; 124
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	80 64       	ori	r24, 0x40	; 64
 272:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
 274:	80 81       	ld	r24, Z
 276:	8f 77       	andi	r24, 0x7F	; 127
 278:	80 83       	st	Z, r24
    // Set input channel to ADC0
	ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
 27a:	80 81       	ld	r24, Z
 27c:	80 7f       	andi	r24, 0xF0	; 240
 27e:	80 83       	st	Z, r24
    // Enable ADC module
	ADCSRA |= (1 << ADEN);
 280:	ea e7       	ldi	r30, 0x7A	; 122
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	80 68       	ori	r24, 0x80	; 128
 288:	80 83       	st	Z, r24
    // Enable conversion complete interrupt
	ADCSRA |= (1 << ADIE);
 28a:	80 81       	ld	r24, Z
 28c:	88 60       	ori	r24, 0x08	; 8
 28e:	80 83       	st	Z, r24
    // Set clock prescaler to 128
	ADCSRA |= (1 << ADPS2);
 290:	80 81       	ld	r24, Z
 292:	84 60       	ori	r24, 0x04	; 4
 294:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS1);
 296:	80 81       	ld	r24, Z
 298:	82 60       	ori	r24, 0x02	; 2
 29a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS0);
 29c:	80 81       	ld	r24, Z
 29e:	81 60       	ori	r24, 0x01	; 1
 2a0:	80 83       	st	Z, r24
    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Enable interrupt and set the overflow prescaler to 262 ms
	TIM1_overflow_262ms();
 2a2:	e1 e8       	ldi	r30, 0x81	; 129
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	8b 7f       	andi	r24, 0xFB	; 251
 2aa:	80 83       	st	Z, r24
 2ac:	80 81       	ld	r24, Z
 2ae:	83 60       	ori	r24, 0x03	; 3
 2b0:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 2b2:	ef e6       	ldi	r30, 0x6F	; 111
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	81 60       	ori	r24, 0x01	; 1
 2ba:	80 83       	st	Z, r24
    // Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
 2bc:	87 e6       	ldi	r24, 0x67	; 103
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 12 03 	call	0x624	; 0x624 <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
 2c4:	78 94       	sei
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <main+0xb2>

000002c8 <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER1_OVF_vect)
{
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	8f 93       	push	r24
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31
    ADCSRA |= (1 << ADSC);
 2d8:	ea e7       	ldi	r30, 0x7A	; 122
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	80 64       	ori	r24, 0x40	; 64
 2e0:	80 83       	st	Z, r24

}
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	8f 91       	pop	r24
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <__vector_21>:
/**
 * ISR starts when ADC completes the conversion. Display value on LCD
 * and send it to UART.
 */
ISR(ADC_vect)
{
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	2f 93       	push	r18
 302:	3f 93       	push	r19
 304:	4f 93       	push	r20
 306:	5f 93       	push	r21
 308:	6f 93       	push	r22
 30a:	7f 93       	push	r23
 30c:	8f 93       	push	r24
 30e:	9f 93       	push	r25
 310:	af 93       	push	r26
 312:	bf 93       	push	r27
 314:	ef 93       	push	r30
 316:	ff 93       	push	r31
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	00 d0       	rcall	.+0      	; 0x31e <__vector_21+0x2c>
 31e:	00 d0       	rcall	.+0      	; 0x320 <__vector_21+0x2e>
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
		"DOWN  ",
		"SELECT"
	};
	static char current_button[7];
    uint16_t value = 0;
    char lcd_string[4] = "    ";
 324:	80 e2       	ldi	r24, 0x20	; 32
 326:	90 e2       	ldi	r25, 0x20	; 32
 328:	9a 83       	std	Y+2, r25	; 0x02
 32a:	89 83       	std	Y+1, r24	; 0x01
 32c:	9c 83       	std	Y+4, r25	; 0x04
 32e:	8b 83       	std	Y+3, r24	; 0x03
	value = ADC;    // Copy ADC result to 16-bit variable
 330:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 334:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	lcd_gotoxy(7, 0);
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	87 e0       	ldi	r24, 0x07	; 7
 33c:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts(lcd_string);
 340:	ce 01       	movw	r24, r28
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 348:	4a e0       	ldi	r20, 0x0A	; 10
 34a:	be 01       	movw	r22, r28
 34c:	6f 5f       	subi	r22, 0xFF	; 255
 34e:	7f 4f       	sbci	r23, 0xFF	; 255
 350:	c8 01       	movw	r24, r16
 352:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__itoa_ncheck>
    itoa(value, lcd_string, 10);    // Convert to string in decimal
	lcd_gotoxy(7, 0);
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	87 e0       	ldi	r24, 0x07	; 7
 35a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts(lcd_string);
 35e:	ce 01       	movw	r24, r28
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	lcd_gotoxy(12, 0);
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	8c e0       	ldi	r24, 0x0C	; 12
 36a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts("   ");
 36e:	82 e1       	ldi	r24, 0x12	; 18
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	lcd_gotoxy(12, 0);
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	8c e0       	ldi	r24, 0x0C	; 12
 37a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 37e:	40 e1       	ldi	r20, 0x10	; 16
 380:	be 01       	movw	r22, r28
 382:	6f 5f       	subi	r22, 0xFF	; 255
 384:	7f 4f       	sbci	r23, 0xFF	; 255
 386:	c8 01       	movw	r24, r16
 388:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__itoa_ncheck>
	itoa(value, lcd_string, 16);
	lcd_puts(lcd_string);
 38c:	ce 01       	movw	r24, r28
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	if(value < 50)
 394:	02 33       	cpi	r16, 0x32	; 50
 396:	11 05       	cpc	r17, r1
 398:	90 f4       	brcc	.+36     	; 0x3be <__vector_21+0xcc>
	{
		for(int i = 0; i <= 7; i++)
		{
		current_button[i] = buttons[0][i];
 39a:	e0 e3       	ldi	r30, 0x30	; 48
 39c:	f1 e0       	ldi	r31, 0x01	; 1
 39e:	82 e5       	ldi	r24, 0x52	; 82
 3a0:	80 83       	st	Z, r24
 3a2:	89 e4       	ldi	r24, 0x49	; 73
 3a4:	81 83       	std	Z+1, r24	; 0x01
 3a6:	87 e4       	ldi	r24, 0x47	; 71
 3a8:	82 83       	std	Z+2, r24	; 0x02
 3aa:	88 e4       	ldi	r24, 0x48	; 72
 3ac:	83 83       	std	Z+3, r24	; 0x03
 3ae:	84 e5       	ldi	r24, 0x54	; 84
 3b0:	84 83       	std	Z+4, r24	; 0x04
 3b2:	80 e2       	ldi	r24, 0x20	; 32
 3b4:	85 83       	std	Z+5, r24	; 0x05
 3b6:	16 82       	std	Z+6, r1	; 0x06
 3b8:	85 e5       	ldi	r24, 0x55	; 85
 3ba:	87 83       	std	Z+7, r24	; 0x07
 3bc:	61 c0       	rjmp	.+194    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		}
	}
	else if((value > 50) && (value < 180))
 3be:	c8 01       	movw	r24, r16
 3c0:	c3 97       	sbiw	r24, 0x33	; 51
 3c2:	81 38       	cpi	r24, 0x81	; 129
 3c4:	91 05       	cpc	r25, r1
 3c6:	78 f4       	brcc	.+30     	; 0x3e6 <__vector_21+0xf4>
	{
		for(int i = 0; i <= 7; i++)
		{
			current_button[i] = buttons[1][i];
 3c8:	e0 e3       	ldi	r30, 0x30	; 48
 3ca:	f1 e0       	ldi	r31, 0x01	; 1
 3cc:	85 e5       	ldi	r24, 0x55	; 85
 3ce:	80 83       	st	Z, r24
 3d0:	80 e5       	ldi	r24, 0x50	; 80
 3d2:	81 83       	std	Z+1, r24	; 0x01
 3d4:	80 e2       	ldi	r24, 0x20	; 32
 3d6:	82 83       	std	Z+2, r24	; 0x02
 3d8:	83 83       	std	Z+3, r24	; 0x03
 3da:	84 83       	std	Z+4, r24	; 0x04
 3dc:	85 83       	std	Z+5, r24	; 0x05
 3de:	16 82       	std	Z+6, r1	; 0x06
 3e0:	8c e4       	ldi	r24, 0x4C	; 76
 3e2:	87 83       	std	Z+7, r24	; 0x07
 3e4:	4d c0       	rjmp	.+154    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		}
	}
	else if((value > 180) && (value < 300))
 3e6:	c8 01       	movw	r24, r16
 3e8:	85 5b       	subi	r24, 0xB5	; 181
 3ea:	91 09       	sbc	r25, r1
 3ec:	87 37       	cpi	r24, 0x77	; 119
 3ee:	91 05       	cpc	r25, r1
 3f0:	88 f4       	brcc	.+34     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	{
		for(int i = 0; i <= 7; i++)
		{
			current_button[i] = buttons[2][i];
 3f2:	e0 e3       	ldi	r30, 0x30	; 48
 3f4:	f1 e0       	ldi	r31, 0x01	; 1
 3f6:	8c e4       	ldi	r24, 0x4C	; 76
 3f8:	80 83       	st	Z, r24
 3fa:	85 e4       	ldi	r24, 0x45	; 69
 3fc:	81 83       	std	Z+1, r24	; 0x01
 3fe:	86 e4       	ldi	r24, 0x46	; 70
 400:	82 83       	std	Z+2, r24	; 0x02
 402:	84 e5       	ldi	r24, 0x54	; 84
 404:	83 83       	std	Z+3, r24	; 0x03
 406:	80 e2       	ldi	r24, 0x20	; 32
 408:	84 83       	std	Z+4, r24	; 0x04
 40a:	85 83       	std	Z+5, r24	; 0x05
 40c:	16 82       	std	Z+6, r1	; 0x06
 40e:	84 e4       	ldi	r24, 0x44	; 68
 410:	87 83       	std	Z+7, r24	; 0x07
 412:	36 c0       	rjmp	.+108    	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		}
	}
	else if((value > 300) && (value < 500))
 414:	c8 01       	movw	r24, r16
 416:	8d 52       	subi	r24, 0x2D	; 45
 418:	91 40       	sbci	r25, 0x01	; 1
 41a:	87 3c       	cpi	r24, 0xC7	; 199
 41c:	91 05       	cpc	r25, r1
 41e:	88 f4       	brcc	.+34     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	{
		for(int i = 0; i <= 7; i++)
		{
			current_button[i] = buttons[3][i];
 420:	e0 e3       	ldi	r30, 0x30	; 48
 422:	f1 e0       	ldi	r31, 0x01	; 1
 424:	84 e4       	ldi	r24, 0x44	; 68
 426:	80 83       	st	Z, r24
 428:	8f e4       	ldi	r24, 0x4F	; 79
 42a:	81 83       	std	Z+1, r24	; 0x01
 42c:	87 e5       	ldi	r24, 0x57	; 87
 42e:	82 83       	std	Z+2, r24	; 0x02
 430:	8e e4       	ldi	r24, 0x4E	; 78
 432:	83 83       	std	Z+3, r24	; 0x03
 434:	80 e2       	ldi	r24, 0x20	; 32
 436:	84 83       	std	Z+4, r24	; 0x04
 438:	85 83       	std	Z+5, r24	; 0x05
 43a:	16 82       	std	Z+6, r1	; 0x06
 43c:	83 e5       	ldi	r24, 0x53	; 83
 43e:	87 83       	std	Z+7, r24	; 0x07
 440:	1f c0       	rjmp	.+62     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		}
	}
	else if((value > 500) && (value < 800))
 442:	c8 01       	movw	r24, r16
 444:	85 5f       	subi	r24, 0xF5	; 245
 446:	91 40       	sbci	r25, 0x01	; 1
 448:	8b 32       	cpi	r24, 0x2B	; 43
 44a:	91 40       	sbci	r25, 0x01	; 1
 44c:	80 f4       	brcc	.+32     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
	{
		for(int i = 0; i <= 7; i++)
		{
			current_button[i] = buttons[4][i];
 44e:	e0 e3       	ldi	r30, 0x30	; 48
 450:	f1 e0       	ldi	r31, 0x01	; 1
 452:	83 e5       	ldi	r24, 0x53	; 83
 454:	80 83       	st	Z, r24
 456:	85 e4       	ldi	r24, 0x45	; 69
 458:	81 83       	std	Z+1, r24	; 0x01
 45a:	9c e4       	ldi	r25, 0x4C	; 76
 45c:	92 83       	std	Z+2, r25	; 0x02
 45e:	83 83       	std	Z+3, r24	; 0x03
 460:	83 e4       	ldi	r24, 0x43	; 67
 462:	84 83       	std	Z+4, r24	; 0x04
 464:	84 e5       	ldi	r24, 0x54	; 84
 466:	85 83       	std	Z+5, r24	; 0x05
 468:	16 82       	std	Z+6, r1	; 0x06
 46a:	17 82       	std	Z+7, r1	; 0x07
 46c:	09 c0       	rjmp	.+18     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 46e:	e0 e3       	ldi	r30, 0x30	; 48
 470:	f1 e0       	ldi	r31, 0x01	; 1
 472:	28 e3       	ldi	r18, 0x38	; 56
 474:	31 e0       	ldi	r19, 0x01	; 1
	}
	else
	{
		for(int i = 0; i <= 7; i++)
		{
			current_button[i] = ' ';
 476:	80 e2       	ldi	r24, 0x20	; 32
 478:	81 93       	st	Z+, r24
			current_button[i] = buttons[4][i];
		}
	}
	else
	{
		for(int i = 0; i <= 7; i++)
 47a:	e2 17       	cp	r30, r18
 47c:	f3 07       	cpc	r31, r19
 47e:	e1 f7       	brne	.-8      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
		{
			current_button[i] = ' ';
		}
	}
	uint16_t Voltage = value * 4.88;
	lcd_gotoxy(8, 1);
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	88 e0       	ldi	r24, 0x08	; 8
 484:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts(current_button);
 488:	80 e3       	ldi	r24, 0x30	; 48
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	if(value < 1010)
 490:	02 3f       	cpi	r16, 0xF2	; 242
 492:	83 e0       	ldi	r24, 0x03	; 3
 494:	18 07       	cpc	r17, r24
 496:	08 f0       	brcs	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 498:	54 c0       	rjmp	.+168    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
	{
		uart_puts(current_button);
 49a:	80 e3       	ldi	r24, 0x30	; 48
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	0e 94 40 03 	call	0x680	; 0x680 <uart_puts>
		uart_puts(" : ");
 4a2:	86 e1       	ldi	r24, 0x16	; 22
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	0e 94 40 03 	call	0x680	; 0x680 <uart_puts>
 4aa:	4a e0       	ldi	r20, 0x0A	; 10
 4ac:	be 01       	movw	r22, r28
 4ae:	6f 5f       	subi	r22, 0xFF	; 255
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	c8 01       	movw	r24, r16
 4b4:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__itoa_ncheck>
		itoa(value, lcd_string, 10);
		uart_puts(lcd_string);
 4b8:	ce 01       	movw	r24, r28
 4ba:	01 96       	adiw	r24, 0x01	; 1
 4bc:	0e 94 40 03 	call	0x680	; 0x680 <uart_puts>
		uart_puts(" @ ");
 4c0:	8a e1       	ldi	r24, 0x1A	; 26
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	0e 94 40 03 	call	0x680	; 0x680 <uart_puts>
 4c8:	b8 01       	movw	r22, r16
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__floatunsisf>
 4d2:	26 ef       	ldi	r18, 0xF6	; 246
 4d4:	38 e2       	ldi	r19, 0x28	; 40
 4d6:	4c e9       	ldi	r20, 0x9C	; 156
 4d8:	50 e4       	ldi	r21, 0x40	; 64
 4da:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__mulsf3>
 4de:	0e 94 4f 03 	call	0x69e	; 0x69e <__fixunssfsi>
 4e2:	dc 01       	movw	r26, r24
 4e4:	cb 01       	movw	r24, r22
 4e6:	4a e0       	ldi	r20, 0x0A	; 10
 4e8:	be 01       	movw	r22, r28
 4ea:	6f 5f       	subi	r22, 0xFF	; 255
 4ec:	7f 4f       	sbci	r23, 0xFF	; 255
 4ee:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__itoa_ncheck>
		itoa(Voltage, lcd_string, 10);
		uart_puts(lcd_string);
 4f2:	ce 01       	movw	r24, r28
 4f4:	01 96       	adiw	r24, 0x01	; 1
 4f6:	0e 94 40 03 	call	0x680	; 0x680 <uart_puts>
		uart_puts(" mV");
 4fa:	8e e1       	ldi	r24, 0x1E	; 30
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	0e 94 40 03 	call	0x680	; 0x680 <uart_puts>
		uart_puts(" Parity: ");
 502:	82 e2       	ldi	r24, 0x22	; 34
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	0e 94 40 03 	call	0x680	; 0x680 <uart_puts>
		uint8_t parity = func_parity(value);
 50a:	c8 01       	movw	r24, r16
 50c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <func_parity>
 510:	18 2f       	mov	r17, r24
		lcd_gotoxy(13, 1);
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	8d e0       	ldi	r24, 0x0D	; 13
 516:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
 51a:	42 e0       	ldi	r20, 0x02	; 2
 51c:	be 01       	movw	r22, r28
 51e:	6f 5f       	subi	r22, 0xFF	; 255
 520:	7f 4f       	sbci	r23, 0xFF	; 255
 522:	81 2f       	mov	r24, r17
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__itoa_ncheck>
		itoa(parity, lcd_string, 2);
		lcd_puts(lcd_string);
 52a:	ce 01       	movw	r24, r28
 52c:	01 96       	adiw	r24, 0x01	; 1
 52e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
		uart_puts(lcd_string);
 532:	ce 01       	movw	r24, r28
 534:	01 96       	adiw	r24, 0x01	; 1
 536:	0e 94 40 03 	call	0x680	; 0x680 <uart_puts>
		uart_puts("\r\n");
 53a:	8c e2       	ldi	r24, 0x2C	; 44
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	0e 94 40 03 	call	0x680	; 0x680 <uart_puts>
	// even parity bit calculator


	
	
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	ff 91       	pop	r31
 550:	ef 91       	pop	r30
 552:	bf 91       	pop	r27
 554:	af 91       	pop	r26
 556:	9f 91       	pop	r25
 558:	8f 91       	pop	r24
 55a:	7f 91       	pop	r23
 55c:	6f 91       	pop	r22
 55e:	5f 91       	pop	r21
 560:	4f 91       	pop	r20
 562:	3f 91       	pop	r19
 564:	2f 91       	pop	r18
 566:	1f 91       	pop	r17
 568:	0f 91       	pop	r16
 56a:	0f 90       	pop	r0
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	0f 90       	pop	r0
 570:	1f 90       	pop	r1
 572:	18 95       	reti

00000574 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 574:	1f 92       	push	r1
 576:	0f 92       	push	r0
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	0f 92       	push	r0
 57c:	11 24       	eor	r1, r1
 57e:	2f 93       	push	r18
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
 584:	ef 93       	push	r30
 586:	ff 93       	push	r31
 588:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 58c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 590:	8c 71       	andi	r24, 0x1C	; 28
 592:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <UART_RxHead>
 596:	ef 5f       	subi	r30, 0xFF	; 255
 598:	ef 73       	andi	r30, 0x3F	; 63
 59a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <UART_RxTail>
 59e:	e9 17       	cp	r30, r25
 5a0:	39 f0       	breq	.+14     	; 0x5b0 <__vector_18+0x3c>
 5a2:	e0 93 39 01 	sts	0x0139, r30	; 0x800139 <UART_RxHead>
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	e4 5c       	subi	r30, 0xC4	; 196
 5aa:	fe 4f       	sbci	r31, 0xFE	; 254
 5ac:	20 83       	st	Z, r18
 5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <__vector_18+0x3e>
 5b0:	82 e0       	ldi	r24, 0x02	; 2
 5b2:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <UART_LastRxError>
 5b6:	89 2b       	or	r24, r25
 5b8:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <UART_LastRxError>
 5bc:	ff 91       	pop	r31
 5be:	ef 91       	pop	r30
 5c0:	9f 91       	pop	r25
 5c2:	8f 91       	pop	r24
 5c4:	2f 91       	pop	r18
 5c6:	0f 90       	pop	r0
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	0f 90       	pop	r0
 5cc:	1f 90       	pop	r1
 5ce:	18 95       	reti

000005d0 <__vector_19>:
 5d0:	1f 92       	push	r1
 5d2:	0f 92       	push	r0
 5d4:	0f b6       	in	r0, 0x3f	; 63
 5d6:	0f 92       	push	r0
 5d8:	11 24       	eor	r1, r1
 5da:	8f 93       	push	r24
 5dc:	9f 93       	push	r25
 5de:	ef 93       	push	r30
 5e0:	ff 93       	push	r31
 5e2:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <UART_TxHead>
 5e6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <UART_TxTail>
 5ea:	98 17       	cp	r25, r24
 5ec:	69 f0       	breq	.+26     	; 0x608 <__vector_19+0x38>
 5ee:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <UART_TxTail>
 5f2:	ef 5f       	subi	r30, 0xFF	; 255
 5f4:	ef 73       	andi	r30, 0x3F	; 63
 5f6:	e0 93 3a 01 	sts	0x013A, r30	; 0x80013a <UART_TxTail>
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	e4 58       	subi	r30, 0x84	; 132
 5fe:	fe 4f       	sbci	r31, 0xFE	; 254
 600:	80 81       	ld	r24, Z
 602:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 606:	05 c0       	rjmp	.+10     	; 0x612 <__vector_19+0x42>
 608:	e1 ec       	ldi	r30, 0xC1	; 193
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	80 81       	ld	r24, Z
 60e:	8f 7d       	andi	r24, 0xDF	; 223
 610:	80 83       	st	Z, r24
 612:	ff 91       	pop	r31
 614:	ef 91       	pop	r30
 616:	9f 91       	pop	r25
 618:	8f 91       	pop	r24
 61a:	0f 90       	pop	r0
 61c:	0f be       	out	0x3f, r0	; 63
 61e:	0f 90       	pop	r0
 620:	1f 90       	pop	r1
 622:	18 95       	reti

00000624 <uart_init>:
 624:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <UART_TxHead>
 628:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <UART_TxTail>
 62c:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <UART_RxHead>
 630:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <UART_RxTail>
 634:	99 23       	and	r25, r25
 636:	1c f4       	brge	.+6      	; 0x63e <uart_init+0x1a>
 638:	22 e0       	ldi	r18, 0x02	; 2
 63a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 63e:	90 78       	andi	r25, 0x80	; 128
 640:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 644:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 648:	88 e9       	ldi	r24, 0x98	; 152
 64a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 64e:	86 e0       	ldi	r24, 0x06	; 6
 650:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 654:	08 95       	ret

00000656 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 656:	20 91 3b 01 	lds	r18, 0x013B	; 0x80013b <UART_TxHead>
 65a:	2f 5f       	subi	r18, 0xFF	; 255
 65c:	2f 73       	andi	r18, 0x3F	; 63

    while (tmphead == UART_TxTail)
 65e:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <UART_TxTail>
 662:	29 17       	cp	r18, r25
 664:	e1 f3       	breq	.-8      	; 0x65e <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 666:	e2 2f       	mov	r30, r18
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	e4 58       	subi	r30, 0x84	; 132
 66c:	fe 4f       	sbci	r31, 0xFE	; 254
 66e:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 670:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 674:	e1 ec       	ldi	r30, 0xC1	; 193
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 81       	ld	r24, Z
 67a:	80 62       	ori	r24, 0x20	; 32
 67c:	80 83       	st	Z, r24
 67e:	08 95       	ret

00000680 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 680:	cf 93       	push	r28
 682:	df 93       	push	r29
 684:	ec 01       	movw	r28, r24
    while (*s)
 686:	88 81       	ld	r24, Y
 688:	88 23       	and	r24, r24
 68a:	31 f0       	breq	.+12     	; 0x698 <uart_puts+0x18>
 68c:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 68e:	0e 94 2b 03 	call	0x656	; 0x656 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 692:	89 91       	ld	r24, Y+
 694:	81 11       	cpse	r24, r1
 696:	fb cf       	rjmp	.-10     	; 0x68e <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	08 95       	ret

0000069e <__fixunssfsi>:
 69e:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_splitA>
 6a2:	88 f0       	brcs	.+34     	; 0x6c6 <__fixunssfsi+0x28>
 6a4:	9f 57       	subi	r25, 0x7F	; 127
 6a6:	98 f0       	brcs	.+38     	; 0x6ce <__fixunssfsi+0x30>
 6a8:	b9 2f       	mov	r27, r25
 6aa:	99 27       	eor	r25, r25
 6ac:	b7 51       	subi	r27, 0x17	; 23
 6ae:	b0 f0       	brcs	.+44     	; 0x6dc <__fixunssfsi+0x3e>
 6b0:	e1 f0       	breq	.+56     	; 0x6ea <__fixunssfsi+0x4c>
 6b2:	66 0f       	add	r22, r22
 6b4:	77 1f       	adc	r23, r23
 6b6:	88 1f       	adc	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	1a f0       	brmi	.+6      	; 0x6c2 <__fixunssfsi+0x24>
 6bc:	ba 95       	dec	r27
 6be:	c9 f7       	brne	.-14     	; 0x6b2 <__fixunssfsi+0x14>
 6c0:	14 c0       	rjmp	.+40     	; 0x6ea <__fixunssfsi+0x4c>
 6c2:	b1 30       	cpi	r27, 0x01	; 1
 6c4:	91 f0       	breq	.+36     	; 0x6ea <__fixunssfsi+0x4c>
 6c6:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_zero>
 6ca:	b1 e0       	ldi	r27, 0x01	; 1
 6cc:	08 95       	ret
 6ce:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__fp_zero>
 6d2:	67 2f       	mov	r22, r23
 6d4:	78 2f       	mov	r23, r24
 6d6:	88 27       	eor	r24, r24
 6d8:	b8 5f       	subi	r27, 0xF8	; 248
 6da:	39 f0       	breq	.+14     	; 0x6ea <__fixunssfsi+0x4c>
 6dc:	b9 3f       	cpi	r27, 0xF9	; 249
 6de:	cc f3       	brlt	.-14     	; 0x6d2 <__fixunssfsi+0x34>
 6e0:	86 95       	lsr	r24
 6e2:	77 95       	ror	r23
 6e4:	67 95       	ror	r22
 6e6:	b3 95       	inc	r27
 6e8:	d9 f7       	brne	.-10     	; 0x6e0 <__fixunssfsi+0x42>
 6ea:	3e f4       	brtc	.+14     	; 0x6fa <__fixunssfsi+0x5c>
 6ec:	90 95       	com	r25
 6ee:	80 95       	com	r24
 6f0:	70 95       	com	r23
 6f2:	61 95       	neg	r22
 6f4:	7f 4f       	sbci	r23, 0xFF	; 255
 6f6:	8f 4f       	sbci	r24, 0xFF	; 255
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	08 95       	ret

000006fc <__floatunsisf>:
 6fc:	e8 94       	clt
 6fe:	09 c0       	rjmp	.+18     	; 0x712 <__floatsisf+0x12>

00000700 <__floatsisf>:
 700:	97 fb       	bst	r25, 7
 702:	3e f4       	brtc	.+14     	; 0x712 <__floatsisf+0x12>
 704:	90 95       	com	r25
 706:	80 95       	com	r24
 708:	70 95       	com	r23
 70a:	61 95       	neg	r22
 70c:	7f 4f       	sbci	r23, 0xFF	; 255
 70e:	8f 4f       	sbci	r24, 0xFF	; 255
 710:	9f 4f       	sbci	r25, 0xFF	; 255
 712:	99 23       	and	r25, r25
 714:	a9 f0       	breq	.+42     	; 0x740 <__floatsisf+0x40>
 716:	f9 2f       	mov	r31, r25
 718:	96 e9       	ldi	r25, 0x96	; 150
 71a:	bb 27       	eor	r27, r27
 71c:	93 95       	inc	r25
 71e:	f6 95       	lsr	r31
 720:	87 95       	ror	r24
 722:	77 95       	ror	r23
 724:	67 95       	ror	r22
 726:	b7 95       	ror	r27
 728:	f1 11       	cpse	r31, r1
 72a:	f8 cf       	rjmp	.-16     	; 0x71c <__floatsisf+0x1c>
 72c:	fa f4       	brpl	.+62     	; 0x76c <__floatsisf+0x6c>
 72e:	bb 0f       	add	r27, r27
 730:	11 f4       	brne	.+4      	; 0x736 <__floatsisf+0x36>
 732:	60 ff       	sbrs	r22, 0
 734:	1b c0       	rjmp	.+54     	; 0x76c <__floatsisf+0x6c>
 736:	6f 5f       	subi	r22, 0xFF	; 255
 738:	7f 4f       	sbci	r23, 0xFF	; 255
 73a:	8f 4f       	sbci	r24, 0xFF	; 255
 73c:	9f 4f       	sbci	r25, 0xFF	; 255
 73e:	16 c0       	rjmp	.+44     	; 0x76c <__floatsisf+0x6c>
 740:	88 23       	and	r24, r24
 742:	11 f0       	breq	.+4      	; 0x748 <__floatsisf+0x48>
 744:	96 e9       	ldi	r25, 0x96	; 150
 746:	11 c0       	rjmp	.+34     	; 0x76a <__floatsisf+0x6a>
 748:	77 23       	and	r23, r23
 74a:	21 f0       	breq	.+8      	; 0x754 <__floatsisf+0x54>
 74c:	9e e8       	ldi	r25, 0x8E	; 142
 74e:	87 2f       	mov	r24, r23
 750:	76 2f       	mov	r23, r22
 752:	05 c0       	rjmp	.+10     	; 0x75e <__floatsisf+0x5e>
 754:	66 23       	and	r22, r22
 756:	71 f0       	breq	.+28     	; 0x774 <__floatsisf+0x74>
 758:	96 e8       	ldi	r25, 0x86	; 134
 75a:	86 2f       	mov	r24, r22
 75c:	70 e0       	ldi	r23, 0x00	; 0
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	2a f0       	brmi	.+10     	; 0x76c <__floatsisf+0x6c>
 762:	9a 95       	dec	r25
 764:	66 0f       	add	r22, r22
 766:	77 1f       	adc	r23, r23
 768:	88 1f       	adc	r24, r24
 76a:	da f7       	brpl	.-10     	; 0x762 <__floatsisf+0x62>
 76c:	88 0f       	add	r24, r24
 76e:	96 95       	lsr	r25
 770:	87 95       	ror	r24
 772:	97 f9       	bld	r25, 7
 774:	08 95       	ret

00000776 <__fp_split3>:
 776:	57 fd       	sbrc	r21, 7
 778:	90 58       	subi	r25, 0x80	; 128
 77a:	44 0f       	add	r20, r20
 77c:	55 1f       	adc	r21, r21
 77e:	59 f0       	breq	.+22     	; 0x796 <__fp_splitA+0x10>
 780:	5f 3f       	cpi	r21, 0xFF	; 255
 782:	71 f0       	breq	.+28     	; 0x7a0 <__fp_splitA+0x1a>
 784:	47 95       	ror	r20

00000786 <__fp_splitA>:
 786:	88 0f       	add	r24, r24
 788:	97 fb       	bst	r25, 7
 78a:	99 1f       	adc	r25, r25
 78c:	61 f0       	breq	.+24     	; 0x7a6 <__fp_splitA+0x20>
 78e:	9f 3f       	cpi	r25, 0xFF	; 255
 790:	79 f0       	breq	.+30     	; 0x7b0 <__fp_splitA+0x2a>
 792:	87 95       	ror	r24
 794:	08 95       	ret
 796:	12 16       	cp	r1, r18
 798:	13 06       	cpc	r1, r19
 79a:	14 06       	cpc	r1, r20
 79c:	55 1f       	adc	r21, r21
 79e:	f2 cf       	rjmp	.-28     	; 0x784 <__fp_split3+0xe>
 7a0:	46 95       	lsr	r20
 7a2:	f1 df       	rcall	.-30     	; 0x786 <__fp_splitA>
 7a4:	08 c0       	rjmp	.+16     	; 0x7b6 <__fp_splitA+0x30>
 7a6:	16 16       	cp	r1, r22
 7a8:	17 06       	cpc	r1, r23
 7aa:	18 06       	cpc	r1, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	f1 cf       	rjmp	.-30     	; 0x792 <__fp_splitA+0xc>
 7b0:	86 95       	lsr	r24
 7b2:	71 05       	cpc	r23, r1
 7b4:	61 05       	cpc	r22, r1
 7b6:	08 94       	sec
 7b8:	08 95       	ret

000007ba <__fp_zero>:
 7ba:	e8 94       	clt

000007bc <__fp_szero>:
 7bc:	bb 27       	eor	r27, r27
 7be:	66 27       	eor	r22, r22
 7c0:	77 27       	eor	r23, r23
 7c2:	cb 01       	movw	r24, r22
 7c4:	97 f9       	bld	r25, 7
 7c6:	08 95       	ret

000007c8 <__mulsf3>:
 7c8:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__mulsf3x>
 7cc:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__fp_round>
 7d0:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fp_pscA>
 7d4:	38 f0       	brcs	.+14     	; 0x7e4 <__mulsf3+0x1c>
 7d6:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__fp_pscB>
 7da:	20 f0       	brcs	.+8      	; 0x7e4 <__mulsf3+0x1c>
 7dc:	95 23       	and	r25, r21
 7de:	11 f0       	breq	.+4      	; 0x7e4 <__mulsf3+0x1c>
 7e0:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_inf>
 7e4:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_nan>
 7e8:	11 24       	eor	r1, r1
 7ea:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_szero>

000007ee <__mulsf3x>:
 7ee:	0e 94 bb 03 	call	0x776	; 0x776 <__fp_split3>
 7f2:	70 f3       	brcs	.-36     	; 0x7d0 <__mulsf3+0x8>

000007f4 <__mulsf3_pse>:
 7f4:	95 9f       	mul	r25, r21
 7f6:	c1 f3       	breq	.-16     	; 0x7e8 <__mulsf3+0x20>
 7f8:	95 0f       	add	r25, r21
 7fa:	50 e0       	ldi	r21, 0x00	; 0
 7fc:	55 1f       	adc	r21, r21
 7fe:	62 9f       	mul	r22, r18
 800:	f0 01       	movw	r30, r0
 802:	72 9f       	mul	r23, r18
 804:	bb 27       	eor	r27, r27
 806:	f0 0d       	add	r31, r0
 808:	b1 1d       	adc	r27, r1
 80a:	63 9f       	mul	r22, r19
 80c:	aa 27       	eor	r26, r26
 80e:	f0 0d       	add	r31, r0
 810:	b1 1d       	adc	r27, r1
 812:	aa 1f       	adc	r26, r26
 814:	64 9f       	mul	r22, r20
 816:	66 27       	eor	r22, r22
 818:	b0 0d       	add	r27, r0
 81a:	a1 1d       	adc	r26, r1
 81c:	66 1f       	adc	r22, r22
 81e:	82 9f       	mul	r24, r18
 820:	22 27       	eor	r18, r18
 822:	b0 0d       	add	r27, r0
 824:	a1 1d       	adc	r26, r1
 826:	62 1f       	adc	r22, r18
 828:	73 9f       	mul	r23, r19
 82a:	b0 0d       	add	r27, r0
 82c:	a1 1d       	adc	r26, r1
 82e:	62 1f       	adc	r22, r18
 830:	83 9f       	mul	r24, r19
 832:	a0 0d       	add	r26, r0
 834:	61 1d       	adc	r22, r1
 836:	22 1f       	adc	r18, r18
 838:	74 9f       	mul	r23, r20
 83a:	33 27       	eor	r19, r19
 83c:	a0 0d       	add	r26, r0
 83e:	61 1d       	adc	r22, r1
 840:	23 1f       	adc	r18, r19
 842:	84 9f       	mul	r24, r20
 844:	60 0d       	add	r22, r0
 846:	21 1d       	adc	r18, r1
 848:	82 2f       	mov	r24, r18
 84a:	76 2f       	mov	r23, r22
 84c:	6a 2f       	mov	r22, r26
 84e:	11 24       	eor	r1, r1
 850:	9f 57       	subi	r25, 0x7F	; 127
 852:	50 40       	sbci	r21, 0x00	; 0
 854:	9a f0       	brmi	.+38     	; 0x87c <__mulsf3_pse+0x88>
 856:	f1 f0       	breq	.+60     	; 0x894 <__mulsf3_pse+0xa0>
 858:	88 23       	and	r24, r24
 85a:	4a f0       	brmi	.+18     	; 0x86e <__mulsf3_pse+0x7a>
 85c:	ee 0f       	add	r30, r30
 85e:	ff 1f       	adc	r31, r31
 860:	bb 1f       	adc	r27, r27
 862:	66 1f       	adc	r22, r22
 864:	77 1f       	adc	r23, r23
 866:	88 1f       	adc	r24, r24
 868:	91 50       	subi	r25, 0x01	; 1
 86a:	50 40       	sbci	r21, 0x00	; 0
 86c:	a9 f7       	brne	.-22     	; 0x858 <__mulsf3_pse+0x64>
 86e:	9e 3f       	cpi	r25, 0xFE	; 254
 870:	51 05       	cpc	r21, r1
 872:	80 f0       	brcs	.+32     	; 0x894 <__mulsf3_pse+0xa0>
 874:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_inf>
 878:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__fp_szero>
 87c:	5f 3f       	cpi	r21, 0xFF	; 255
 87e:	e4 f3       	brlt	.-8      	; 0x878 <__mulsf3_pse+0x84>
 880:	98 3e       	cpi	r25, 0xE8	; 232
 882:	d4 f3       	brlt	.-12     	; 0x878 <__mulsf3_pse+0x84>
 884:	86 95       	lsr	r24
 886:	77 95       	ror	r23
 888:	67 95       	ror	r22
 88a:	b7 95       	ror	r27
 88c:	f7 95       	ror	r31
 88e:	e7 95       	ror	r30
 890:	9f 5f       	subi	r25, 0xFF	; 255
 892:	c1 f7       	brne	.-16     	; 0x884 <__mulsf3_pse+0x90>
 894:	fe 2b       	or	r31, r30
 896:	88 0f       	add	r24, r24
 898:	91 1d       	adc	r25, r1
 89a:	96 95       	lsr	r25
 89c:	87 95       	ror	r24
 89e:	97 f9       	bld	r25, 7
 8a0:	08 95       	ret

000008a2 <__fp_inf>:
 8a2:	97 f9       	bld	r25, 7
 8a4:	9f 67       	ori	r25, 0x7F	; 127
 8a6:	80 e8       	ldi	r24, 0x80	; 128
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	60 e0       	ldi	r22, 0x00	; 0
 8ac:	08 95       	ret

000008ae <__fp_nan>:
 8ae:	9f ef       	ldi	r25, 0xFF	; 255
 8b0:	80 ec       	ldi	r24, 0xC0	; 192
 8b2:	08 95       	ret

000008b4 <__fp_pscA>:
 8b4:	00 24       	eor	r0, r0
 8b6:	0a 94       	dec	r0
 8b8:	16 16       	cp	r1, r22
 8ba:	17 06       	cpc	r1, r23
 8bc:	18 06       	cpc	r1, r24
 8be:	09 06       	cpc	r0, r25
 8c0:	08 95       	ret

000008c2 <__fp_pscB>:
 8c2:	00 24       	eor	r0, r0
 8c4:	0a 94       	dec	r0
 8c6:	12 16       	cp	r1, r18
 8c8:	13 06       	cpc	r1, r19
 8ca:	14 06       	cpc	r1, r20
 8cc:	05 06       	cpc	r0, r21
 8ce:	08 95       	ret

000008d0 <__fp_round>:
 8d0:	09 2e       	mov	r0, r25
 8d2:	03 94       	inc	r0
 8d4:	00 0c       	add	r0, r0
 8d6:	11 f4       	brne	.+4      	; 0x8dc <__fp_round+0xc>
 8d8:	88 23       	and	r24, r24
 8da:	52 f0       	brmi	.+20     	; 0x8f0 <__fp_round+0x20>
 8dc:	bb 0f       	add	r27, r27
 8de:	40 f4       	brcc	.+16     	; 0x8f0 <__fp_round+0x20>
 8e0:	bf 2b       	or	r27, r31
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <__fp_round+0x18>
 8e4:	60 ff       	sbrs	r22, 0
 8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__fp_round+0x20>
 8e8:	6f 5f       	subi	r22, 0xFF	; 255
 8ea:	7f 4f       	sbci	r23, 0xFF	; 255
 8ec:	8f 4f       	sbci	r24, 0xFF	; 255
 8ee:	9f 4f       	sbci	r25, 0xFF	; 255
 8f0:	08 95       	ret

000008f2 <__itoa_ncheck>:
 8f2:	bb 27       	eor	r27, r27
 8f4:	4a 30       	cpi	r20, 0x0A	; 10
 8f6:	31 f4       	brne	.+12     	; 0x904 <__stack+0x5>
 8f8:	99 23       	and	r25, r25
 8fa:	22 f4       	brpl	.+8      	; 0x904 <__stack+0x5>
 8fc:	bd e2       	ldi	r27, 0x2D	; 45
 8fe:	90 95       	com	r25
 900:	81 95       	neg	r24
 902:	9f 4f       	sbci	r25, 0xFF	; 255
 904:	0c 94 85 04 	jmp	0x90a	; 0x90a <__utoa_common>

00000908 <__utoa_ncheck>:
 908:	bb 27       	eor	r27, r27

0000090a <__utoa_common>:
 90a:	fb 01       	movw	r30, r22
 90c:	55 27       	eor	r21, r21
 90e:	aa 27       	eor	r26, r26
 910:	88 0f       	add	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	aa 1f       	adc	r26, r26
 916:	a4 17       	cp	r26, r20
 918:	10 f0       	brcs	.+4      	; 0x91e <__utoa_common+0x14>
 91a:	a4 1b       	sub	r26, r20
 91c:	83 95       	inc	r24
 91e:	50 51       	subi	r21, 0x10	; 16
 920:	b9 f7       	brne	.-18     	; 0x910 <__utoa_common+0x6>
 922:	a0 5d       	subi	r26, 0xD0	; 208
 924:	aa 33       	cpi	r26, 0x3A	; 58
 926:	08 f0       	brcs	.+2      	; 0x92a <__utoa_common+0x20>
 928:	a9 5d       	subi	r26, 0xD9	; 217
 92a:	a1 93       	st	Z+, r26
 92c:	00 97       	sbiw	r24, 0x00	; 0
 92e:	79 f7       	brne	.-34     	; 0x90e <__utoa_common+0x4>
 930:	b1 11       	cpse	r27, r1
 932:	b1 93       	st	Z+, r27
 934:	11 92       	st	Z+, r1
 936:	cb 01       	movw	r24, r22
 938:	0c 94 9e 04 	jmp	0x93c	; 0x93c <strrev>

0000093c <strrev>:
 93c:	dc 01       	movw	r26, r24
 93e:	fc 01       	movw	r30, r24
 940:	67 2f       	mov	r22, r23
 942:	71 91       	ld	r23, Z+
 944:	77 23       	and	r23, r23
 946:	e1 f7       	brne	.-8      	; 0x940 <strrev+0x4>
 948:	32 97       	sbiw	r30, 0x02	; 2
 94a:	04 c0       	rjmp	.+8      	; 0x954 <strrev+0x18>
 94c:	7c 91       	ld	r23, X
 94e:	6d 93       	st	X+, r22
 950:	70 83       	st	Z, r23
 952:	62 91       	ld	r22, -Z
 954:	ae 17       	cp	r26, r30
 956:	bf 07       	cpc	r27, r31
 958:	c8 f3       	brcs	.-14     	; 0x94c <strrev+0x10>
 95a:	08 95       	ret

0000095c <_exit>:
 95c:	f8 94       	cli

0000095e <__stop_program>:
 95e:	ff cf       	rjmp	.-2      	; 0x95e <__stop_program>
