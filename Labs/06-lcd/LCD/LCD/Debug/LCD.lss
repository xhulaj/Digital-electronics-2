
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000546  000005da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000546  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080012e  0080012e  00000608  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001448  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ba  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008e3  00000000  00000000  0000252a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00002e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f0  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000adf  00000000  00000000  00003500  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003fdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 33       	cpi	r26, 0x34	; 52
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 a1 02 	jmp	0x542	; 0x542 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_data>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_gotoxy>:
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_gotoxy+0xc>
 130:	80 58       	subi	r24, 0x80	; 128
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret
 138:	80 54       	subi	r24, 0x40	; 64
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_clrscr>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 146:	08 95       	ret

00000148 <lcd_putc>:
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_puts>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <lcd_puts+0x1a>
 160:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <lcd_puts+0x10>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 174:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 176:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 178:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 17a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 17c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 17e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 180:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x1c>
 18c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 18e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 190:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x30>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x40>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x50>
 1c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1c2:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x62>
 1d2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:
	0b11110
};
int main(void)
{
	 // Initialize LCD display
	 lcd_init(LCD_DISP_ON);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>

	 // Set pointer to beginning of CGRAM memory
	 lcd_command(1 << LCD_CGRAM);
 1fa:	80 e4       	ldi	r24, 0x40	; 64
 1fc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 200:	c0 e0       	ldi	r28, 0x00	; 0
 202:	d1 e0       	ldi	r29, 0x01	; 1
 204:	00 e2       	ldi	r16, 0x20	; 32
 206:	11 e0       	ldi	r17, 0x01	; 1
	 for (uint8_t i = 0; i < 32; i++)
	 {
		 // Store all new chars to memory line by line
		 lcd_data(customChar[i]);
 208:	89 91       	ld	r24, Y+
 20a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
	 // Initialize LCD display
	 lcd_init(LCD_DISP_ON);

	 // Set pointer to beginning of CGRAM memory
	 lcd_command(1 << LCD_CGRAM);
	 for (uint8_t i = 0; i < 32; i++)
 20e:	c0 17       	cp	r28, r16
 210:	d1 07       	cpc	r29, r17
 212:	d1 f7       	brne	.-12     	; 0x208 <main+0x14>
	 {
		 // Store all new chars to memory line by line
		 lcd_data(customChar[i]);
	 }
	 // Set DDRAM address
	 lcd_command(1 << LCD_DDRAM);
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
	 // Display first custom character
    // Initialize LCD display
    //lcd_init(LCD_DISP_ON);

    // Put string(s) at LCD display
    lcd_gotoxy(1, 0);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_puts("00:00.0");
 222:	8f e1       	ldi	r24, 0x1F	; 31
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
	lcd_gotoxy(1,1);
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc('b');
 232:	82 e6       	ldi	r24, 0x62	; 98
 234:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	lcd_gotoxy(11,1);
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	8b e0       	ldi	r24, 0x0B	; 11
 23c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc('c');
 240:	83 e6       	ldi	r24, 0x63	; 99
 242:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>

    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set prescaler and enable overflow interrupt every 16 ms
	TIM2_overflow_16ms();
 246:	e1 eb       	ldi	r30, 0xB1	; 177
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	87 60       	ori	r24, 0x07	; 7
 24e:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 250:	e0 e7       	ldi	r30, 0x70	; 112
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	81 60       	ori	r24, 0x01	; 1
 258:	80 83       	st	Z, r24
	TIM0_overflow_16ms();
 25a:	85 b5       	in	r24, 0x25	; 37
 25c:	8d 7f       	andi	r24, 0xFD	; 253
 25e:	85 bd       	out	0x25, r24	; 37
 260:	85 b5       	in	r24, 0x25	; 37
 262:	85 60       	ori	r24, 0x05	; 5
 264:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 266:	ee e6       	ldi	r30, 0x6E	; 110
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 270:	78 94       	sei
 272:	ff cf       	rjmp	.-2      	; 0x272 <main+0x7e>

00000274 <__vector_9>:
 * ISR starts when Timer/Counter2 overflows. Update the stopwatch on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER2_OVF_vect)
{
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	0f 93       	push	r16
 280:	1f 93       	push	r17
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	cd b7       	in	r28, 0x3d	; 61
 2a0:	de b7       	in	r29, 0x3e	; 62
 2a2:	26 97       	sbiw	r28, 0x06	; 6
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	cd bf       	out	0x3d, r28	; 61
    static uint8_t number_of_overflows = 0;
	static uint8_t tens = 0;
	static uint8_t secs = 00;
	static uint8_t mins = 0;
	uint16_t sq_mins = secs * secs;	
 2a8:	00 91 33 01 	lds	r16, 0x0133	; 0x800133 <secs.1953>
	
	char LCD_string[2] = "  ";
 2ac:	20 e2       	ldi	r18, 0x20	; 32
 2ae:	30 e2       	ldi	r19, 0x20	; 32
 2b0:	3a 83       	std	Y+2, r19	; 0x02
 2b2:	29 83       	std	Y+1, r18	; 0x01
	char sq_string[4] = "    ";
 2b4:	3c 83       	std	Y+4, r19	; 0x04
 2b6:	2b 83       	std	Y+3, r18	; 0x03
 2b8:	3e 83       	std	Y+6, r19	; 0x06
 2ba:	2d 83       	std	Y+5, r18	; 0x05

    number_of_overflows++;
 2bc:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <number_of_overflows.1951>
 2c0:	9f 5f       	subi	r25, 0xFF	; 255
    if (number_of_overflows >= 6)
 2c2:	96 30       	cpi	r25, 0x06	; 6
 2c4:	18 f4       	brcc	.+6      	; 0x2cc <__vector_9+0x58>
	uint16_t sq_mins = secs * secs;	
	
	char LCD_string[2] = "  ";
	char sq_string[4] = "    ";

    number_of_overflows++;
 2c6:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <number_of_overflows.1951>
 2ca:	97 c0       	rjmp	.+302    	; 0x3fa <__vector_9+0x186>
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 2cc:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <number_of_overflows.1951>
		tens++;
 2d0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <tens.1952>
 2d4:	8f 5f       	subi	r24, 0xFF	; 255
		if(tens > 9)
 2d6:	8a 30       	cpi	r24, 0x0A	; 10
 2d8:	18 f4       	brcc	.+6      	; 0x2e0 <__vector_9+0x6c>
    number_of_overflows++;
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
		tens++;
 2da:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <tens.1952>
 2de:	06 c0       	rjmp	.+12     	; 0x2ec <__vector_9+0x78>
		if(tens > 9)
		{
			tens = 0;
 2e0:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <tens.1952>
			secs++;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	80 0f       	add	r24, r16
 2e8:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <secs.1953>
		}
		if(secs > 59)
 2ec:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <secs.1953>
 2f0:	8c 33       	cpi	r24, 0x3C	; 60
 2f2:	20 f4       	brcc	.+8      	; 0x2fc <__vector_9+0x88>
{
    static uint8_t number_of_overflows = 0;
	static uint8_t tens = 0;
	static uint8_t secs = 00;
	static uint8_t mins = 0;
	uint16_t sq_mins = secs * secs;	
 2f4:	00 9f       	mul	r16, r16
 2f6:	80 01       	movw	r16, r0
 2f8:	11 24       	eor	r1, r1
 2fa:	19 c0       	rjmp	.+50     	; 0x32e <__vector_9+0xba>
			tens = 0;
			secs++;
		}
		if(secs > 59)
		{
			secs = 0;
 2fc:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <secs.1953>
			lcd_gotoxy(11,0);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	8b e0       	ldi	r24, 0x0B	; 11
 304:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_putc(32);
 308:	80 e2       	ldi	r24, 0x20	; 32
 30a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
			lcd_putc(32);
 30e:	80 e2       	ldi	r24, 0x20	; 32
 310:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
			lcd_putc(32);
 314:	80 e2       	ldi	r24, 0x20	; 32
 316:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
			lcd_putc(32);
 31a:	80 e2       	ldi	r24, 0x20	; 32
 31c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
			sq_mins = 0;
			mins++;
 320:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <mins.1954>
 324:	8f 5f       	subi	r24, 0xFF	; 255
 326:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <mins.1954>
			lcd_gotoxy(11,0);
			lcd_putc(32);
			lcd_putc(32);
			lcd_putc(32);
			lcd_putc(32);
			sq_mins = 0;
 32a:	00 e0       	ldi	r16, 0x00	; 0
 32c:	10 e0       	ldi	r17, 0x00	; 0
			mins++;
		}
		if(mins > 59)
 32e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <mins.1954>
 332:	8c 33       	cpi	r24, 0x3C	; 60
 334:	10 f0       	brcs	.+4      	; 0x33a <__vector_9+0xc6>
		{
			mins = 0;
 336:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <mins.1954>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 33a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <tens.1952>
 33e:	4a e0       	ldi	r20, 0x0A	; 10
 340:	be 01       	movw	r22, r28
 342:	6f 5f       	subi	r22, 0xFF	; 255
 344:	7f 4f       	sbci	r23, 0xFF	; 255
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__itoa_ncheck>
		}

		itoa(tens, LCD_string, 10);
		lcd_gotoxy(7,0);
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	87 e0       	ldi	r24, 0x07	; 7
 350:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(LCD_string);
 354:	ce 01       	movw	r24, r28
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		if(secs < 10)
 35c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <secs.1953>
 360:	8a 30       	cpi	r24, 0x0A	; 10
 362:	68 f4       	brcc	.+26     	; 0x37e <__vector_9+0x10a>
 364:	4a e0       	ldi	r20, 0x0A	; 10
 366:	be 01       	movw	r22, r28
 368:	6e 5f       	subi	r22, 0xFE	; 254
 36a:	7f 4f       	sbci	r23, 0xFF	; 255
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__itoa_ncheck>
		{
			itoa(secs, &LCD_string[1],10);
			LCD_string[0] = '0';
 372:	80 e3       	ldi	r24, 0x30	; 48
 374:	89 83       	std	Y+1, r24	; 0x01
		}
		if(secs > 9)
 376:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <secs.1953>
 37a:	8a 30       	cpi	r24, 0x0A	; 10
 37c:	38 f0       	brcs	.+14     	; 0x38c <__vector_9+0x118>
 37e:	4a e0       	ldi	r20, 0x0A	; 10
 380:	be 01       	movw	r22, r28
 382:	6f 5f       	subi	r22, 0xFF	; 255
 384:	7f 4f       	sbci	r23, 0xFF	; 255
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__itoa_ncheck>
		{
			itoa(secs, &LCD_string[0],10);
		}
		lcd_gotoxy(4, 0);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	84 e0       	ldi	r24, 0x04	; 4
 390:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(LCD_string);
 394:	ce 01       	movw	r24, r28
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		if(mins < 10)
 39c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <mins.1954>
 3a0:	8a 30       	cpi	r24, 0x0A	; 10
 3a2:	68 f4       	brcc	.+26     	; 0x3be <__vector_9+0x14a>
 3a4:	4a e0       	ldi	r20, 0x0A	; 10
 3a6:	be 01       	movw	r22, r28
 3a8:	6e 5f       	subi	r22, 0xFE	; 254
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__itoa_ncheck>
		{
			itoa(mins, &LCD_string[1],10);
			LCD_string[0] = '0';
 3b2:	80 e3       	ldi	r24, 0x30	; 48
 3b4:	89 83       	std	Y+1, r24	; 0x01
		}
		if(mins > 9)
 3b6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <mins.1954>
 3ba:	8a 30       	cpi	r24, 0x0A	; 10
 3bc:	38 f0       	brcs	.+14     	; 0x3cc <__vector_9+0x158>
 3be:	4a e0       	ldi	r20, 0x0A	; 10
 3c0:	be 01       	movw	r22, r28
 3c2:	6f 5f       	subi	r22, 0xFF	; 255
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__itoa_ncheck>
		{
			itoa(mins, &LCD_string[0],10);
		}
		lcd_gotoxy(1, 0);
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(LCD_string);
 3d4:	ce 01       	movw	r24, r28
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 3dc:	4a e0       	ldi	r20, 0x0A	; 10
 3de:	be 01       	movw	r22, r28
 3e0:	6d 5f       	subi	r22, 0xFD	; 253
 3e2:	7f 4f       	sbci	r23, 0xFF	; 255
 3e4:	c8 01       	movw	r24, r16
 3e6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__itoa_ncheck>
		// print square of mins to screen
		itoa(sq_mins, sq_string, 10);
		lcd_gotoxy(11,0);
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	8b e0       	ldi	r24, 0x0B	; 11
 3ee:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(sq_string);
 3f2:	ce 01       	movw	r24, r28
 3f4:	03 96       	adiw	r24, 0x03	; 3
 3f6:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
    }

}
 3fa:	26 96       	adiw	r28, 0x06	; 6
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	f8 94       	cli
 400:	de bf       	out	0x3e, r29	; 62
 402:	0f be       	out	0x3f, r0	; 63
 404:	cd bf       	out	0x3d, r28	; 61
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	ff 91       	pop	r31
 40c:	ef 91       	pop	r30
 40e:	bf 91       	pop	r27
 410:	af 91       	pop	r26
 412:	9f 91       	pop	r25
 414:	8f 91       	pop	r24
 416:	7f 91       	pop	r23
 418:	6f 91       	pop	r22
 41a:	5f 91       	pop	r21
 41c:	4f 91       	pop	r20
 41e:	3f 91       	pop	r19
 420:	2f 91       	pop	r18
 422:	1f 91       	pop	r17
 424:	0f 91       	pop	r16
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	2f 93       	push	r18
 43c:	3f 93       	push	r19
 43e:	4f 93       	push	r20
 440:	5f 93       	push	r21
 442:	6f 93       	push	r22
 444:	7f 93       	push	r23
 446:	8f 93       	push	r24
 448:	9f 93       	push	r25
 44a:	af 93       	push	r26
 44c:	bf 93       	push	r27
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	ef 93       	push	r30
 454:	ff 93       	push	r31
	static uint8_t bar = 0;
	static uint8_t pos = 0;
	static uint8_t symbol[6] = {32, 0, 1, 2, 3, 255};
	lcd_gotoxy(pos, 1);
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <pos.1964>
 45c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc(symbol[bar]);
 460:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <__data_end>
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	e9 5d       	subi	r30, 0xD9	; 217
 468:	fe 4f       	sbci	r31, 0xFE	; 254
 46a:	80 81       	ld	r24, Z
 46c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	bar++;
 470:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 474:	8f 5f       	subi	r24, 0xFF	; 255
 476:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
	
	if(bar > 5)
 47a:	86 30       	cpi	r24, 0x06	; 6
 47c:	38 f0       	brcs	.+14     	; 0x48c <__vector_16+0x5c>
	{
		pos++;
 47e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <pos.1964>
 482:	8f 5f       	subi	r24, 0xFF	; 255
 484:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <pos.1964>
		bar = 0;
 488:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
	}
	if( pos > 9)
 48c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <pos.1964>
 490:	8a 30       	cpi	r24, 0x0A	; 10
 492:	78 f0       	brcs	.+30     	; 0x4b2 <__vector_16+0x82>
	{
		pos = 0;
 494:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <pos.1964>
		bar = 0;
 498:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
		lcd_gotoxy(0,1);
 49c:	61 e0       	ldi	r22, 0x01	; 1
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
 4a4:	ca e0       	ldi	r28, 0x0A	; 10
 4a6:	d0 e0       	ldi	r29, 0x00	; 0
		for(int i = 0; i < 10; i++)
		{
			lcd_putc(32);
 4a8:	80 e2       	ldi	r24, 0x20	; 32
 4aa:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 4ae:	21 97       	sbiw	r28, 0x01	; 1
	if( pos > 9)
	{
		pos = 0;
		bar = 0;
		lcd_gotoxy(0,1);
		for(int i = 0; i < 10; i++)
 4b0:	d9 f7       	brne	.-10     	; 0x4a8 <__vector_16+0x78>
		{
			lcd_putc(32);
		}
	}
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	bf 91       	pop	r27
 4bc:	af 91       	pop	r26
 4be:	9f 91       	pop	r25
 4c0:	8f 91       	pop	r24
 4c2:	7f 91       	pop	r23
 4c4:	6f 91       	pop	r22
 4c6:	5f 91       	pop	r21
 4c8:	4f 91       	pop	r20
 4ca:	3f 91       	pop	r19
 4cc:	2f 91       	pop	r18
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <__itoa_ncheck>:
 4d8:	bb 27       	eor	r27, r27
 4da:	4a 30       	cpi	r20, 0x0A	; 10
 4dc:	31 f4       	brne	.+12     	; 0x4ea <__itoa_ncheck+0x12>
 4de:	99 23       	and	r25, r25
 4e0:	22 f4       	brpl	.+8      	; 0x4ea <__itoa_ncheck+0x12>
 4e2:	bd e2       	ldi	r27, 0x2D	; 45
 4e4:	90 95       	com	r25
 4e6:	81 95       	neg	r24
 4e8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ea:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__utoa_common>

000004ee <__utoa_ncheck>:
 4ee:	bb 27       	eor	r27, r27

000004f0 <__utoa_common>:
 4f0:	fb 01       	movw	r30, r22
 4f2:	55 27       	eor	r21, r21
 4f4:	aa 27       	eor	r26, r26
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	aa 1f       	adc	r26, r26
 4fc:	a4 17       	cp	r26, r20
 4fe:	10 f0       	brcs	.+4      	; 0x504 <__utoa_common+0x14>
 500:	a4 1b       	sub	r26, r20
 502:	83 95       	inc	r24
 504:	50 51       	subi	r21, 0x10	; 16
 506:	b9 f7       	brne	.-18     	; 0x4f6 <__utoa_common+0x6>
 508:	a0 5d       	subi	r26, 0xD0	; 208
 50a:	aa 33       	cpi	r26, 0x3A	; 58
 50c:	08 f0       	brcs	.+2      	; 0x510 <__utoa_common+0x20>
 50e:	a9 5d       	subi	r26, 0xD9	; 217
 510:	a1 93       	st	Z+, r26
 512:	00 97       	sbiw	r24, 0x00	; 0
 514:	79 f7       	brne	.-34     	; 0x4f4 <__utoa_common+0x4>
 516:	b1 11       	cpse	r27, r1
 518:	b1 93       	st	Z+, r27
 51a:	11 92       	st	Z+, r1
 51c:	cb 01       	movw	r24, r22
 51e:	0c 94 91 02 	jmp	0x522	; 0x522 <strrev>

00000522 <strrev>:
 522:	dc 01       	movw	r26, r24
 524:	fc 01       	movw	r30, r24
 526:	67 2f       	mov	r22, r23
 528:	71 91       	ld	r23, Z+
 52a:	77 23       	and	r23, r23
 52c:	e1 f7       	brne	.-8      	; 0x526 <strrev+0x4>
 52e:	32 97       	sbiw	r30, 0x02	; 2
 530:	04 c0       	rjmp	.+8      	; 0x53a <strrev+0x18>
 532:	7c 91       	ld	r23, X
 534:	6d 93       	st	X+, r22
 536:	70 83       	st	Z, r23
 538:	62 91       	ld	r22, -Z
 53a:	ae 17       	cp	r26, r30
 53c:	bf 07       	cpc	r27, r31
 53e:	c8 f3       	brcs	.-14     	; 0x532 <strrev+0x10>
 540:	08 95       	ret

00000542 <_exit>:
 542:	f8 94       	cli

00000544 <__stop_program>:
 544:	ff cf       	rjmp	.-2      	; 0x544 <__stop_program>
