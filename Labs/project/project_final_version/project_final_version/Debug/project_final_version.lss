
project_final_version.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  00000dba  00000e4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008a  008001d8  008001d8  00000f26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002064  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cce  00000000  00000000  000031a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fff  00000000  00000000  00003e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000043c  00000000  00000000  00004e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000734  00000000  00000000  000052b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000112b  00000000  00000000  000059e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00006b0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__vector_13>
  38:	0c 94 a3 04 	jmp	0x946	; 0x946 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__vector_18>
  4c:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea eb       	ldi	r30, 0xBA	; 186
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 3d       	cpi	r26, 0xD8	; 216
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 ed       	ldi	r26, 0xD8	; 216
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 36       	cpi	r26, 0x62	; 98
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 43 01 	call	0x286	; 0x286 <main>
  9e:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <is_button_pressed>:

/* Function definitions ----------------------------------------------*/

uint16_t is_button_pressed(uint16_t *button_history){
	uint8_t pressed = 0;
	if ((*button_history & MASK) == 0b1111000000000000){ 
  a6:	fc 01       	movw	r30, r24
  a8:	20 81       	ld	r18, Z
  aa:	31 81       	ldd	r19, Z+1	; 0x01
  ac:	2f 73       	andi	r18, 0x3F	; 63
  ae:	30 7f       	andi	r19, 0xF0	; 240
  b0:	21 15       	cp	r18, r1
  b2:	30 4f       	sbci	r19, 0xF0	; 240
  b4:	29 f4       	brne	.+10     	; 0xc0 <is_button_pressed+0x1a>
		pressed = 1;
		*button_history = 0b0000000000000000;
  b6:	fc 01       	movw	r30, r24
  b8:	11 82       	std	Z+1, r1	; 0x01
  ba:	10 82       	st	Z, r1
/* Function definitions ----------------------------------------------*/

uint16_t is_button_pressed(uint16_t *button_history){
	uint8_t pressed = 0;
	if ((*button_history & MASK) == 0b1111000000000000){ 
		pressed = 1;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <is_button_pressed+0x1c>
#include "debounce.h"

/* Function definitions ----------------------------------------------*/

uint16_t is_button_pressed(uint16_t *button_history){
	uint8_t pressed = 0;
  c0:	80 e0       	ldi	r24, 0x00	; 0
	if ((*button_history & MASK) == 0b1111000000000000){ 
		pressed = 1;
		*button_history = 0b0000000000000000;
	}
	return pressed;
}
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	08 95       	ret

000000c6 <GPIO_config_output>:
/* GPIO_read */
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	return(bit_is_set(*reg_name, pin_num)); // if bit is set, returns 1, if not, returns 0
	
}
  c6:	fc 01       	movw	r30, r24
  c8:	40 81       	ld	r20, Z
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <GPIO_config_output+0xe>
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <GPIO_config_output+0xa>
  d8:	24 2b       	or	r18, r20
  da:	20 83       	st	Z, r18
  dc:	08 95       	ret

000000de <GPIO_write_low>:
  de:	fc 01       	movw	r30, r24
  e0:	90 81       	ld	r25, Z
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <GPIO_write_low+0xe>
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <GPIO_write_low+0xa>
  f0:	20 95       	com	r18
  f2:	29 23       	and	r18, r25
  f4:	20 83       	st	Z, r18
  f6:	08 95       	ret

000000f8 <GPIO_set_pin>:

uint8_t GPIO_set_pin(volatile uint8_t *reg_name, uint8_t pin_num, uint8_t state)
{
	if(state & (1 << 0))
  f8:	40 ff       	sbrs	r20, 0
  fa:	0c c0       	rjmp	.+24     	; 0x114 <GPIO_set_pin+0x1c>
	*reg_name |= (1<<pin_num); //Write high-value to a set bit in given register
  fc:	fc 01       	movw	r30, r24
  fe:	40 81       	ld	r20, Z
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <GPIO_set_pin+0x12>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <GPIO_set_pin+0xe>
 10e:	24 2b       	or	r18, r20
 110:	20 83       	st	Z, r18
 112:	08 95       	ret
	else
	*reg_name = *reg_name & ~(1<<pin_num); // Write low-value to a set bit in given register
 114:	fc 01       	movw	r30, r24
 116:	40 81       	ld	r20, Z
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <GPIO_set_pin+0x2a>
 11e:	22 0f       	add	r18, r18
 120:	33 1f       	adc	r19, r19
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <GPIO_set_pin+0x26>
 126:	20 95       	com	r18
 128:	24 23       	and	r18, r20
 12a:	20 83       	st	Z, r18
}
 12c:	08 95       	ret

0000012e <bit_val>:

uint8_t bit_val(uint8_t var, uint8_t pos)
{
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	61 50       	subi	r22, 0x01	; 1
 132:	02 c0       	rjmp	.+4      	; 0x138 <bit_val+0xa>
 134:	95 95       	asr	r25
 136:	87 95       	ror	r24
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <bit_val+0x6>
	if (var & (1 << (pos - 1)))
	return 1;
	else
	return 0;
 13c:	81 70       	andi	r24, 0x01	; 1
 13e:	08 95       	ret

00000140 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
 140:	29 9a       	sbi	0x05, 1	; 5
 142:	85 e0       	ldi	r24, 0x05	; 5
 144:	8a 95       	dec	r24
 146:	f1 f7       	brne	.-4      	; 0x144 <toggle_e+0x4>
 148:	00 00       	nop
 14a:	29 98       	cbi	0x05, 1	; 5
 14c:	08 95       	ret

0000014e <lcd_write>:
 14e:	cf 93       	push	r28
 150:	c8 2f       	mov	r28, r24
 152:	66 23       	and	r22, r22
 154:	11 f0       	breq	.+4      	; 0x15a <lcd_write+0xc>
 156:	28 9a       	sbi	0x05, 0	; 5
 158:	01 c0       	rjmp	.+2      	; 0x15c <lcd_write+0xe>
 15a:	28 98       	cbi	0x05, 0	; 5
 15c:	54 9a       	sbi	0x0a, 4	; 10
 15e:	55 9a       	sbi	0x0a, 5	; 10
 160:	56 9a       	sbi	0x0a, 6	; 10
 162:	57 9a       	sbi	0x0a, 7	; 10
 164:	5f 98       	cbi	0x0b, 7	; 11
 166:	5e 98       	cbi	0x0b, 6	; 11
 168:	5d 98       	cbi	0x0b, 5	; 11
 16a:	5c 98       	cbi	0x0b, 4	; 11
 16c:	cc 23       	and	r28, r28
 16e:	0c f4       	brge	.+2      	; 0x172 <lcd_write+0x24>
 170:	5f 9a       	sbi	0x0b, 7	; 11
 172:	c6 fd       	sbrc	r28, 6
 174:	5e 9a       	sbi	0x0b, 6	; 11
 176:	c5 fd       	sbrc	r28, 5
 178:	5d 9a       	sbi	0x0b, 5	; 11
 17a:	c4 fd       	sbrc	r28, 4
 17c:	5c 9a       	sbi	0x0b, 4	; 11
 17e:	0e 94 a0 00 	call	0x140	; 0x140 <toggle_e>
 182:	5f 98       	cbi	0x0b, 7	; 11
 184:	5e 98       	cbi	0x0b, 6	; 11
 186:	5d 98       	cbi	0x0b, 5	; 11
 188:	5c 98       	cbi	0x0b, 4	; 11
 18a:	c3 fd       	sbrc	r28, 3
 18c:	5f 9a       	sbi	0x0b, 7	; 11
 18e:	c2 fd       	sbrc	r28, 2
 190:	5e 9a       	sbi	0x0b, 6	; 11
 192:	c1 fd       	sbrc	r28, 1
 194:	5d 9a       	sbi	0x0b, 5	; 11
 196:	c0 fd       	sbrc	r28, 0
 198:	5c 9a       	sbi	0x0b, 4	; 11
 19a:	0e 94 a0 00 	call	0x140	; 0x140 <toggle_e>
 19e:	5c 9a       	sbi	0x0b, 4	; 11
 1a0:	5d 9a       	sbi	0x0b, 5	; 11
 1a2:	5e 9a       	sbi	0x0b, 6	; 11
 1a4:	5f 9a       	sbi	0x0b, 7	; 11
 1a6:	87 eb       	ldi	r24, 0xB7	; 183
 1a8:	9b e0       	ldi	r25, 0x0B	; 11
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_write+0x5c>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_write+0x62>
 1b0:	00 00       	nop
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <lcd_command>:
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_write>
 1bc:	08 95       	ret

000001be <lcd_gotoxy>:
 1be:	61 11       	cpse	r22, r1
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <lcd_gotoxy+0xc>
 1c2:	80 58       	subi	r24, 0x80	; 128
 1c4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
 1c8:	08 95       	ret
 1ca:	80 54       	subi	r24, 0x40	; 64
 1cc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
 1d0:	08 95       	ret

000001d2 <lcd_clrscr>:
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
 1d8:	08 95       	ret

000001da <lcd_putc>:
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_write>
 1e0:	08 95       	ret

000001e2 <lcd_puts>:
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
 1e8:	21 96       	adiw	r28, 0x01	; 1
 1ea:	fc 01       	movw	r30, r24
 1ec:	80 81       	ld	r24, Z
 1ee:	88 23       	and	r24, r24
 1f0:	29 f0       	breq	.+10     	; 0x1fc <lcd_puts+0x1a>
 1f2:	0e 94 ed 00 	call	0x1da	; 0x1da <lcd_putc>
 1f6:	89 91       	ld	r24, Y+
 1f8:	81 11       	cpse	r24, r1
 1fa:	fb cf       	rjmp	.-10     	; 0x1f2 <lcd_puts+0x10>
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 202:	cf 93       	push	r28
 204:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 206:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 208:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 20a:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 20c:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 20e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 210:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 212:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	99 ef       	ldi	r25, 0xF9	; 249
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_init+0x16>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <lcd_init+0x1c>
 21e:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 220:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 222:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 224:	0e 94 a0 00 	call	0x140	; 0x140 <toggle_e>
 228:	8f e1       	ldi	r24, 0x1F	; 31
 22a:	9e e4       	ldi	r25, 0x4E	; 78
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_init+0x2a>
 230:	00 c0       	rjmp	.+0      	; 0x232 <lcd_init+0x30>
 232:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 234:	0e 94 a0 00 	call	0x140	; 0x140 <toggle_e>
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_init+0x3a>
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_init+0x40>
 242:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 244:	0e 94 a0 00 	call	0x140	; 0x140 <toggle_e>
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_init+0x4a>
 250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_init+0x50>
 252:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 254:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 256:	0e 94 a0 00 	call	0x140	; 0x140 <toggle_e>
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <lcd_init+0x5c>
 262:	00 c0       	rjmp	.+0      	; 0x264 <lcd_init+0x62>
 264:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 266:	88 e2       	ldi	r24, 0x28	; 40
 268:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 26c:	88 e0       	ldi	r24, 0x08	; 8
 26e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
    lcd_clrscr();                  /* display clear                */
 272:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 276:	86 e0       	ldi	r24, 0x06	; 6
 278:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 27c:	8c 2f       	mov	r24, r28
 27e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_command>
}/* lcd_init */
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <main>:
{
		/* ADC settings ------------------------------------------------------
    Configure ADC to convert PC0[A0] analog value
    Set ADC reference to AVcc
	*/
    ADMUX |= (1 << REFS0);
 286:	ec e7       	ldi	r30, 0x7C	; 124
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	80 64       	ori	r24, 0x40	; 64
 28e:	80 83       	st	Z, r24
    ADMUX &= ~(1 << REFS1);
 290:	80 81       	ld	r24, Z
 292:	8f 77       	andi	r24, 0x7F	; 127
 294:	80 83       	st	Z, r24
    
    // Set input channel to ADC0
    ADMUX &= ~((1 << MUX0)|(1 << MUX1)|(1 << MUX2)|(1 << MUX3));
 296:	80 81       	ld	r24, Z
 298:	80 7f       	andi	r24, 0xF0	; 240
 29a:	80 83       	st	Z, r24

    // Enable ADC module
    ADCSRA |= (1 << ADEN);
 29c:	ea e7       	ldi	r30, 0x7A	; 122
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	80 68       	ori	r24, 0x80	; 128
 2a4:	80 83       	st	Z, r24

    // Enable conversion complete interrupt
    ADCSRA |= (1 << ADIE);
 2a6:	80 81       	ld	r24, Z
 2a8:	88 60       	ori	r24, 0x08	; 8
 2aa:	80 83       	st	Z, r24

    // Set clock prescaler to 128
    ADCSRA |= ((1 << ADPS0)|(1 << ADPS1)|(1 << ADPS2));
 2ac:	80 81       	ld	r24, Z
 2ae:	87 60       	ori	r24, 0x07	; 7
 2b0:	80 83       	st	Z, r24
	/* ADC settings ----------------------------------------------------------*/
	
    //timer for checking state of buttons every 4ms 
	TIM1_overflow_4ms(); //1s for debugging
 2b2:	e1 e8       	ldi	r30, 0x81	; 129
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	89 7f       	andi	r24, 0xF9	; 249
 2ba:	80 83       	st	Z, r24
 2bc:	80 81       	ld	r24, Z
 2be:	81 60       	ori	r24, 0x01	; 1
 2c0:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 2c2:	ef e6       	ldi	r30, 0x6F	; 111
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	81 60       	ori	r24, 0x01	; 1
 2ca:	80 83       	st	Z, r24
	
	// Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
 2cc:	87 e6       	ldi	r24, 0x67	; 103
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 14 06 	call	0xc28	; 0xc28 <uart_init>


	/*Timer/Counter 0 settings --------------------------------------------------------------*/
	TIM0_set_mode_CTC();			// Set timer to CTC mode
 2d4:	85 b5       	in	r24, 0x25	; 37
 2d6:	87 7f       	andi	r24, 0xF7	; 247
 2d8:	85 bd       	out	0x25, r24	; 37
 2da:	84 b5       	in	r24, 0x24	; 36
 2dc:	82 60       	ori	r24, 0x02	; 2
 2de:	84 bd       	out	0x24, r24	; 36
 2e0:	84 b5       	in	r24, 0x24	; 36
 2e2:	8e 7f       	andi	r24, 0xFE	; 254
 2e4:	84 bd       	out	0x24, r24	; 36
	TIM0_overflow_16us();
 2e6:	85 b5       	in	r24, 0x25	; 37
 2e8:	89 7f       	andi	r24, 0xF9	; 249
 2ea:	85 bd       	out	0x25, r24	; 37
 2ec:	85 b5       	in	r24, 0x25	; 37
 2ee:	81 60       	ori	r24, 0x01	; 1
 2f0:	85 bd       	out	0x25, r24	; 37
	TIM0_CTC_A_interrupt_enable();	// Interrupt enable
 2f2:	ee e6       	ldi	r30, 0x6E	; 110
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	82 60       	ori	r24, 0x02	; 2
 2fa:	80 83       	st	Z, r24
	OCR0A = COMP_REG_A_MASK;		// Set Compare register A mask for 1 MHz frequency
 2fc:	80 ea       	ldi	r24, 0xA0	; 160
 2fe:	87 bd       	out	0x27, r24	; 39
	
	// SET output pins for R2R ladder
	GPIO_config_output(&DDRD, R0);
 300:	63 e0       	ldi	r22, 0x03	; 3
 302:	8a e2       	ldi	r24, 0x2A	; 42
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_config_output>
	GPIO_write_low(&PORTD, R0);
 30a:	63 e0       	ldi	r22, 0x03	; 3
 30c:	8b e2       	ldi	r24, 0x2B	; 43
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_write_low>
	GPIO_config_output(&DDRD, R1);
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	8a e2       	ldi	r24, 0x2A	; 42
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_config_output>
	GPIO_write_low(&PORTD, R1);
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	8b e2       	ldi	r24, 0x2B	; 43
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_write_low>
	GPIO_config_output(&DDRB, R2);
 328:	62 e0       	ldi	r22, 0x02	; 2
 32a:	84 e2       	ldi	r24, 0x24	; 36
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R2);
 332:	62 e0       	ldi	r22, 0x02	; 2
 334:	85 e2       	ldi	r24, 0x25	; 37
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_write_low>
	GPIO_config_output(&DDRB, R3);
 33c:	63 e0       	ldi	r22, 0x03	; 3
 33e:	84 e2       	ldi	r24, 0x24	; 36
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R3);
 346:	63 e0       	ldi	r22, 0x03	; 3
 348:	85 e2       	ldi	r24, 0x25	; 37
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_write_low>
	GPIO_config_output(&DDRB, R4);
 350:	64 e0       	ldi	r22, 0x04	; 4
 352:	84 e2       	ldi	r24, 0x24	; 36
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R4);
 35a:	64 e0       	ldi	r22, 0x04	; 4
 35c:	85 e2       	ldi	r24, 0x25	; 37
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_write_low>
	GPIO_config_output(&DDRB, R5);
 364:	65 e0       	ldi	r22, 0x05	; 5
 366:	84 e2       	ldi	r24, 0x24	; 36
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R5);
 36e:	65 e0       	ldi	r22, 0x05	; 5
 370:	85 e2       	ldi	r24, 0x25	; 37
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_write_low>
	GPIO_config_output(&DDRD, R6);
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	8a e2       	ldi	r24, 0x2A	; 42
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_config_output>
	GPIO_write_low(&PORTD, R6);
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	8b e2       	ldi	r24, 0x2B	; 43
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_write_low>
	GPIO_config_output(&DDRD, R7);
 38c:	62 e0       	ldi	r22, 0x02	; 2
 38e:	8a e2       	ldi	r24, 0x2A	; 42
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 63 00 	call	0xc6	; 0xc6 <GPIO_config_output>
	GPIO_write_low(&PORTD, R7);
 396:	62 e0       	ldi	r22, 0x02	; 2
 398:	8b e2       	ldi	r24, 0x2B	; 43
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_write_low>
	
	/* Managing process ---------------------------------------------*/
	// Initialize LCD display
	lcd_init(LCD_DISP_ON);
 3a0:	8c e0       	ldi	r24, 0x0C	; 12
 3a2:	0e 94 01 01 	call	0x202	; 0x202 <lcd_init>
	lcd_gotoxy(0, 0); lcd_puts("FREQ1:");
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
 3ae:	84 ea       	ldi	r24, 0xA4	; 164
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	lcd_gotoxy(0, 1); lcd_puts("FREQ2:");
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
 3be:	8b ea       	ldi	r24, 0xAB	; 171
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
    // Enables interrupts by setting the global interrupt mask
    sei();
 3c6:	78 94       	sei
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <main+0x142>

000003ca <__vector_13>:
	{
		
	}
}
ISR(TIMER1_OVF_vect)
{
 3ca:	1f 92       	push	r1
 3cc:	0f 92       	push	r0
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	0f 92       	push	r0
 3d2:	11 24       	eor	r1, r1
 3d4:	2f 93       	push	r18
 3d6:	3f 93       	push	r19
 3d8:	4f 93       	push	r20
 3da:	5f 93       	push	r21
 3dc:	6f 93       	push	r22
 3de:	7f 93       	push	r23
 3e0:	8f 93       	push	r24
 3e2:	9f 93       	push	r25
 3e4:	af 93       	push	r26
 3e6:	bf 93       	push	r27
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
 3ec:	ef 93       	push	r30
 3ee:	ff 93       	push	r31
	char lcd_str_1 = "    ";
	char lcd_str_2 = "    ";
	itoa(gen_f1, lcd_str_1, 10);
 3f0:	c2 eb       	ldi	r28, 0xB2	; 178
 3f2:	d1 e0       	ldi	r29, 0x01	; 1
 3f4:	dd 27       	eor	r29, r29
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3f6:	4a e0       	ldi	r20, 0x0A	; 10
 3f8:	be 01       	movw	r22, r28
 3fa:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <gen_f1>
 3fe:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <gen_f1+0x1>
 402:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__itoa_ncheck>
 406:	4a e0       	ldi	r20, 0x0A	; 10
 408:	be 01       	movw	r22, r28
 40a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <gen_f2>
 40e:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <gen_f2+0x1>
 412:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__itoa_ncheck>
	itoa(gen_f2, lcd_str_2, 10);
	lcd_gotoxy(10,0);
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	8a e0       	ldi	r24, 0x0A	; 10
 41a:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
	lcd_puts(lcd_str_1);
 41e:	ce 01       	movw	r24, r28
 420:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	lcd_gotoxy(10,1);
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	8a e0       	ldi	r24, 0x0A	; 10
 428:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_gotoxy>
	lcd_puts(lcd_str_2);
 42c:	ce 01       	movw	r24, r28
 42e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_puts>
	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
 432:	ea e7       	ldi	r30, 0x7A	; 122
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	80 64       	ori	r24, 0x40	; 64
 43a:	80 83       	st	Z, r24
}
 43c:	ff 91       	pop	r31
 43e:	ef 91       	pop	r30
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	bf 91       	pop	r27
 446:	af 91       	pop	r26
 448:	9f 91       	pop	r25
 44a:	8f 91       	pop	r24
 44c:	7f 91       	pop	r23
 44e:	6f 91       	pop	r22
 450:	5f 91       	pop	r21
 452:	4f 91       	pop	r20
 454:	3f 91       	pop	r19
 456:	2f 91       	pop	r18
 458:	0f 90       	pop	r0
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	0f 90       	pop	r0
 45e:	1f 90       	pop	r1
 460:	18 95       	reti

00000462 <__vector_21>:
ISR(ADC_vect)
{
 462:	1f 92       	push	r1
 464:	0f 92       	push	r0
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
 46c:	2f 93       	push	r18
 46e:	3f 93       	push	r19
 470:	4f 93       	push	r20
 472:	5f 93       	push	r21
 474:	6f 93       	push	r22
 476:	7f 93       	push	r23
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
 47c:	af 93       	push	r26
 47e:	bf 93       	push	r27
 480:	ef 93       	push	r30
 482:	ff 93       	push	r31
	//clear decimal and hex position
	uint16_t value = ADC;
 484:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 488:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 48c:	e0 e8       	ldi	r30, 0x80	; 128
 48e:	f1 e0       	ldi	r31, 0x01	; 1
 490:	20 ea       	ldi	r18, 0xA0	; 160
 492:	31 e0       	ldi	r19, 0x01	; 1
	};
	
	for(uint8_t i = 0; i < 16; ++i) //for all buttons
	{
	button_history[i] = (button_history[i] << 1); //make a space for new state
	button_history[i] |= 1; //set current state as not pushed in button history
 494:	80 81       	ld	r24, Z
 496:	91 81       	ldd	r25, Z+1	; 0x01
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	81 60       	ori	r24, 0x01	; 1
 49e:	81 93       	st	Z+, r24
 4a0:	91 93       	st	Z+, r25
		0xFFFF,0xFFFF,0xFFFF,0xFFFF,
		0xFFFF,0xFFFF,0xFFFF,0xFFFF,
		0xFFFF,0xFFFF,0xFFFF,0xFFFF		
	};
	
	for(uint8_t i = 0; i < 16; ++i) //for all buttons
 4a2:	e2 17       	cp	r30, r18
 4a4:	f3 07       	cpc	r31, r19
 4a6:	b1 f7       	brne	.-20     	; 0x494 <__vector_21+0x32>
	button_history[i] = (button_history[i] << 1); //make a space for new state
	button_history[i] |= 1; //set current state as not pushed in button history
	}
			
    /* Button recognition ------------------------------------------------------------*/
	if (value > 720)
 4a8:	41 3d       	cpi	r20, 0xD1	; 209
 4aa:	82 e0       	ldi	r24, 0x02	; 2
 4ac:	58 07       	cpc	r21, r24
 4ae:	08 f0       	brcs	.+2      	; 0x4b2 <__vector_21+0x50>
 4b0:	39 c2       	rjmp	.+1138   	; 0x924 <__stack+0x25>
	{				
		//uart_puts("NONE");		
	}
	//       from ADC value          to value - (not included)
	else if (720 >= value && value > 660) //1 - key name
 4b2:	ca 01       	movw	r24, r20
 4b4:	85 59       	subi	r24, 0x95	; 149
 4b6:	92 40       	sbci	r25, 0x02	; 2
 4b8:	cc 97       	sbiw	r24, 0x3c	; 60
 4ba:	f0 f4       	brcc	.+60     	; 0x4f8 <__vector_21+0x96>
	{		
		button_history[0] &= ~(1<<0); //set current state as pushed in button history
 4bc:	e0 e8       	ldi	r30, 0x80	; 128
 4be:	f1 e0       	ldi	r31, 0x01	; 1
 4c0:	80 81       	ld	r24, Z
 4c2:	91 81       	ldd	r25, Z+1	; 0x01
 4c4:	8e 7f       	andi	r24, 0xFE	; 254
 4c6:	91 83       	std	Z+1, r25	; 0x01
 4c8:	80 83       	st	Z, r24
		if (is_button_pressed(&button_history[0])) //button is pressed if it is not bounce or glitch
 4ca:	cf 01       	movw	r24, r30
 4cc:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 4d0:	89 2b       	or	r24, r25
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <__vector_21+0x74>
 4d4:	27 c2       	rjmp	.+1102   	; 0x924 <__stack+0x25>
		{
			uart_puts("1"); //send pushed key on UART		
 4d6:	87 eb       	ldi	r24, 0xB7	; 183
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	0e 94 42 06 	call	0xc84	; 0xc84 <uart_puts>
			gen_f1 = 810;
 4de:	8a e2       	ldi	r24, 0x2A	; 42
 4e0:	93 e0       	ldi	r25, 0x03	; 3
 4e2:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gen_f1+0x1>
 4e6:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gen_f1>
			gen_f2 = 1209;
 4ea:	89 eb       	ldi	r24, 0xB9	; 185
 4ec:	94 e0       	ldi	r25, 0x04	; 4
 4ee:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gen_f2+0x1>
 4f2:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gen_f2>
 4f6:	16 c2       	rjmp	.+1068   	; 0x924 <__stack+0x25>
		}		
	}
	else if (660 >= value && value > 610) //4
 4f8:	ca 01       	movw	r24, r20
 4fa:	83 56       	subi	r24, 0x63	; 99
 4fc:	92 40       	sbci	r25, 0x02	; 2
 4fe:	c2 97       	sbiw	r24, 0x32	; 50
 500:	f8 f4       	brcc	.+62     	; 0x540 <__vector_21+0xde>
	{
		button_history[1] &= ~(1<<0); 
 502:	e0 e8       	ldi	r30, 0x80	; 128
 504:	f1 e0       	ldi	r31, 0x01	; 1
 506:	82 81       	ldd	r24, Z+2	; 0x02
 508:	93 81       	ldd	r25, Z+3	; 0x03
 50a:	8e 7f       	andi	r24, 0xFE	; 254
 50c:	93 83       	std	Z+3, r25	; 0x03
 50e:	82 83       	std	Z+2, r24	; 0x02
		if (is_button_pressed(&button_history[1]))
 510:	82 e8       	ldi	r24, 0x82	; 130
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 518:	89 2b       	or	r24, r25
 51a:	09 f4       	brne	.+2      	; 0x51e <__vector_21+0xbc>
 51c:	03 c2       	rjmp	.+1030   	; 0x924 <__stack+0x25>
		{
			uart_puts("4");	
 51e:	89 eb       	ldi	r24, 0xB9	; 185
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	0e 94 42 06 	call	0xc84	; 0xc84 <uart_puts>
			gen_f1 = 880;
 526:	80 e7       	ldi	r24, 0x70	; 112
 528:	93 e0       	ldi	r25, 0x03	; 3
 52a:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gen_f1+0x1>
 52e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gen_f1>
			gen_f2 = 1209;
 532:	89 eb       	ldi	r24, 0xB9	; 185
 534:	94 e0       	ldi	r25, 0x04	; 4
 536:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gen_f2+0x1>
 53a:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gen_f2>
 53e:	f2 c1       	rjmp	.+996    	; 0x924 <__stack+0x25>
		}		
	}
	else if (610 >= value && value > 570) //7
 540:	ca 01       	movw	r24, r20
 542:	8b 53       	subi	r24, 0x3B	; 59
 544:	92 40       	sbci	r25, 0x02	; 2
 546:	88 97       	sbiw	r24, 0x28	; 40
 548:	f8 f4       	brcc	.+62     	; 0x588 <__vector_21+0x126>
	{
		button_history[2] &= ~(1<<0); 
 54a:	e0 e8       	ldi	r30, 0x80	; 128
 54c:	f1 e0       	ldi	r31, 0x01	; 1
 54e:	84 81       	ldd	r24, Z+4	; 0x04
 550:	95 81       	ldd	r25, Z+5	; 0x05
 552:	8e 7f       	andi	r24, 0xFE	; 254
 554:	95 83       	std	Z+5, r25	; 0x05
 556:	84 83       	std	Z+4, r24	; 0x04
		if (is_button_pressed(&button_history[2]))
 558:	84 e8       	ldi	r24, 0x84	; 132
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 560:	89 2b       	or	r24, r25
 562:	09 f4       	brne	.+2      	; 0x566 <__vector_21+0x104>
 564:	df c1       	rjmp	.+958    	; 0x924 <__stack+0x25>
		{
			uart_puts("7");
 566:	8b eb       	ldi	r24, 0xBB	; 187
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	0e 94 42 06 	call	0xc84	; 0xc84 <uart_puts>
			gen_f1 = 950;
 56e:	86 eb       	ldi	r24, 0xB6	; 182
 570:	93 e0       	ldi	r25, 0x03	; 3
 572:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gen_f1+0x1>
 576:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gen_f1>
			gen_f2 = 1209;
 57a:	89 eb       	ldi	r24, 0xB9	; 185
 57c:	94 e0       	ldi	r25, 0x04	; 4
 57e:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gen_f2+0x1>
 582:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gen_f2>
 586:	ce c1       	rjmp	.+924    	; 0x924 <__stack+0x25>
		}
	}
	else if (570 >= value && value > 530) //*
 588:	ca 01       	movw	r24, r20
 58a:	83 51       	subi	r24, 0x13	; 19
 58c:	92 40       	sbci	r25, 0x02	; 2
 58e:	88 97       	sbiw	r24, 0x28	; 40
 590:	f8 f4       	brcc	.+62     	; 0x5d0 <__vector_21+0x16e>
	{
		button_history[3] &= ~(1<<0); 
 592:	e0 e8       	ldi	r30, 0x80	; 128
 594:	f1 e0       	ldi	r31, 0x01	; 1
 596:	86 81       	ldd	r24, Z+6	; 0x06
 598:	97 81       	ldd	r25, Z+7	; 0x07
 59a:	8e 7f       	andi	r24, 0xFE	; 254
 59c:	97 83       	std	Z+7, r25	; 0x07
 59e:	86 83       	std	Z+6, r24	; 0x06
		if (is_button_pressed(&button_history[3]))
 5a0:	86 e8       	ldi	r24, 0x86	; 134
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 5a8:	89 2b       	or	r24, r25
 5aa:	09 f4       	brne	.+2      	; 0x5ae <__vector_21+0x14c>
 5ac:	bb c1       	rjmp	.+886    	; 0x924 <__stack+0x25>
		{
			uart_puts("*");
 5ae:	8d eb       	ldi	r24, 0xBD	; 189
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	0e 94 42 06 	call	0xc84	; 0xc84 <uart_puts>
			gen_f1 = 1020;
 5b6:	8c ef       	ldi	r24, 0xFC	; 252
 5b8:	93 e0       	ldi	r25, 0x03	; 3
 5ba:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gen_f1+0x1>
 5be:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gen_f1>
			gen_f2 = 1209;
 5c2:	89 eb       	ldi	r24, 0xB9	; 185
 5c4:	94 e0       	ldi	r25, 0x04	; 4
 5c6:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gen_f2+0x1>
 5ca:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gen_f2>
 5ce:	aa c1       	rjmp	.+852    	; 0x924 <__stack+0x25>
		}
	}
	else if (530 >= value && value > 490) //2
 5d0:	ca 01       	movw	r24, r20
 5d2:	8b 5e       	subi	r24, 0xEB	; 235
 5d4:	91 40       	sbci	r25, 0x01	; 1
 5d6:	88 97       	sbiw	r24, 0x28	; 40
 5d8:	f8 f4       	brcc	.+62     	; 0x618 <__vector_21+0x1b6>
	{
		button_history[4] &= ~(1<<0); 
 5da:	e0 e8       	ldi	r30, 0x80	; 128
 5dc:	f1 e0       	ldi	r31, 0x01	; 1
 5de:	80 85       	ldd	r24, Z+8	; 0x08
 5e0:	91 85       	ldd	r25, Z+9	; 0x09
 5e2:	8e 7f       	andi	r24, 0xFE	; 254
 5e4:	91 87       	std	Z+9, r25	; 0x09
 5e6:	80 87       	std	Z+8, r24	; 0x08
		if (is_button_pressed(&button_history[4]))
 5e8:	88 e8       	ldi	r24, 0x88	; 136
 5ea:	91 e0       	ldi	r25, 0x01	; 1
 5ec:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 5f0:	89 2b       	or	r24, r25
 5f2:	09 f4       	brne	.+2      	; 0x5f6 <__vector_21+0x194>
 5f4:	97 c1       	rjmp	.+814    	; 0x924 <__stack+0x25>
		{
			uart_puts("2");
 5f6:	8f eb       	ldi	r24, 0xBF	; 191
 5f8:	91 e0       	ldi	r25, 0x01	; 1
 5fa:	0e 94 42 06 	call	0xc84	; 0xc84 <uart_puts>
			gen_f1 = 810;
 5fe:	8a e2       	ldi	r24, 0x2A	; 42
 600:	93 e0       	ldi	r25, 0x03	; 3
 602:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gen_f1+0x1>
 606:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gen_f1>
			gen_f2 = 1336;
 60a:	88 e3       	ldi	r24, 0x38	; 56
 60c:	95 e0       	ldi	r25, 0x05	; 5
 60e:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gen_f2+0x1>
 612:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gen_f2>
 616:	86 c1       	rjmp	.+780    	; 0x924 <__stack+0x25>
		}
	}
	else if (490 >= value && value > 460) //3
 618:	ca 01       	movw	r24, r20
 61a:	8d 5c       	subi	r24, 0xCD	; 205
 61c:	91 40       	sbci	r25, 0x01	; 1
 61e:	4e 97       	sbiw	r24, 0x1e	; 30
 620:	f8 f4       	brcc	.+62     	; 0x660 <__vector_21+0x1fe>
	{
		button_history[5] &= 0xFFFE; 
 622:	e0 e8       	ldi	r30, 0x80	; 128
 624:	f1 e0       	ldi	r31, 0x01	; 1
 626:	82 85       	ldd	r24, Z+10	; 0x0a
 628:	93 85       	ldd	r25, Z+11	; 0x0b
 62a:	8e 7f       	andi	r24, 0xFE	; 254
 62c:	93 87       	std	Z+11, r25	; 0x0b
 62e:	82 87       	std	Z+10, r24	; 0x0a
		if (is_button_pressed(&button_history[5]))
 630:	8a e8       	ldi	r24, 0x8A	; 138
 632:	91 e0       	ldi	r25, 0x01	; 1
 634:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 638:	89 2b       	or	r24, r25
 63a:	09 f4       	brne	.+2      	; 0x63e <__vector_21+0x1dc>
 63c:	73 c1       	rjmp	.+742    	; 0x924 <__stack+0x25>
		{
			uart_puts("3");
 63e:	81 ec       	ldi	r24, 0xC1	; 193
 640:	91 e0       	ldi	r25, 0x01	; 1
 642:	0e 94 42 06 	call	0xc84	; 0xc84 <uart_puts>
			gen_f1 = 810;
 646:	8a e2       	ldi	r24, 0x2A	; 42
 648:	93 e0       	ldi	r25, 0x03	; 3
 64a:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gen_f1+0x1>
 64e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gen_f1>
			gen_f2 = 1477;
 652:	85 ec       	ldi	r24, 0xC5	; 197
 654:	95 e0       	ldi	r25, 0x05	; 5
 656:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gen_f2+0x1>
 65a:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gen_f2>
 65e:	62 c1       	rjmp	.+708    	; 0x924 <__stack+0x25>
		}
	}
	else if (460 >= value && value > 430) //A
 660:	ca 01       	movw	r24, r20
 662:	8f 5a       	subi	r24, 0xAF	; 175
 664:	91 40       	sbci	r25, 0x01	; 1
 666:	4e 97       	sbiw	r24, 0x1e	; 30
 668:	f8 f4       	brcc	.+62     	; 0x6a8 <__vector_21+0x246>
	{
		button_history[6] &= ~(1<<0); 
 66a:	e0 e8       	ldi	r30, 0x80	; 128
 66c:	f1 e0       	ldi	r31, 0x01	; 1
 66e:	84 85       	ldd	r24, Z+12	; 0x0c
 670:	95 85       	ldd	r25, Z+13	; 0x0d
 672:	8e 7f       	andi	r24, 0xFE	; 254
 674:	95 87       	std	Z+13, r25	; 0x0d
 676:	84 87       	std	Z+12, r24	; 0x0c
		if (is_button_pressed(&button_history[6]))
 678:	8c e8       	ldi	r24, 0x8C	; 140
 67a:	91 e0       	ldi	r25, 0x01	; 1
 67c:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 680:	89 2b       	or	r24, r25
 682:	09 f4       	brne	.+2      	; 0x686 <__vector_21+0x224>
 684:	4f c1       	rjmp	.+670    	; 0x924 <__stack+0x25>
		{
			uart_puts("A");
 686:	83 ec       	ldi	r24, 0xC3	; 195
 688:	91 e0       	ldi	r25, 0x01	; 1
 68a:	0e 94 42 06 	call	0xc84	; 0xc84 <uart_puts>
			gen_f1 = 810;
 68e:	8a e2       	ldi	r24, 0x2A	; 42
 690:	93 e0       	ldi	r25, 0x03	; 3
 692:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gen_f1+0x1>
 696:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gen_f1>
			gen_f2 = 1633;
 69a:	81 e6       	ldi	r24, 0x61	; 97
 69c:	96 e0       	ldi	r25, 0x06	; 6
 69e:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gen_f2+0x1>
 6a2:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gen_f2>
 6a6:	3e c1       	rjmp	.+636    	; 0x924 <__stack+0x25>
		}
	}
    else if (430 >= value && value > 390) //5
 6a8:	ca 01       	movw	r24, r20
 6aa:	87 58       	subi	r24, 0x87	; 135
 6ac:	91 40       	sbci	r25, 0x01	; 1
 6ae:	88 97       	sbiw	r24, 0x28	; 40
 6b0:	f8 f4       	brcc	.+62     	; 0x6f0 <__vector_21+0x28e>
    {
		button_history[7] &= ~(1<<0); 
 6b2:	e0 e8       	ldi	r30, 0x80	; 128
 6b4:	f1 e0       	ldi	r31, 0x01	; 1
 6b6:	86 85       	ldd	r24, Z+14	; 0x0e
 6b8:	97 85       	ldd	r25, Z+15	; 0x0f
 6ba:	8e 7f       	andi	r24, 0xFE	; 254
 6bc:	97 87       	std	Z+15, r25	; 0x0f
 6be:	86 87       	std	Z+14, r24	; 0x0e
		if (is_button_pressed(&button_history[7]))
 6c0:	8e e8       	ldi	r24, 0x8E	; 142
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 6c8:	89 2b       	or	r24, r25
 6ca:	09 f4       	brne	.+2      	; 0x6ce <__vector_21+0x26c>
 6cc:	2b c1       	rjmp	.+598    	; 0x924 <__stack+0x25>
		{
			uart_puts("5");
 6ce:	85 ec       	ldi	r24, 0xC5	; 197
 6d0:	91 e0       	ldi	r25, 0x01	; 1
 6d2:	0e 94 42 06 	call	0xc84	; 0xc84 <uart_puts>
			gen_f1 = 880;
 6d6:	80 e7       	ldi	r24, 0x70	; 112
 6d8:	93 e0       	ldi	r25, 0x03	; 3
 6da:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gen_f1+0x1>
 6de:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gen_f1>
			gen_f2 = 1336;
 6e2:	88 e3       	ldi	r24, 0x38	; 56
 6e4:	95 e0       	ldi	r25, 0x05	; 5
 6e6:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gen_f2+0x1>
 6ea:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gen_f2>
 6ee:	1a c1       	rjmp	.+564    	; 0x924 <__stack+0x25>
		}
    }
	else if (390 >= value && value > 340) //6
 6f0:	ca 01       	movw	r24, r20
 6f2:	85 55       	subi	r24, 0x55	; 85
 6f4:	91 40       	sbci	r25, 0x01	; 1
 6f6:	c2 97       	sbiw	r24, 0x32	; 50
 6f8:	f8 f4       	brcc	.+62     	; 0x738 <__vector_21+0x2d6>
	{
		button_history[8] &= ~(1<<0); 
 6fa:	e0 e8       	ldi	r30, 0x80	; 128
 6fc:	f1 e0       	ldi	r31, 0x01	; 1
 6fe:	80 89       	ldd	r24, Z+16	; 0x10
 700:	91 89       	ldd	r25, Z+17	; 0x11
 702:	8e 7f       	andi	r24, 0xFE	; 254
 704:	91 8b       	std	Z+17, r25	; 0x11
 706:	80 8b       	std	Z+16, r24	; 0x10
		if (is_button_pressed(&button_history[8]))
 708:	80 e9       	ldi	r24, 0x90	; 144
 70a:	91 e0       	ldi	r25, 0x01	; 1
 70c:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 710:	89 2b       	or	r24, r25
 712:	09 f4       	brne	.+2      	; 0x716 <__vector_21+0x2b4>
 714:	07 c1       	rjmp	.+526    	; 0x924 <__stack+0x25>
		{
			uart_puts("6");
 716:	87 ec       	ldi	r24, 0xC7	; 199
 718:	91 e0       	ldi	r25, 0x01	; 1
 71a:	0e 94 42 06 	call	0xc84	; 0xc84 <uart_puts>
			gen_f1 = 880;
 71e:	80 e7       	ldi	r24, 0x70	; 112
 720:	93 e0       	ldi	r25, 0x03	; 3
 722:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gen_f1+0x1>
 726:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gen_f1>
 			gen_f2 = 1477;
 72a:	85 ec       	ldi	r24, 0xC5	; 197
 72c:	95 e0       	ldi	r25, 0x05	; 5
 72e:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gen_f2+0x1>
 732:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gen_f2>
 736:	f6 c0       	rjmp	.+492    	; 0x924 <__stack+0x25>
		}
	}
	else if (340 >= value && value > 290) //B
 738:	ca 01       	movw	r24, r20
 73a:	83 52       	subi	r24, 0x23	; 35
 73c:	91 40       	sbci	r25, 0x01	; 1
 73e:	c2 97       	sbiw	r24, 0x32	; 50
 740:	f8 f4       	brcc	.+62     	; 0x780 <__vector_21+0x31e>
	{
		button_history[9] &= ~(1<<0); 
 742:	e0 e8       	ldi	r30, 0x80	; 128
 744:	f1 e0       	ldi	r31, 0x01	; 1
 746:	82 89       	ldd	r24, Z+18	; 0x12
 748:	93 89       	ldd	r25, Z+19	; 0x13
 74a:	8e 7f       	andi	r24, 0xFE	; 254
 74c:	93 8b       	std	Z+19, r25	; 0x13
 74e:	82 8b       	std	Z+18, r24	; 0x12
		if (is_button_pressed(&button_history[9]))
 750:	82 e9       	ldi	r24, 0x92	; 146
 752:	91 e0       	ldi	r25, 0x01	; 1
 754:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 758:	89 2b       	or	r24, r25
 75a:	09 f4       	brne	.+2      	; 0x75e <__vector_21+0x2fc>
 75c:	e3 c0       	rjmp	.+454    	; 0x924 <__stack+0x25>
		{
			uart_puts("B");
 75e:	89 ec       	ldi	r24, 0xC9	; 201
 760:	91 e0       	ldi	r25, 0x01	; 1
 762:	0e 94 42 06 	call	0xc84	; 0xc84 <uart_puts>
			gen_f1 = 880;
 766:	80 e7       	ldi	r24, 0x70	; 112
 768:	93 e0       	ldi	r25, 0x03	; 3
 76a:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gen_f1+0x1>
 76e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gen_f1>
			gen_f2 = 1633;
 772:	81 e6       	ldi	r24, 0x61	; 97
 774:	96 e0       	ldi	r25, 0x06	; 6
 776:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gen_f2+0x1>
 77a:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gen_f2>
 77e:	d2 c0       	rjmp	.+420    	; 0x924 <__stack+0x25>
		}
	}
	else if (290 >= value && value > 230) //8
 780:	ca 01       	movw	r24, r20
 782:	87 5e       	subi	r24, 0xE7	; 231
 784:	91 09       	sbc	r25, r1
 786:	cc 97       	sbiw	r24, 0x3c	; 60
 788:	f8 f4       	brcc	.+62     	; 0x7c8 <__vector_21+0x366>
	{
		button_history[10] &= ~(1<<0); 
 78a:	e0 e8       	ldi	r30, 0x80	; 128
 78c:	f1 e0       	ldi	r31, 0x01	; 1
 78e:	84 89       	ldd	r24, Z+20	; 0x14
 790:	95 89       	ldd	r25, Z+21	; 0x15
 792:	8e 7f       	andi	r24, 0xFE	; 254
 794:	95 8b       	std	Z+21, r25	; 0x15
 796:	84 8b       	std	Z+20, r24	; 0x14
		if (is_button_pressed(&button_history[10]))
 798:	84 e9       	ldi	r24, 0x94	; 148
 79a:	91 e0       	ldi	r25, 0x01	; 1
 79c:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 7a0:	89 2b       	or	r24, r25
 7a2:	09 f4       	brne	.+2      	; 0x7a6 <__vector_21+0x344>
 7a4:	bf c0       	rjmp	.+382    	; 0x924 <__stack+0x25>
		{
			uart_puts("8");
 7a6:	8b ec       	ldi	r24, 0xCB	; 203
 7a8:	91 e0       	ldi	r25, 0x01	; 1
 7aa:	0e 94 42 06 	call	0xc84	; 0xc84 <uart_puts>
			gen_f1 = 950;
 7ae:	86 eb       	ldi	r24, 0xB6	; 182
 7b0:	93 e0       	ldi	r25, 0x03	; 3
 7b2:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gen_f1+0x1>
 7b6:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gen_f1>
			gen_f2 = 1336;
 7ba:	88 e3       	ldi	r24, 0x38	; 56
 7bc:	95 e0       	ldi	r25, 0x05	; 5
 7be:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gen_f2+0x1>
 7c2:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gen_f2>
 7c6:	ae c0       	rjmp	.+348    	; 0x924 <__stack+0x25>
		}
	}
	else if (230 >= value && value > 190) //9
 7c8:	ca 01       	movw	r24, r20
 7ca:	8f 5b       	subi	r24, 0xBF	; 191
 7cc:	91 09       	sbc	r25, r1
 7ce:	88 97       	sbiw	r24, 0x28	; 40
 7d0:	f8 f4       	brcc	.+62     	; 0x810 <__vector_21+0x3ae>
	{
		button_history[11] &= ~(1<<0); 
 7d2:	e0 e8       	ldi	r30, 0x80	; 128
 7d4:	f1 e0       	ldi	r31, 0x01	; 1
 7d6:	86 89       	ldd	r24, Z+22	; 0x16
 7d8:	97 89       	ldd	r25, Z+23	; 0x17
 7da:	8e 7f       	andi	r24, 0xFE	; 254
 7dc:	97 8b       	std	Z+23, r25	; 0x17
 7de:	86 8b       	std	Z+22, r24	; 0x16
		if (is_button_pressed(&button_history[11]))
 7e0:	86 e9       	ldi	r24, 0x96	; 150
 7e2:	91 e0       	ldi	r25, 0x01	; 1
 7e4:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 7e8:	89 2b       	or	r24, r25
 7ea:	09 f4       	brne	.+2      	; 0x7ee <__vector_21+0x38c>
 7ec:	9b c0       	rjmp	.+310    	; 0x924 <__stack+0x25>
		{
			uart_puts("9");
 7ee:	8d ec       	ldi	r24, 0xCD	; 205
 7f0:	91 e0       	ldi	r25, 0x01	; 1
 7f2:	0e 94 42 06 	call	0xc84	; 0xc84 <uart_puts>
			gen_f1 = 950;
 7f6:	86 eb       	ldi	r24, 0xB6	; 182
 7f8:	93 e0       	ldi	r25, 0x03	; 3
 7fa:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gen_f1+0x1>
 7fe:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gen_f1>
			gen_f2 = 1477;
 802:	85 ec       	ldi	r24, 0xC5	; 197
 804:	95 e0       	ldi	r25, 0x05	; 5
 806:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gen_f2+0x1>
 80a:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gen_f2>
 80e:	8a c0       	rjmp	.+276    	; 0x924 <__stack+0x25>
		}
	}
	else if (190 >= value && value > 150) //0
 810:	ca 01       	movw	r24, r20
 812:	87 59       	subi	r24, 0x97	; 151
 814:	91 09       	sbc	r25, r1
 816:	88 97       	sbiw	r24, 0x28	; 40
 818:	f8 f4       	brcc	.+62     	; 0x858 <__vector_21+0x3f6>
	{
		button_history[12] &= ~(1<<0); 
 81a:	e0 e8       	ldi	r30, 0x80	; 128
 81c:	f1 e0       	ldi	r31, 0x01	; 1
 81e:	80 8d       	ldd	r24, Z+24	; 0x18
 820:	91 8d       	ldd	r25, Z+25	; 0x19
 822:	8e 7f       	andi	r24, 0xFE	; 254
 824:	91 8f       	std	Z+25, r25	; 0x19
 826:	80 8f       	std	Z+24, r24	; 0x18
		if (is_button_pressed(&button_history[12]))
 828:	88 e9       	ldi	r24, 0x98	; 152
 82a:	91 e0       	ldi	r25, 0x01	; 1
 82c:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 830:	89 2b       	or	r24, r25
 832:	09 f4       	brne	.+2      	; 0x836 <__vector_21+0x3d4>
 834:	77 c0       	rjmp	.+238    	; 0x924 <__stack+0x25>
		{
			uart_puts("0");
 836:	8f ec       	ldi	r24, 0xCF	; 207
 838:	91 e0       	ldi	r25, 0x01	; 1
 83a:	0e 94 42 06 	call	0xc84	; 0xc84 <uart_puts>
			gen_f1 = 1020;
 83e:	8c ef       	ldi	r24, 0xFC	; 252
 840:	93 e0       	ldi	r25, 0x03	; 3
 842:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gen_f1+0x1>
 846:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gen_f1>
			gen_f2 = 1336;
 84a:	88 e3       	ldi	r24, 0x38	; 56
 84c:	95 e0       	ldi	r25, 0x05	; 5
 84e:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gen_f2+0x1>
 852:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gen_f2>
 856:	66 c0       	rjmp	.+204    	; 0x924 <__stack+0x25>
		}
	}
	else if (150 >= value && value > 110) //C
 858:	ca 01       	movw	r24, r20
 85a:	8f 56       	subi	r24, 0x6F	; 111
 85c:	91 09       	sbc	r25, r1
 85e:	88 97       	sbiw	r24, 0x28	; 40
 860:	f8 f4       	brcc	.+62     	; 0x8a0 <__vector_21+0x43e>
	{
		button_history[13] &= ~(1<<0); 
 862:	e0 e8       	ldi	r30, 0x80	; 128
 864:	f1 e0       	ldi	r31, 0x01	; 1
 866:	82 8d       	ldd	r24, Z+26	; 0x1a
 868:	93 8d       	ldd	r25, Z+27	; 0x1b
 86a:	8e 7f       	andi	r24, 0xFE	; 254
 86c:	93 8f       	std	Z+27, r25	; 0x1b
 86e:	82 8f       	std	Z+26, r24	; 0x1a
		if (is_button_pressed(&button_history[13]))
 870:	8a e9       	ldi	r24, 0x9A	; 154
 872:	91 e0       	ldi	r25, 0x01	; 1
 874:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 878:	89 2b       	or	r24, r25
 87a:	09 f4       	brne	.+2      	; 0x87e <__vector_21+0x41c>
 87c:	53 c0       	rjmp	.+166    	; 0x924 <__stack+0x25>
		{
			uart_puts("C");
 87e:	81 ed       	ldi	r24, 0xD1	; 209
 880:	91 e0       	ldi	r25, 0x01	; 1
 882:	0e 94 42 06 	call	0xc84	; 0xc84 <uart_puts>
			gen_f1 = 950;
 886:	86 eb       	ldi	r24, 0xB6	; 182
 888:	93 e0       	ldi	r25, 0x03	; 3
 88a:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gen_f1+0x1>
 88e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gen_f1>
			gen_f2 = 1633;
 892:	81 e6       	ldi	r24, 0x61	; 97
 894:	96 e0       	ldi	r25, 0x06	; 6
 896:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gen_f2+0x1>
 89a:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gen_f2>
 89e:	42 c0       	rjmp	.+132    	; 0x924 <__stack+0x25>
		}
	}
	else if (110 >= value && value > 50) //#
 8a0:	ca 01       	movw	r24, r20
 8a2:	c3 97       	sbiw	r24, 0x33	; 51
 8a4:	cc 97       	sbiw	r24, 0x3c	; 60
 8a6:	f0 f4       	brcc	.+60     	; 0x8e4 <__vector_21+0x482>
	{
		button_history[14] &= ~(1<<0); 
 8a8:	e0 e8       	ldi	r30, 0x80	; 128
 8aa:	f1 e0       	ldi	r31, 0x01	; 1
 8ac:	84 8d       	ldd	r24, Z+28	; 0x1c
 8ae:	95 8d       	ldd	r25, Z+29	; 0x1d
 8b0:	8e 7f       	andi	r24, 0xFE	; 254
 8b2:	95 8f       	std	Z+29, r25	; 0x1d
 8b4:	84 8f       	std	Z+28, r24	; 0x1c
		if (is_button_pressed(&button_history[14]))
 8b6:	8c e9       	ldi	r24, 0x9C	; 156
 8b8:	91 e0       	ldi	r25, 0x01	; 1
 8ba:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 8be:	89 2b       	or	r24, r25
 8c0:	89 f1       	breq	.+98     	; 0x924 <__stack+0x25>
		{
			uart_puts("#");
 8c2:	83 ed       	ldi	r24, 0xD3	; 211
 8c4:	91 e0       	ldi	r25, 0x01	; 1
 8c6:	0e 94 42 06 	call	0xc84	; 0xc84 <uart_puts>
			gen_f1 = 1020;
 8ca:	8c ef       	ldi	r24, 0xFC	; 252
 8cc:	93 e0       	ldi	r25, 0x03	; 3
 8ce:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gen_f1+0x1>
 8d2:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gen_f1>
			gen_f2 = 1477;
 8d6:	85 ec       	ldi	r24, 0xC5	; 197
 8d8:	95 e0       	ldi	r25, 0x05	; 5
 8da:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gen_f2+0x1>
 8de:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gen_f2>
 8e2:	20 c0       	rjmp	.+64     	; 0x924 <__stack+0x25>
		}
	}
	else if (50 >= value && value >= 0) //D
 8e4:	43 33       	cpi	r20, 0x33	; 51
 8e6:	51 05       	cpc	r21, r1
 8e8:	e8 f4       	brcc	.+58     	; 0x924 <__stack+0x25>
	{
		button_history[15] &= ~(1<<0); 
 8ea:	e0 e8       	ldi	r30, 0x80	; 128
 8ec:	f1 e0       	ldi	r31, 0x01	; 1
 8ee:	86 8d       	ldd	r24, Z+30	; 0x1e
 8f0:	97 8d       	ldd	r25, Z+31	; 0x1f
 8f2:	8e 7f       	andi	r24, 0xFE	; 254
 8f4:	97 8f       	std	Z+31, r25	; 0x1f
 8f6:	86 8f       	std	Z+30, r24	; 0x1e
		if (is_button_pressed(&button_history[15]))
 8f8:	8e e9       	ldi	r24, 0x9E	; 158
 8fa:	91 e0       	ldi	r25, 0x01	; 1
 8fc:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 900:	89 2b       	or	r24, r25
 902:	81 f0       	breq	.+32     	; 0x924 <__stack+0x25>
		{
			uart_puts("D");
 904:	85 ed       	ldi	r24, 0xD5	; 213
 906:	91 e0       	ldi	r25, 0x01	; 1
 908:	0e 94 42 06 	call	0xc84	; 0xc84 <uart_puts>
			gen_f1 = 1020;
 90c:	8c ef       	ldi	r24, 0xFC	; 252
 90e:	93 e0       	ldi	r25, 0x03	; 3
 910:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <gen_f1+0x1>
 914:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <gen_f1>
			gen_f2 = 1633;
 918:	81 e6       	ldi	r24, 0x61	; 97
 91a:	96 e0       	ldi	r25, 0x06	; 6
 91c:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <gen_f2+0x1>
 920:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <gen_f2>
		}
	}
}
 924:	ff 91       	pop	r31
 926:	ef 91       	pop	r30
 928:	bf 91       	pop	r27
 92a:	af 91       	pop	r26
 92c:	9f 91       	pop	r25
 92e:	8f 91       	pop	r24
 930:	7f 91       	pop	r23
 932:	6f 91       	pop	r22
 934:	5f 91       	pop	r21
 936:	4f 91       	pop	r20
 938:	3f 91       	pop	r19
 93a:	2f 91       	pop	r18
 93c:	0f 90       	pop	r0
 93e:	0f be       	out	0x3f, r0	; 63
 940:	0f 90       	pop	r0
 942:	1f 90       	pop	r1
 944:	18 95       	reti

00000946 <__vector_14>:
ISR(TIMER0_COMPA_vect)
{
 946:	1f 92       	push	r1
 948:	0f 92       	push	r0
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	0f 92       	push	r0
 94e:	11 24       	eor	r1, r1
 950:	8f 92       	push	r8
 952:	9f 92       	push	r9
 954:	af 92       	push	r10
 956:	bf 92       	push	r11
 958:	ef 92       	push	r14
 95a:	ff 92       	push	r15
 95c:	0f 93       	push	r16
 95e:	1f 93       	push	r17
 960:	2f 93       	push	r18
 962:	3f 93       	push	r19
 964:	4f 93       	push	r20
 966:	5f 93       	push	r21
 968:	6f 93       	push	r22
 96a:	7f 93       	push	r23
 96c:	8f 93       	push	r24
 96e:	9f 93       	push	r25
 970:	af 93       	push	r26
 972:	bf 93       	push	r27
 974:	cf 93       	push	r28
 976:	df 93       	push	r29
 978:	ef 93       	push	r30
 97a:	ff 93       	push	r31
		0b11111110,    // sample127
		0b11111110,    // sample128
	};
	
	
	uint16_t sample = F_INT/gen_f1; //num of samples that will by in one period of generated signal
 97c:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <gen_f1>
 980:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <gen_f1+0x1>
 984:	40 e0       	ldi	r20, 0x00	; 0
 986:	50 e0       	ldi	r21, 0x00	; 0
 988:	0f 2e       	mov	r0, r31
 98a:	f0 ea       	ldi	r31, 0xA0	; 160
 98c:	8f 2e       	mov	r8, r31
 98e:	f6 e8       	ldi	r31, 0x86	; 134
 990:	9f 2e       	mov	r9, r31
 992:	aa 24       	eor	r10, r10
 994:	a3 94       	inc	r10
 996:	b1 2c       	mov	r11, r1
 998:	f0 2d       	mov	r31, r0
 99a:	c5 01       	movw	r24, r10
 99c:	b4 01       	movw	r22, r8
 99e:	0e 94 65 06 	call	0xcca	; 0xcca <__divmodsi4>
 9a2:	79 01       	movw	r14, r18
	uint16_t sample2 = F_INT/gen_f2; //num of samples that will by in one period of generated signal
 9a4:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <gen_f2>
 9a8:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <gen_f2+0x1>
 9ac:	40 e0       	ldi	r20, 0x00	; 0
 9ae:	50 e0       	ldi	r21, 0x00	; 0
 9b0:	c5 01       	movw	r24, r10
 9b2:	b4 01       	movw	r22, r8
 9b4:	0e 94 65 06 	call	0xcca	; 0xcca <__divmodsi4>
	static uint16_t sample_cnt_1 = 0; //counter
	static uint16_t sample_cnt_2 = 0; //counter
	
	
	
	sample_out = (SIN_SAM*sample_cnt_1/sample); // sample that will be read from table
 9b8:	e0 91 db 01 	lds	r30, 0x01DB	; 0x8001db <sample_cnt_1.2026>
 9bc:	f0 91 dc 01 	lds	r31, 0x01DC	; 0x8001dc <sample_cnt_1.2026+0x1>
 9c0:	9e 2f       	mov	r25, r30
 9c2:	99 0f       	add	r25, r25
 9c4:	80 e0       	ldi	r24, 0x00	; 0
 9c6:	b7 01       	movw	r22, r14
 9c8:	0e 94 51 06 	call	0xca2	; 0xca2 <__udivmodhi4>
 9cc:	5b 01       	movw	r10, r22
	sample_out2 = (SIN_SAM*sample_cnt_2/sample2); // sample that will be read from table
 9ce:	c0 91 d9 01 	lds	r28, 0x01D9	; 0x8001d9 <sample_cnt_2.2027>
 9d2:	d0 91 da 01 	lds	r29, 0x01DA	; 0x8001da <sample_cnt_2.2027+0x1>
 9d6:	9c 2f       	mov	r25, r28
 9d8:	99 0f       	add	r25, r25
 9da:	80 e0       	ldi	r24, 0x00	; 0
 9dc:	b9 01       	movw	r22, r18
 9de:	0e 94 51 06 	call	0xca2	; 0xca2 <__udivmodhi4>
 9e2:	8b 01       	movw	r16, r22
	
	//reseting counter
	sample_cnt_1 ++;
 9e4:	31 96       	adiw	r30, 0x01	; 1
	if(sample_cnt_1 >= sample){
 9e6:	ee 15       	cp	r30, r14
 9e8:	ff 05       	cpc	r31, r15
 9ea:	28 f4       	brcc	.+10     	; 0x9f6 <__vector_14+0xb0>
	
	sample_out = (SIN_SAM*sample_cnt_1/sample); // sample that will be read from table
	sample_out2 = (SIN_SAM*sample_cnt_2/sample2); // sample that will be read from table
	
	//reseting counter
	sample_cnt_1 ++;
 9ec:	f0 93 dc 01 	sts	0x01DC, r31	; 0x8001dc <sample_cnt_1.2026+0x1>
 9f0:	e0 93 db 01 	sts	0x01DB, r30	; 0x8001db <sample_cnt_1.2026>
 9f4:	04 c0       	rjmp	.+8      	; 0x9fe <__vector_14+0xb8>
	if(sample_cnt_1 >= sample){
		sample_cnt_1 = 0;
 9f6:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <sample_cnt_1.2026+0x1>
 9fa:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <sample_cnt_1.2026>
	}
	//reseting counter
	sample_cnt_2 ++;
 9fe:	21 96       	adiw	r28, 0x01	; 1
	if(sample_cnt_2 >= sample2){
 a00:	c2 17       	cp	r28, r18
 a02:	d3 07       	cpc	r29, r19
 a04:	28 f4       	brcc	.+10     	; 0xa10 <__vector_14+0xca>
	sample_cnt_1 ++;
	if(sample_cnt_1 >= sample){
		sample_cnt_1 = 0;
	}
	//reseting counter
	sample_cnt_2 ++;
 a06:	d0 93 da 01 	sts	0x01DA, r29	; 0x8001da <sample_cnt_2.2027+0x1>
 a0a:	c0 93 d9 01 	sts	0x01D9, r28	; 0x8001d9 <sample_cnt_2.2027>
 a0e:	04 c0       	rjmp	.+8      	; 0xa18 <__vector_14+0xd2>
	if(sample_cnt_2 >= sample2){
		sample_cnt_2 = 0;
 a10:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <sample_cnt_2.2027+0x1>
 a14:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <sample_cnt_2.2027>
	}
	
	//signal_amplitude = sample_out/2; //generovani pila
	signal_amplitude = (sinus_gen(&lookup_table, sample_out) + sinus_gen(&lookup_table, sample_out2))/2; //generovani sinus
 a18:	b5 01       	movw	r22, r10
 a1a:	80 e0       	ldi	r24, 0x00	; 0
 a1c:	91 e0       	ldi	r25, 0x01	; 1
 a1e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <sinus_gen>
 a22:	c8 2f       	mov	r28, r24
 a24:	b8 01       	movw	r22, r16
 a26:	80 e0       	ldi	r24, 0x00	; 0
 a28:	91 e0       	ldi	r25, 0x01	; 1
 a2a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <sinus_gen>
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	8c 0f       	add	r24, r28
 a32:	91 1d       	adc	r25, r1
 a34:	95 95       	asr	r25
 a36:	87 95       	ror	r24
 a38:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <__data_end>
	//if(sample_out2 ==  )
	//signal_amplitude =  //generovani obdelnik
	
	GPIO_set_pin(&PORTD, R0, bit_val(signal_amplitude, 1));
 a3c:	61 e0       	ldi	r22, 0x01	; 1
 a3e:	0e 94 97 00 	call	0x12e	; 0x12e <bit_val>
 a42:	48 2f       	mov	r20, r24
 a44:	63 e0       	ldi	r22, 0x03	; 3
 a46:	8b e2       	ldi	r24, 0x2B	; 43
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_set_pin>
	GPIO_set_pin(&PORTD, R1, bit_val(signal_amplitude, 2));
 a4e:	62 e0       	ldi	r22, 0x02	; 2
 a50:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <__data_end>
 a54:	0e 94 97 00 	call	0x12e	; 0x12e <bit_val>
 a58:	48 2f       	mov	r20, r24
 a5a:	60 e0       	ldi	r22, 0x00	; 0
 a5c:	8b e2       	ldi	r24, 0x2B	; 43
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_set_pin>
	GPIO_set_pin(&PORTB, R2, bit_val(signal_amplitude, 3));
 a64:	63 e0       	ldi	r22, 0x03	; 3
 a66:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <__data_end>
 a6a:	0e 94 97 00 	call	0x12e	; 0x12e <bit_val>
 a6e:	48 2f       	mov	r20, r24
 a70:	62 e0       	ldi	r22, 0x02	; 2
 a72:	85 e2       	ldi	r24, 0x25	; 37
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_set_pin>
	GPIO_set_pin(&PORTB, R3, bit_val(signal_amplitude, 4));
 a7a:	64 e0       	ldi	r22, 0x04	; 4
 a7c:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <__data_end>
 a80:	0e 94 97 00 	call	0x12e	; 0x12e <bit_val>
 a84:	48 2f       	mov	r20, r24
 a86:	63 e0       	ldi	r22, 0x03	; 3
 a88:	85 e2       	ldi	r24, 0x25	; 37
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_set_pin>
	GPIO_set_pin(&PORTB, R4, bit_val(signal_amplitude, 5));
 a90:	65 e0       	ldi	r22, 0x05	; 5
 a92:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <__data_end>
 a96:	0e 94 97 00 	call	0x12e	; 0x12e <bit_val>
 a9a:	48 2f       	mov	r20, r24
 a9c:	64 e0       	ldi	r22, 0x04	; 4
 a9e:	85 e2       	ldi	r24, 0x25	; 37
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_set_pin>
	GPIO_set_pin(&PORTB, R5, bit_val(signal_amplitude, 6));
 aa6:	66 e0       	ldi	r22, 0x06	; 6
 aa8:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <__data_end>
 aac:	0e 94 97 00 	call	0x12e	; 0x12e <bit_val>
 ab0:	48 2f       	mov	r20, r24
 ab2:	65 e0       	ldi	r22, 0x05	; 5
 ab4:	85 e2       	ldi	r24, 0x25	; 37
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_set_pin>
	GPIO_set_pin(&PORTD, R6, bit_val(signal_amplitude, 7));
 abc:	67 e0       	ldi	r22, 0x07	; 7
 abe:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <__data_end>
 ac2:	0e 94 97 00 	call	0x12e	; 0x12e <bit_val>
 ac6:	48 2f       	mov	r20, r24
 ac8:	61 e0       	ldi	r22, 0x01	; 1
 aca:	8b e2       	ldi	r24, 0x2B	; 43
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_set_pin>
	GPIO_set_pin(&PORTD, R7, bit_val(signal_amplitude, 8));
 ad2:	68 e0       	ldi	r22, 0x08	; 8
 ad4:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <__data_end>
 ad8:	0e 94 97 00 	call	0x12e	; 0x12e <bit_val>
 adc:	48 2f       	mov	r20, r24
 ade:	62 e0       	ldi	r22, 0x02	; 2
 ae0:	8b e2       	ldi	r24, 0x2B	; 43
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	0e 94 7c 00 	call	0xf8	; 0xf8 <GPIO_set_pin>
	
 ae8:	ff 91       	pop	r31
 aea:	ef 91       	pop	r30
 aec:	df 91       	pop	r29
 aee:	cf 91       	pop	r28
 af0:	bf 91       	pop	r27
 af2:	af 91       	pop	r26
 af4:	9f 91       	pop	r25
 af6:	8f 91       	pop	r24
 af8:	7f 91       	pop	r23
 afa:	6f 91       	pop	r22
 afc:	5f 91       	pop	r21
 afe:	4f 91       	pop	r20
 b00:	3f 91       	pop	r19
 b02:	2f 91       	pop	r18
 b04:	1f 91       	pop	r17
 b06:	0f 91       	pop	r16
 b08:	ff 90       	pop	r15
 b0a:	ef 90       	pop	r14
 b0c:	bf 90       	pop	r11
 b0e:	af 90       	pop	r10
 b10:	9f 90       	pop	r9
 b12:	8f 90       	pop	r8
 b14:	0f 90       	pop	r0
 b16:	0f be       	out	0x3f, r0	; 63
 b18:	0f 90       	pop	r0
 b1a:	1f 90       	pop	r1
 b1c:	18 95       	reti

00000b1e <sinus_gen>:
#include "sinus_gen.h"

uint8_t sinus_gen(uint8_t *table, uint16_t sample)
{
	uint8_t out = 0;
	if((sample >= 127) && (sample <= 255))
 b1e:	9b 01       	movw	r18, r22
 b20:	2f 57       	subi	r18, 0x7F	; 127
 b22:	31 09       	sbc	r19, r1
 b24:	21 38       	cpi	r18, 0x81	; 129
 b26:	31 05       	cpc	r19, r1
 b28:	40 f4       	brcc	.+16     	; 0xb3a <sinus_gen+0x1c>
	{
		out = table[255-sample];
 b2a:	9c 01       	movw	r18, r24
 b2c:	26 1b       	sub	r18, r22
 b2e:	37 0b       	sbc	r19, r23
 b30:	f9 01       	movw	r30, r18
 b32:	e1 50       	subi	r30, 0x01	; 1
 b34:	ff 4f       	sbci	r31, 0xFF	; 255
 b36:	80 81       	ld	r24, Z
 b38:	08 95       	ret
	}
	else if ((sample >= 256) && (sample <= 383))
 b3a:	9b 01       	movw	r18, r22
 b3c:	3a 95       	dec	r19
 b3e:	20 38       	cpi	r18, 0x80	; 128
 b40:	31 05       	cpc	r19, r1
 b42:	30 f4       	brcc	.+12     	; 0xb50 <sinus_gen+0x32>
	{
		out = -1*(table[sample - 256]);
 b44:	fc 01       	movw	r30, r24
 b46:	e2 0f       	add	r30, r18
 b48:	f3 1f       	adc	r31, r19
 b4a:	80 81       	ld	r24, Z
 b4c:	81 95       	neg	r24
 b4e:	08 95       	ret
	}
	else if((sample >= 384) && (sample <= 511))
 b50:	9b 01       	movw	r18, r22
 b52:	20 58       	subi	r18, 0x80	; 128
 b54:	31 40       	sbci	r19, 0x01	; 1
 b56:	20 38       	cpi	r18, 0x80	; 128
 b58:	31 05       	cpc	r19, r1
 b5a:	48 f4       	brcc	.+18     	; 0xb6e <sinus_gen+0x50>
	{
		out = -1 * (table[511 - sample]);
 b5c:	9c 01       	movw	r18, r24
 b5e:	26 1b       	sub	r18, r22
 b60:	37 0b       	sbc	r19, r23
 b62:	f9 01       	movw	r30, r18
 b64:	e1 50       	subi	r30, 0x01	; 1
 b66:	fe 4f       	sbci	r31, 0xFE	; 254
 b68:	80 81       	ld	r24, Z
 b6a:	81 95       	neg	r24
 b6c:	08 95       	ret
	}
	else
	{
		out = table[sample];
 b6e:	fc 01       	movw	r30, r24
 b70:	e6 0f       	add	r30, r22
 b72:	f7 1f       	adc	r31, r23
 b74:	80 81       	ld	r24, Z
	}
	return out;
 b76:	08 95       	ret

00000b78 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 b78:	1f 92       	push	r1
 b7a:	0f 92       	push	r0
 b7c:	0f b6       	in	r0, 0x3f	; 63
 b7e:	0f 92       	push	r0
 b80:	11 24       	eor	r1, r1
 b82:	2f 93       	push	r18
 b84:	8f 93       	push	r24
 b86:	9f 93       	push	r25
 b88:	ef 93       	push	r30
 b8a:	ff 93       	push	r31
 b8c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 b90:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 b94:	8c 71       	andi	r24, 0x1C	; 28
 b96:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <UART_RxHead>
 b9a:	ef 5f       	subi	r30, 0xFF	; 255
 b9c:	ef 73       	andi	r30, 0x3F	; 63
 b9e:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <UART_RxTail>
 ba2:	e9 17       	cp	r30, r25
 ba4:	39 f0       	breq	.+14     	; 0xbb4 <__vector_18+0x3c>
 ba6:	e0 93 df 01 	sts	0x01DF, r30	; 0x8001df <UART_RxHead>
 baa:	f0 e0       	ldi	r31, 0x00	; 0
 bac:	ee 51       	subi	r30, 0x1E	; 30
 bae:	fe 4f       	sbci	r31, 0xFE	; 254
 bb0:	20 83       	st	Z, r18
 bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <__vector_18+0x3e>
 bb4:	82 e0       	ldi	r24, 0x02	; 2
 bb6:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <UART_LastRxError>
 bba:	89 2b       	or	r24, r25
 bbc:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <UART_LastRxError>
 bc0:	ff 91       	pop	r31
 bc2:	ef 91       	pop	r30
 bc4:	9f 91       	pop	r25
 bc6:	8f 91       	pop	r24
 bc8:	2f 91       	pop	r18
 bca:	0f 90       	pop	r0
 bcc:	0f be       	out	0x3f, r0	; 63
 bce:	0f 90       	pop	r0
 bd0:	1f 90       	pop	r1
 bd2:	18 95       	reti

00000bd4 <__vector_19>:
 bd4:	1f 92       	push	r1
 bd6:	0f 92       	push	r0
 bd8:	0f b6       	in	r0, 0x3f	; 63
 bda:	0f 92       	push	r0
 bdc:	11 24       	eor	r1, r1
 bde:	8f 93       	push	r24
 be0:	9f 93       	push	r25
 be2:	ef 93       	push	r30
 be4:	ff 93       	push	r31
 be6:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <UART_TxHead>
 bea:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <UART_TxTail>
 bee:	98 17       	cp	r25, r24
 bf0:	69 f0       	breq	.+26     	; 0xc0c <__vector_19+0x38>
 bf2:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <UART_TxTail>
 bf6:	ef 5f       	subi	r30, 0xFF	; 255
 bf8:	ef 73       	andi	r30, 0x3F	; 63
 bfa:	e0 93 e0 01 	sts	0x01E0, r30	; 0x8001e0 <UART_TxTail>
 bfe:	f0 e0       	ldi	r31, 0x00	; 0
 c00:	ee 5d       	subi	r30, 0xDE	; 222
 c02:	fd 4f       	sbci	r31, 0xFD	; 253
 c04:	80 81       	ld	r24, Z
 c06:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 c0a:	05 c0       	rjmp	.+10     	; 0xc16 <__vector_19+0x42>
 c0c:	e1 ec       	ldi	r30, 0xC1	; 193
 c0e:	f0 e0       	ldi	r31, 0x00	; 0
 c10:	80 81       	ld	r24, Z
 c12:	8f 7d       	andi	r24, 0xDF	; 223
 c14:	80 83       	st	Z, r24
 c16:	ff 91       	pop	r31
 c18:	ef 91       	pop	r30
 c1a:	9f 91       	pop	r25
 c1c:	8f 91       	pop	r24
 c1e:	0f 90       	pop	r0
 c20:	0f be       	out	0x3f, r0	; 63
 c22:	0f 90       	pop	r0
 c24:	1f 90       	pop	r1
 c26:	18 95       	reti

00000c28 <uart_init>:
 c28:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <UART_TxHead>
 c2c:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <UART_TxTail>
 c30:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <UART_RxHead>
 c34:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <UART_RxTail>
 c38:	99 23       	and	r25, r25
 c3a:	1c f4       	brge	.+6      	; 0xc42 <uart_init+0x1a>
 c3c:	22 e0       	ldi	r18, 0x02	; 2
 c3e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 c42:	90 78       	andi	r25, 0x80	; 128
 c44:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 c48:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 c4c:	88 e9       	ldi	r24, 0x98	; 152
 c4e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 c52:	86 e0       	ldi	r24, 0x06	; 6
 c54:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 c58:	08 95       	ret

00000c5a <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 c5a:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <UART_TxHead>
 c5e:	2f 5f       	subi	r18, 0xFF	; 255
 c60:	2f 73       	andi	r18, 0x3F	; 63

    while (tmphead == UART_TxTail)
 c62:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <UART_TxTail>
 c66:	29 17       	cp	r18, r25
 c68:	e1 f3       	breq	.-8      	; 0xc62 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 c6a:	e2 2f       	mov	r30, r18
 c6c:	f0 e0       	ldi	r31, 0x00	; 0
 c6e:	ee 5d       	subi	r30, 0xDE	; 222
 c70:	fd 4f       	sbci	r31, 0xFD	; 253
 c72:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 c74:	20 93 e1 01 	sts	0x01E1, r18	; 0x8001e1 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 c78:	e1 ec       	ldi	r30, 0xC1	; 193
 c7a:	f0 e0       	ldi	r31, 0x00	; 0
 c7c:	80 81       	ld	r24, Z
 c7e:	80 62       	ori	r24, 0x20	; 32
 c80:	80 83       	st	Z, r24
 c82:	08 95       	ret

00000c84 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 c84:	cf 93       	push	r28
 c86:	df 93       	push	r29
 c88:	ec 01       	movw	r28, r24
    while (*s)
 c8a:	88 81       	ld	r24, Y
 c8c:	88 23       	and	r24, r24
 c8e:	31 f0       	breq	.+12     	; 0xc9c <uart_puts+0x18>
 c90:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 c92:	0e 94 2d 06 	call	0xc5a	; 0xc5a <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 c96:	89 91       	ld	r24, Y+
 c98:	81 11       	cpse	r24, r1
 c9a:	fb cf       	rjmp	.-10     	; 0xc92 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 c9c:	df 91       	pop	r29
 c9e:	cf 91       	pop	r28
 ca0:	08 95       	ret

00000ca2 <__udivmodhi4>:
 ca2:	aa 1b       	sub	r26, r26
 ca4:	bb 1b       	sub	r27, r27
 ca6:	51 e1       	ldi	r21, 0x11	; 17
 ca8:	07 c0       	rjmp	.+14     	; 0xcb8 <__udivmodhi4_ep>

00000caa <__udivmodhi4_loop>:
 caa:	aa 1f       	adc	r26, r26
 cac:	bb 1f       	adc	r27, r27
 cae:	a6 17       	cp	r26, r22
 cb0:	b7 07       	cpc	r27, r23
 cb2:	10 f0       	brcs	.+4      	; 0xcb8 <__udivmodhi4_ep>
 cb4:	a6 1b       	sub	r26, r22
 cb6:	b7 0b       	sbc	r27, r23

00000cb8 <__udivmodhi4_ep>:
 cb8:	88 1f       	adc	r24, r24
 cba:	99 1f       	adc	r25, r25
 cbc:	5a 95       	dec	r21
 cbe:	a9 f7       	brne	.-22     	; 0xcaa <__udivmodhi4_loop>
 cc0:	80 95       	com	r24
 cc2:	90 95       	com	r25
 cc4:	bc 01       	movw	r22, r24
 cc6:	cd 01       	movw	r24, r26
 cc8:	08 95       	ret

00000cca <__divmodsi4>:
 cca:	05 2e       	mov	r0, r21
 ccc:	97 fb       	bst	r25, 7
 cce:	1e f4       	brtc	.+6      	; 0xcd6 <__divmodsi4+0xc>
 cd0:	00 94       	com	r0
 cd2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__negsi2>
 cd6:	57 fd       	sbrc	r21, 7
 cd8:	07 d0       	rcall	.+14     	; 0xce8 <__divmodsi4_neg2>
 cda:	0e 94 84 06 	call	0xd08	; 0xd08 <__udivmodsi4>
 cde:	07 fc       	sbrc	r0, 7
 ce0:	03 d0       	rcall	.+6      	; 0xce8 <__divmodsi4_neg2>
 ce2:	4e f4       	brtc	.+18     	; 0xcf6 <__divmodsi4_exit>
 ce4:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__negsi2>

00000ce8 <__divmodsi4_neg2>:
 ce8:	50 95       	com	r21
 cea:	40 95       	com	r20
 cec:	30 95       	com	r19
 cee:	21 95       	neg	r18
 cf0:	3f 4f       	sbci	r19, 0xFF	; 255
 cf2:	4f 4f       	sbci	r20, 0xFF	; 255
 cf4:	5f 4f       	sbci	r21, 0xFF	; 255

00000cf6 <__divmodsi4_exit>:
 cf6:	08 95       	ret

00000cf8 <__negsi2>:
 cf8:	90 95       	com	r25
 cfa:	80 95       	com	r24
 cfc:	70 95       	com	r23
 cfe:	61 95       	neg	r22
 d00:	7f 4f       	sbci	r23, 0xFF	; 255
 d02:	8f 4f       	sbci	r24, 0xFF	; 255
 d04:	9f 4f       	sbci	r25, 0xFF	; 255
 d06:	08 95       	ret

00000d08 <__udivmodsi4>:
 d08:	a1 e2       	ldi	r26, 0x21	; 33
 d0a:	1a 2e       	mov	r1, r26
 d0c:	aa 1b       	sub	r26, r26
 d0e:	bb 1b       	sub	r27, r27
 d10:	fd 01       	movw	r30, r26
 d12:	0d c0       	rjmp	.+26     	; 0xd2e <__udivmodsi4_ep>

00000d14 <__udivmodsi4_loop>:
 d14:	aa 1f       	adc	r26, r26
 d16:	bb 1f       	adc	r27, r27
 d18:	ee 1f       	adc	r30, r30
 d1a:	ff 1f       	adc	r31, r31
 d1c:	a2 17       	cp	r26, r18
 d1e:	b3 07       	cpc	r27, r19
 d20:	e4 07       	cpc	r30, r20
 d22:	f5 07       	cpc	r31, r21
 d24:	20 f0       	brcs	.+8      	; 0xd2e <__udivmodsi4_ep>
 d26:	a2 1b       	sub	r26, r18
 d28:	b3 0b       	sbc	r27, r19
 d2a:	e4 0b       	sbc	r30, r20
 d2c:	f5 0b       	sbc	r31, r21

00000d2e <__udivmodsi4_ep>:
 d2e:	66 1f       	adc	r22, r22
 d30:	77 1f       	adc	r23, r23
 d32:	88 1f       	adc	r24, r24
 d34:	99 1f       	adc	r25, r25
 d36:	1a 94       	dec	r1
 d38:	69 f7       	brne	.-38     	; 0xd14 <__udivmodsi4_loop>
 d3a:	60 95       	com	r22
 d3c:	70 95       	com	r23
 d3e:	80 95       	com	r24
 d40:	90 95       	com	r25
 d42:	9b 01       	movw	r18, r22
 d44:	ac 01       	movw	r20, r24
 d46:	bd 01       	movw	r22, r26
 d48:	cf 01       	movw	r24, r30
 d4a:	08 95       	ret

00000d4c <__itoa_ncheck>:
 d4c:	bb 27       	eor	r27, r27
 d4e:	4a 30       	cpi	r20, 0x0A	; 10
 d50:	31 f4       	brne	.+12     	; 0xd5e <__itoa_ncheck+0x12>
 d52:	99 23       	and	r25, r25
 d54:	22 f4       	brpl	.+8      	; 0xd5e <__itoa_ncheck+0x12>
 d56:	bd e2       	ldi	r27, 0x2D	; 45
 d58:	90 95       	com	r25
 d5a:	81 95       	neg	r24
 d5c:	9f 4f       	sbci	r25, 0xFF	; 255
 d5e:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <__utoa_common>

00000d62 <__utoa_ncheck>:
 d62:	bb 27       	eor	r27, r27

00000d64 <__utoa_common>:
 d64:	fb 01       	movw	r30, r22
 d66:	55 27       	eor	r21, r21
 d68:	aa 27       	eor	r26, r26
 d6a:	88 0f       	add	r24, r24
 d6c:	99 1f       	adc	r25, r25
 d6e:	aa 1f       	adc	r26, r26
 d70:	a4 17       	cp	r26, r20
 d72:	10 f0       	brcs	.+4      	; 0xd78 <__utoa_common+0x14>
 d74:	a4 1b       	sub	r26, r20
 d76:	83 95       	inc	r24
 d78:	50 51       	subi	r21, 0x10	; 16
 d7a:	b9 f7       	brne	.-18     	; 0xd6a <__utoa_common+0x6>
 d7c:	a0 5d       	subi	r26, 0xD0	; 208
 d7e:	aa 33       	cpi	r26, 0x3A	; 58
 d80:	08 f0       	brcs	.+2      	; 0xd84 <__utoa_common+0x20>
 d82:	a9 5d       	subi	r26, 0xD9	; 217
 d84:	a1 93       	st	Z+, r26
 d86:	00 97       	sbiw	r24, 0x00	; 0
 d88:	79 f7       	brne	.-34     	; 0xd68 <__utoa_common+0x4>
 d8a:	b1 11       	cpse	r27, r1
 d8c:	b1 93       	st	Z+, r27
 d8e:	11 92       	st	Z+, r1
 d90:	cb 01       	movw	r24, r22
 d92:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <strrev>

00000d96 <strrev>:
 d96:	dc 01       	movw	r26, r24
 d98:	fc 01       	movw	r30, r24
 d9a:	67 2f       	mov	r22, r23
 d9c:	71 91       	ld	r23, Z+
 d9e:	77 23       	and	r23, r23
 da0:	e1 f7       	brne	.-8      	; 0xd9a <strrev+0x4>
 da2:	32 97       	sbiw	r30, 0x02	; 2
 da4:	04 c0       	rjmp	.+8      	; 0xdae <strrev+0x18>
 da6:	7c 91       	ld	r23, X
 da8:	6d 93       	st	X+, r22
 daa:	70 83       	st	Z, r23
 dac:	62 91       	ld	r22, -Z
 dae:	ae 17       	cp	r26, r30
 db0:	bf 07       	cpc	r27, r31
 db2:	c8 f3       	brcs	.-14     	; 0xda6 <strrev+0x10>
 db4:	08 95       	ret

00000db6 <_exit>:
 db6:	f8 94       	cli

00000db8 <__stop_program>:
 db8:	ff cf       	rjmp	.-2      	; 0xdb8 <__stop_program>
