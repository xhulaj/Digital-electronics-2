
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  000004ba  0000054e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008a  00800180  00800180  000005ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011bb  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000901  00000000  00000000  000018f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000715  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  0000290c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c0  00000000  00000000  00002b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000693  00000000  00000000  00003104  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003797  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_18>
  4c:	0c 94 22 02 	jmp	0x444	; 0x444 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea eb       	ldi	r30, 0xBA	; 186
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 38       	cpi	r26, 0x80	; 128
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e8       	ldi	r26, 0x80	; 128
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 30       	cpi	r26, 0x0A	; 10
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  9e:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/* GPIO_read */
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num)
{
	return(bit_is_set(*reg_name, pin_num)); // if bit is set, returns 1, if not, returns 0
	
}
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_set_pin>:

uint8_t GPIO_set_pin(volatile uint8_t *reg_name, uint8_t pin_num, uint8_t state)
{
	if(state & (1 << 0))
  d8:	40 ff       	sbrs	r20, 0
  da:	0c c0       	rjmp	.+24     	; 0xf4 <GPIO_set_pin+0x1c>
	*reg_name |= (1<<pin_num); //Write high-value to a set bit in given register
  dc:	fc 01       	movw	r30, r24
  de:	40 81       	ld	r20, Z
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <GPIO_set_pin+0x12>
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <GPIO_set_pin+0xe>
  ee:	24 2b       	or	r18, r20
  f0:	20 83       	st	Z, r18
  f2:	08 95       	ret
	else
	*reg_name = *reg_name & ~(1<<pin_num); // Write low-value to a set bit in given register
  f4:	fc 01       	movw	r30, r24
  f6:	40 81       	ld	r20, Z
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <GPIO_set_pin+0x2a>
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <GPIO_set_pin+0x26>
 106:	20 95       	com	r18
 108:	24 23       	and	r18, r20
 10a:	20 83       	st	Z, r18
}
 10c:	08 95       	ret

0000010e <bit_val>:

uint8_t bit_val(uint8_t var, uint8_t pos)
{
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	61 50       	subi	r22, 0x01	; 1
 112:	02 c0       	rjmp	.+4      	; 0x118 <bit_val+0xa>
 114:	95 95       	asr	r25
 116:	87 95       	ror	r24
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <bit_val+0x6>
	if (var & (1 << (pos - 1)))
	return 1;
	else
	return 0;
 11c:	81 70       	andi	r24, 0x01	; 1
 11e:	08 95       	ret

00000120 <main>:
#include "sinus_gen.h"

int main(void)
{
	/*Timer/Counter 0 settings --------------------------------------------------------------*/
	TIM0_set_mode_CTC();			// Set timer to CTC mode
 120:	85 b5       	in	r24, 0x25	; 37
 122:	87 7f       	andi	r24, 0xF7	; 247
 124:	85 bd       	out	0x25, r24	; 37
 126:	84 b5       	in	r24, 0x24	; 36
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	84 bd       	out	0x24, r24	; 36
 12c:	84 b5       	in	r24, 0x24	; 36
 12e:	8e 7f       	andi	r24, 0xFE	; 254
 130:	84 bd       	out	0x24, r24	; 36
	TIM0_overflow_16us();
 132:	85 b5       	in	r24, 0x25	; 37
 134:	89 7f       	andi	r24, 0xF9	; 249
 136:	85 bd       	out	0x25, r24	; 37
 138:	85 b5       	in	r24, 0x25	; 37
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	85 bd       	out	0x25, r24	; 37
	TIM0_CTC_A_interrupt_enable();	// Interrupt enable
 13e:	ee e6       	ldi	r30, 0x6E	; 110
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	82 60       	ori	r24, 0x02	; 2
 146:	80 83       	st	Z, r24
	OCR0A = COMP_REG_A_MASK;		// Set Compare register A mask for 1 MHz frequency
 148:	80 ea       	ldi	r24, 0xA0	; 160
 14a:	87 bd       	out	0x27, r24	; 39
	
	// SET output pins for R2R ladder
	GPIO_config_output(&DDRB, R0);
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	84 e2       	ldi	r24, 0x24	; 36
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R0);
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	85 e2       	ldi	r24, 0x25	; 37
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRB, R1);
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	84 e2       	ldi	r24, 0x24	; 36
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R1);
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	85 e2       	ldi	r24, 0x25	; 37
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRB, R2);
 174:	62 e0       	ldi	r22, 0x02	; 2
 176:	84 e2       	ldi	r24, 0x24	; 36
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R2);
 17e:	62 e0       	ldi	r22, 0x02	; 2
 180:	85 e2       	ldi	r24, 0x25	; 37
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRB, R3);
 188:	63 e0       	ldi	r22, 0x03	; 3
 18a:	84 e2       	ldi	r24, 0x24	; 36
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R3);
 192:	63 e0       	ldi	r22, 0x03	; 3
 194:	85 e2       	ldi	r24, 0x25	; 37
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRB, R4);
 19c:	64 e0       	ldi	r22, 0x04	; 4
 19e:	84 e2       	ldi	r24, 0x24	; 36
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R4);
 1a6:	64 e0       	ldi	r22, 0x04	; 4
 1a8:	85 e2       	ldi	r24, 0x25	; 37
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRB, R5);
 1b0:	65 e0       	ldi	r22, 0x05	; 5
 1b2:	84 e2       	ldi	r24, 0x24	; 36
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R5);
 1ba:	65 e0       	ldi	r22, 0x05	; 5
 1bc:	85 e2       	ldi	r24, 0x25	; 37
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRD, R6);
 1c4:	66 e0       	ldi	r22, 0x06	; 6
 1c6:	8a e2       	ldi	r24, 0x2A	; 42
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTD, R6);
 1ce:	66 e0       	ldi	r22, 0x06	; 6
 1d0:	8b e2       	ldi	r24, 0x2B	; 43
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRD, R7);
 1d8:	67 e0       	ldi	r22, 0x07	; 7
 1da:	8a e2       	ldi	r24, 0x2A	; 42
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTD, R7);
 1e2:	67 e0       	ldi	r22, 0x07	; 7
 1e4:	8b e2       	ldi	r24, 0x2B	; 43
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	
    sei();
 1ec:	78 94       	sei
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <main+0xce>

000001f0 <__vector_14>:

    }
}

ISR(TIMER0_COMPA_vect)
{
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	4f 93       	push	r20
 204:	5f 93       	push	r21
 206:	6f 93       	push	r22
 208:	7f 93       	push	r23
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
 20e:	af 93       	push	r26
 210:	bf 93       	push	r27
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
	static uint16_t sample_cnt_1 = 0; //counter
	static uint16_t sample_cnt_2 = 0; //counter
	
	
	
	sample_out = (SIN_SAM*sample_cnt_1/sample); // sample that will be read from table	
 21a:	40 91 83 01 	lds	r20, 0x0183	; 0x800183 <sample_cnt_1.2005>
 21e:	50 91 84 01 	lds	r21, 0x0184	; 0x800184 <sample_cnt_1.2005+0x1>
 222:	9a 01       	movw	r18, r20
 224:	32 2f       	mov	r19, r18
 226:	22 27       	eor	r18, r18
 228:	33 0f       	add	r19, r19
 22a:	36 95       	lsr	r19
 22c:	27 95       	ror	r18
 22e:	36 95       	lsr	r19
 230:	27 95       	ror	r18
 232:	ab e7       	ldi	r26, 0x7B	; 123
 234:	b4 e1       	ldi	r27, 0x14	; 20
 236:	0e 94 4c 02 	call	0x498	; 0x498 <__umulhisi3>
 23a:	8c 01       	movw	r16, r24
 23c:	16 95       	lsr	r17
 23e:	07 95       	ror	r16
	sample_out2 = (SIN_SAM*sample_cnt_2/sample2); // sample that will be read from table
 240:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <sample_cnt_2.2006>
 244:	f0 91 82 01 	lds	r31, 0x0182	; 0x800182 <sample_cnt_2.2006+0x1>
 248:	9f 01       	movw	r18, r30
 24a:	32 2f       	mov	r19, r18
 24c:	22 27       	eor	r18, r18
 24e:	33 0f       	add	r19, r19
 250:	36 95       	lsr	r19
 252:	27 95       	ror	r18
 254:	0e 94 4c 02 	call	0x498	; 0x498 <__umulhisi3>
 258:	ec 01       	movw	r28, r24
 25a:	d6 95       	lsr	r29
 25c:	c7 95       	ror	r28
	
	//reseting counter 
	sample_cnt_1 ++;
 25e:	4f 5f       	subi	r20, 0xFF	; 255
 260:	5f 4f       	sbci	r21, 0xFF	; 255
	if(sample_cnt_1 >= sample){
 262:	44 36       	cpi	r20, 0x64	; 100
 264:	51 05       	cpc	r21, r1
 266:	28 f4       	brcc	.+10     	; 0x272 <__vector_14+0x82>
	
	sample_out = (SIN_SAM*sample_cnt_1/sample); // sample that will be read from table	
	sample_out2 = (SIN_SAM*sample_cnt_2/sample2); // sample that will be read from table
	
	//reseting counter 
	sample_cnt_1 ++;
 268:	50 93 84 01 	sts	0x0184, r21	; 0x800184 <sample_cnt_1.2005+0x1>
 26c:	40 93 83 01 	sts	0x0183, r20	; 0x800183 <sample_cnt_1.2005>
 270:	04 c0       	rjmp	.+8      	; 0x27a <__vector_14+0x8a>
	if(sample_cnt_1 >= sample){
		sample_cnt_1 = 0;		
 272:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <sample_cnt_1.2005+0x1>
 276:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <sample_cnt_1.2005>
	}
	//reseting counter 
	sample_cnt_2 ++;
 27a:	31 96       	adiw	r30, 0x01	; 1
	if(sample_cnt_2 >= sample2){
 27c:	e2 33       	cpi	r30, 0x32	; 50
 27e:	f1 05       	cpc	r31, r1
 280:	28 f4       	brcc	.+10     	; 0x28c <__vector_14+0x9c>
	sample_cnt_1 ++;
	if(sample_cnt_1 >= sample){
		sample_cnt_1 = 0;		
	}
	//reseting counter 
	sample_cnt_2 ++;
 282:	f0 93 82 01 	sts	0x0182, r31	; 0x800182 <sample_cnt_2.2006+0x1>
 286:	e0 93 81 01 	sts	0x0181, r30	; 0x800181 <sample_cnt_2.2006>
 28a:	04 c0       	rjmp	.+8      	; 0x294 <__vector_14+0xa4>
	if(sample_cnt_2 >= sample2){
		sample_cnt_2 = 0;
 28c:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <sample_cnt_2.2006+0x1>
 290:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <sample_cnt_2.2006>
	}
	
	//signal_amplitude = sample_out/2; //generovani pila
	signal_amplitude = (sinus_gen(&lookup_table, sample_out) + sinus_gen(&lookup_table, sample_out2))/2; //generovani sinus
 294:	b8 01       	movw	r22, r16
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	0e 94 c7 01 	call	0x38e	; 0x38e <sinus_gen>
 29e:	18 2f       	mov	r17, r24
 2a0:	be 01       	movw	r22, r28
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 c7 01 	call	0x38e	; 0x38e <sinus_gen>
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	81 0f       	add	r24, r17
 2ae:	91 1d       	adc	r25, r1
 2b0:	95 95       	asr	r25
 2b2:	87 95       	ror	r24
 2b4:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
	
	//signal_amplitude =  //generovani obdelnik
	
	GPIO_set_pin(&PORTB, R0, bit_val(signal_amplitude, 1));
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	0e 94 87 00 	call	0x10e	; 0x10e <bit_val>
 2be:	48 2f       	mov	r20, r24
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	85 e2       	ldi	r24, 0x25	; 37
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_set_pin>
	GPIO_set_pin(&PORTB, R1, bit_val(signal_amplitude, 2));
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
 2d0:	0e 94 87 00 	call	0x10e	; 0x10e <bit_val>
 2d4:	48 2f       	mov	r20, r24
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	85 e2       	ldi	r24, 0x25	; 37
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_set_pin>
	GPIO_set_pin(&PORTB, R2, bit_val(signal_amplitude, 3));
 2e0:	63 e0       	ldi	r22, 0x03	; 3
 2e2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
 2e6:	0e 94 87 00 	call	0x10e	; 0x10e <bit_val>
 2ea:	48 2f       	mov	r20, r24
 2ec:	62 e0       	ldi	r22, 0x02	; 2
 2ee:	85 e2       	ldi	r24, 0x25	; 37
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_set_pin>
	GPIO_set_pin(&PORTB, R3, bit_val(signal_amplitude, 4));
 2f6:	64 e0       	ldi	r22, 0x04	; 4
 2f8:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
 2fc:	0e 94 87 00 	call	0x10e	; 0x10e <bit_val>
 300:	48 2f       	mov	r20, r24
 302:	63 e0       	ldi	r22, 0x03	; 3
 304:	85 e2       	ldi	r24, 0x25	; 37
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_set_pin>
	GPIO_set_pin(&PORTB, R4, bit_val(signal_amplitude, 5));
 30c:	65 e0       	ldi	r22, 0x05	; 5
 30e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
 312:	0e 94 87 00 	call	0x10e	; 0x10e <bit_val>
 316:	48 2f       	mov	r20, r24
 318:	64 e0       	ldi	r22, 0x04	; 4
 31a:	85 e2       	ldi	r24, 0x25	; 37
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_set_pin>
	GPIO_set_pin(&PORTB, R5, bit_val(signal_amplitude, 6));
 322:	66 e0       	ldi	r22, 0x06	; 6
 324:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
 328:	0e 94 87 00 	call	0x10e	; 0x10e <bit_val>
 32c:	48 2f       	mov	r20, r24
 32e:	65 e0       	ldi	r22, 0x05	; 5
 330:	85 e2       	ldi	r24, 0x25	; 37
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_set_pin>
	GPIO_set_pin(&PORTD, R6, bit_val(signal_amplitude, 7));
 338:	67 e0       	ldi	r22, 0x07	; 7
 33a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
 33e:	0e 94 87 00 	call	0x10e	; 0x10e <bit_val>
 342:	48 2f       	mov	r20, r24
 344:	66 e0       	ldi	r22, 0x06	; 6
 346:	8b e2       	ldi	r24, 0x2B	; 43
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_set_pin>
	GPIO_set_pin(&PORTD, R7, bit_val(signal_amplitude, 8));
 34e:	68 e0       	ldi	r22, 0x08	; 8
 350:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
 354:	0e 94 87 00 	call	0x10e	; 0x10e <bit_val>
 358:	48 2f       	mov	r20, r24
 35a:	67 e0       	ldi	r22, 0x07	; 7
 35c:	8b e2       	ldi	r24, 0x2B	; 43
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_set_pin>
	
}
 364:	ff 91       	pop	r31
 366:	ef 91       	pop	r30
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	4f 91       	pop	r20
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <sinus_gen>:
#include "sinus_gen.h"

uint8_t sinus_gen(uint8_t *table, uint16_t sample)
{
	uint8_t out = 0;
	if((sample >= 127) && (sample <= 255))
 38e:	9b 01       	movw	r18, r22
 390:	2f 57       	subi	r18, 0x7F	; 127
 392:	31 09       	sbc	r19, r1
 394:	21 38       	cpi	r18, 0x81	; 129
 396:	31 05       	cpc	r19, r1
 398:	40 f4       	brcc	.+16     	; 0x3aa <sinus_gen+0x1c>
	{
		out = table[255-sample];
 39a:	9c 01       	movw	r18, r24
 39c:	26 1b       	sub	r18, r22
 39e:	37 0b       	sbc	r19, r23
 3a0:	f9 01       	movw	r30, r18
 3a2:	e1 50       	subi	r30, 0x01	; 1
 3a4:	ff 4f       	sbci	r31, 0xFF	; 255
 3a6:	80 81       	ld	r24, Z
 3a8:	08 95       	ret
	}
	else if ((sample >= 256) && (sample <= 383))
 3aa:	9b 01       	movw	r18, r22
 3ac:	3a 95       	dec	r19
 3ae:	20 38       	cpi	r18, 0x80	; 128
 3b0:	31 05       	cpc	r19, r1
 3b2:	30 f4       	brcc	.+12     	; 0x3c0 <sinus_gen+0x32>
	{
		out = -1*(table[sample - 256]);
 3b4:	fc 01       	movw	r30, r24
 3b6:	e2 0f       	add	r30, r18
 3b8:	f3 1f       	adc	r31, r19
 3ba:	80 81       	ld	r24, Z
 3bc:	81 95       	neg	r24
 3be:	08 95       	ret
	}
	else if((sample >= 384) && (sample <= 511))
 3c0:	9b 01       	movw	r18, r22
 3c2:	20 58       	subi	r18, 0x80	; 128
 3c4:	31 40       	sbci	r19, 0x01	; 1
 3c6:	20 38       	cpi	r18, 0x80	; 128
 3c8:	31 05       	cpc	r19, r1
 3ca:	48 f4       	brcc	.+18     	; 0x3de <sinus_gen+0x50>
	{
		out = -1 * (table[511 - sample]);
 3cc:	9c 01       	movw	r18, r24
 3ce:	26 1b       	sub	r18, r22
 3d0:	37 0b       	sbc	r19, r23
 3d2:	f9 01       	movw	r30, r18
 3d4:	e1 50       	subi	r30, 0x01	; 1
 3d6:	fe 4f       	sbci	r31, 0xFE	; 254
 3d8:	80 81       	ld	r24, Z
 3da:	81 95       	neg	r24
 3dc:	08 95       	ret
	}
	else
	{
		out = table[sample];
 3de:	fc 01       	movw	r30, r24
 3e0:	e6 0f       	add	r30, r22
 3e2:	f7 1f       	adc	r31, r23
 3e4:	80 81       	ld	r24, Z
	}
	return out;
 3e6:	08 95       	ret

000003e8 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	2f 93       	push	r18
 3f4:	8f 93       	push	r24
 3f6:	9f 93       	push	r25
 3f8:	ef 93       	push	r30
 3fa:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 3fc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    data = UART0_DATA;
 400:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 404:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 406:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <UART_RxHead>
 40a:	ef 5f       	subi	r30, 0xFF	; 255
 40c:	ef 73       	andi	r30, 0x3F	; 63

    if (tmphead == UART_RxTail)
 40e:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <UART_RxTail>
 412:	e9 17       	cp	r30, r25
 414:	39 f0       	breq	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 416:	e0 93 87 01 	sts	0x0187, r30	; 0x800187 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	e6 57       	subi	r30, 0x76	; 118
 41e:	fe 4f       	sbci	r31, 0xFE	; 254
 420:	20 83       	st	Z, r18
 422:	01 c0       	rjmp	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 424:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 426:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <UART_LastRxError>
 42a:	89 2b       	or	r24, r25
 42c:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <UART_LastRxError>
}
 430:	ff 91       	pop	r31
 432:	ef 91       	pop	r30
 434:	9f 91       	pop	r25
 436:	8f 91       	pop	r24
 438:	2f 91       	pop	r18
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 444:	1f 92       	push	r1
 446:	0f 92       	push	r0
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	0f 92       	push	r0
 44c:	11 24       	eor	r1, r1
 44e:	8f 93       	push	r24
 450:	9f 93       	push	r25
 452:	ef 93       	push	r30
 454:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 456:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <UART_TxHead>
 45a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <UART_TxTail>
 45e:	98 17       	cp	r25, r24
 460:	69 f0       	breq	.+26     	; 0x47c <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 462:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <UART_TxTail>
 466:	ef 5f       	subi	r30, 0xFF	; 255
 468:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
 46a:	e0 93 88 01 	sts	0x0188, r30	; 0x800188 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	e6 53       	subi	r30, 0x36	; 54
 472:	fe 4f       	sbci	r31, 0xFE	; 254
 474:	80 81       	ld	r24, Z
 476:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 47a:	05 c0       	rjmp	.+10     	; 0x486 <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 47c:	e1 ec       	ldi	r30, 0xC1	; 193
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	8f 7d       	andi	r24, 0xDF	; 223
 484:	80 83       	st	Z, r24
    }
}
 486:	ff 91       	pop	r31
 488:	ef 91       	pop	r30
 48a:	9f 91       	pop	r25
 48c:	8f 91       	pop	r24
 48e:	0f 90       	pop	r0
 490:	0f be       	out	0x3f, r0	; 63
 492:	0f 90       	pop	r0
 494:	1f 90       	pop	r1
 496:	18 95       	reti

00000498 <__umulhisi3>:
 498:	a2 9f       	mul	r26, r18
 49a:	b0 01       	movw	r22, r0
 49c:	b3 9f       	mul	r27, r19
 49e:	c0 01       	movw	r24, r0
 4a0:	a3 9f       	mul	r26, r19
 4a2:	70 0d       	add	r23, r0
 4a4:	81 1d       	adc	r24, r1
 4a6:	11 24       	eor	r1, r1
 4a8:	91 1d       	adc	r25, r1
 4aa:	b2 9f       	mul	r27, r18
 4ac:	70 0d       	add	r23, r0
 4ae:	81 1d       	adc	r24, r1
 4b0:	11 24       	eor	r1, r1
 4b2:	91 1d       	adc	r25, r1
 4b4:	08 95       	ret

000004b6 <_exit>:
 4b6:	f8 94       	cli

000004b8 <__stop_program>:
 4b8:	ff cf       	rjmp	.-2      	; 0x4b8 <__stop_program>
