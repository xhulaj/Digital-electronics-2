
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00000386  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000386  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000088  00800180  00800180  0000049a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f5e  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d6  00000000  00000000  00001552  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c7  00000000  00000000  00001e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  000024f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000589  00000000  00000000  000026f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000598  00000000  00000000  00002c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003215  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_18>
  4c:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e8       	ldi	r30, 0x86	; 134
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 38       	cpi	r26, 0x80	; 128
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e8       	ldi	r26, 0x80	; 128
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  9e:	0c 94 c1 01 	jmp	0x382	; 0x382 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/* GPIO_config_input_pullup */
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:

/*--------------------------------------------------------------------*/

/* GPIO_write_low */
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num); // Write low-value to a set bit in given register
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <main>:
#include "sinus_gen.h"

int main(void)
{
	/*Timer/Counter 0 settings --------------------------------------------------------------*/
	TIM0_set_mode_CTC();			// Set timer to CTC mode
  d8:	85 b5       	in	r24, 0x25	; 37
  da:	87 7f       	andi	r24, 0xF7	; 247
  dc:	85 bd       	out	0x25, r24	; 37
  de:	84 b5       	in	r24, 0x24	; 36
  e0:	82 60       	ori	r24, 0x02	; 2
  e2:	84 bd       	out	0x24, r24	; 36
  e4:	84 b5       	in	r24, 0x24	; 36
  e6:	8e 7f       	andi	r24, 0xFE	; 254
  e8:	84 bd       	out	0x24, r24	; 36
	TIM0_overflow_16us();
  ea:	85 b5       	in	r24, 0x25	; 37
  ec:	89 7f       	andi	r24, 0xF9	; 249
  ee:	85 bd       	out	0x25, r24	; 37
  f0:	85 b5       	in	r24, 0x25	; 37
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	85 bd       	out	0x25, r24	; 37
	TIM0_CTC_A_interrupt_enable();	// Interrupt enable
  f6:	ee e6       	ldi	r30, 0x6E	; 110
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	80 83       	st	Z, r24
	OCR0A = COMP_REG_A_MASK;		// Set Compare register A mask for 1 MHz frequency
 100:	80 ea       	ldi	r24, 0xA0	; 160
 102:	87 bd       	out	0x27, r24	; 39
	GPIO_config_output(&DDRC, PC0);
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	87 e2       	ldi	r24, 0x27	; 39
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC, PC0);
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	88 e2       	ldi	r24, 0x28	; 40
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	
	// SET output pins for R2R ladder
	GPIO_config_output(&DDRB, R0);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	84 e2       	ldi	r24, 0x24	; 36
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R0);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	85 e2       	ldi	r24, 0x25	; 37
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRB, R1);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	84 e2       	ldi	r24, 0x24	; 36
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R1);
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	85 e2       	ldi	r24, 0x25	; 37
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRB, R2);
 140:	62 e0       	ldi	r22, 0x02	; 2
 142:	84 e2       	ldi	r24, 0x24	; 36
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R2);
 14a:	62 e0       	ldi	r22, 0x02	; 2
 14c:	85 e2       	ldi	r24, 0x25	; 37
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRB, R3);
 154:	63 e0       	ldi	r22, 0x03	; 3
 156:	84 e2       	ldi	r24, 0x24	; 36
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R3);
 15e:	63 e0       	ldi	r22, 0x03	; 3
 160:	85 e2       	ldi	r24, 0x25	; 37
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRB, R4);
 168:	64 e0       	ldi	r22, 0x04	; 4
 16a:	84 e2       	ldi	r24, 0x24	; 36
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R4);
 172:	64 e0       	ldi	r22, 0x04	; 4
 174:	85 e2       	ldi	r24, 0x25	; 37
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRB, R5);
 17c:	65 e0       	ldi	r22, 0x05	; 5
 17e:	84 e2       	ldi	r24, 0x24	; 36
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R5);
 186:	65 e0       	ldi	r22, 0x05	; 5
 188:	85 e2       	ldi	r24, 0x25	; 37
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRD, R6);
 190:	66 e0       	ldi	r22, 0x06	; 6
 192:	8a e2       	ldi	r24, 0x2A	; 42
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTD, R6);
 19a:	66 e0       	ldi	r22, 0x06	; 6
 19c:	8b e2       	ldi	r24, 0x2B	; 43
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRD, R7);
 1a4:	67 e0       	ldi	r22, 0x07	; 7
 1a6:	8a e2       	ldi	r24, 0x2A	; 42
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTD, R7);
 1ae:	67 e0       	ldi	r22, 0x07	; 7
 1b0:	8b e2       	ldi	r24, 0x2B	; 43
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	
    sei();
 1b8:	78 94       	sei
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <main+0xe2>

000001bc <__vector_14>:
    while (1) 
    {
    }
}
ISR(TIMER0_COMPA_vect)
{
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
	static uint16_t sample_cnt_1 = 0;
	
	static uint16_t generovanafrekvence = 1000;
	
	uint16_t sample = 100000/generovanafrekvence;	
	sample_out = (512*sample_cnt_1/sample);  // vzorek ktery se ma aktualne vycist
 1de:	40 91 81 01 	lds	r20, 0x0181	; 0x800181 <sample_cnt_1.1993>
 1e2:	50 91 82 01 	lds	r21, 0x0182	; 0x800182 <sample_cnt_1.1993+0x1>
 1e6:	9a 01       	movw	r18, r20
 1e8:	32 2f       	mov	r19, r18
 1ea:	22 27       	eor	r18, r18
 1ec:	33 0f       	add	r19, r19
 1ee:	36 95       	lsr	r19
 1f0:	27 95       	ror	r18
 1f2:	36 95       	lsr	r19
 1f4:	27 95       	ror	r18
 1f6:	ab e7       	ldi	r26, 0x7B	; 123
 1f8:	b4 e1       	ldi	r27, 0x14	; 20
 1fa:	0e 94 b2 01 	call	0x364	; 0x364 <__umulhisi3>
 1fe:	bc 01       	movw	r22, r24
 200:	76 95       	lsr	r23
 202:	67 95       	ror	r22
	
	
	sample_cnt_1 ++;
 204:	4f 5f       	subi	r20, 0xFF	; 255
 206:	5f 4f       	sbci	r21, 0xFF	; 255
	if(sample_cnt_1 >= sample){
 208:	44 36       	cpi	r20, 0x64	; 100
 20a:	51 05       	cpc	r21, r1
 20c:	28 f4       	brcc	.+10     	; 0x218 <__vector_14+0x5c>
	
	uint16_t sample = 100000/generovanafrekvence;	
	sample_out = (512*sample_cnt_1/sample);  // vzorek ktery se ma aktualne vycist
	
	
	sample_cnt_1 ++;
 20e:	50 93 82 01 	sts	0x0182, r21	; 0x800182 <sample_cnt_1.1993+0x1>
 212:	40 93 81 01 	sts	0x0181, r20	; 0x800181 <sample_cnt_1.1993>
 216:	04 c0       	rjmp	.+8      	; 0x220 <__vector_14+0x64>
	if(sample_cnt_1 >= sample){
		sample_cnt_1 = 0;		
 218:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <sample_cnt_1.1993+0x1>
 21c:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <sample_cnt_1.1993>
	}
	
	//signal_amplitude = sample_out/2;
	signal_amplitude = sinus_gen(&lookup_table, sample_out);
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 2d 01 	call	0x25a	; 0x25a <sinus_gen>
 228:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
		sample_cnt_1 = 0;
	*/
		
	//GPIO_toggle(&PORTC, PC0);
	
	PORTB = signal_amplitude & 0b00111111;
 22c:	8f 73       	andi	r24, 0x3F	; 63
 22e:	85 b9       	out	0x05, r24	; 5
	PORTD = signal_amplitude & 0b11000000;
 230:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
 234:	80 7c       	andi	r24, 0xC0	; 192
 236:	8b b9       	out	0x0b, r24	; 11
	
}
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	7f 91       	pop	r23
 246:	6f 91       	pop	r22
 248:	5f 91       	pop	r21
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <sinus_gen>:
#include "sinus_gen.h"

uint8_t sinus_gen(uint8_t *table, uint16_t sample)
{
	uint8_t out = 0;
	if((sample >= 127) && (sample <= 255))
 25a:	9b 01       	movw	r18, r22
 25c:	2f 57       	subi	r18, 0x7F	; 127
 25e:	31 09       	sbc	r19, r1
 260:	21 38       	cpi	r18, 0x81	; 129
 262:	31 05       	cpc	r19, r1
 264:	40 f4       	brcc	.+16     	; 0x276 <sinus_gen+0x1c>
	{
		out = table[255-sample];
 266:	9c 01       	movw	r18, r24
 268:	26 1b       	sub	r18, r22
 26a:	37 0b       	sbc	r19, r23
 26c:	f9 01       	movw	r30, r18
 26e:	e1 50       	subi	r30, 0x01	; 1
 270:	ff 4f       	sbci	r31, 0xFF	; 255
 272:	80 81       	ld	r24, Z
 274:	08 95       	ret
	}
	else if ((sample >= 256) && (sample <= 383))
 276:	9b 01       	movw	r18, r22
 278:	3a 95       	dec	r19
 27a:	20 38       	cpi	r18, 0x80	; 128
 27c:	31 05       	cpc	r19, r1
 27e:	30 f4       	brcc	.+12     	; 0x28c <sinus_gen+0x32>
	{
		out = -1*(table[sample - 256]);
 280:	fc 01       	movw	r30, r24
 282:	e2 0f       	add	r30, r18
 284:	f3 1f       	adc	r31, r19
 286:	80 81       	ld	r24, Z
 288:	81 95       	neg	r24
 28a:	08 95       	ret
	}
	else if((sample >= 384) && (sample <= 511))
 28c:	9b 01       	movw	r18, r22
 28e:	20 58       	subi	r18, 0x80	; 128
 290:	31 40       	sbci	r19, 0x01	; 1
 292:	20 38       	cpi	r18, 0x80	; 128
 294:	31 05       	cpc	r19, r1
 296:	48 f4       	brcc	.+18     	; 0x2aa <sinus_gen+0x50>
	{
		out = -1 * (table[511 - sample]);
 298:	9c 01       	movw	r18, r24
 29a:	26 1b       	sub	r18, r22
 29c:	37 0b       	sbc	r19, r23
 29e:	f9 01       	movw	r30, r18
 2a0:	e1 50       	subi	r30, 0x01	; 1
 2a2:	fe 4f       	sbci	r31, 0xFE	; 254
 2a4:	80 81       	ld	r24, Z
 2a6:	81 95       	neg	r24
 2a8:	08 95       	ret
	}
	else
	{
		out = table[sample];
 2aa:	fc 01       	movw	r30, r24
 2ac:	e6 0f       	add	r30, r22
 2ae:	f7 1f       	adc	r31, r23
 2b0:	80 81       	ld	r24, Z
	}
	return out;
 2b2:	08 95       	ret

000002b4 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 2b4:	1f 92       	push	r1
 2b6:	0f 92       	push	r0
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	0f 92       	push	r0
 2bc:	11 24       	eor	r1, r1
 2be:	2f 93       	push	r18
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	ef 93       	push	r30
 2c6:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 2c8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    data = UART0_DATA;
 2cc:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 2d0:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 2d2:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <UART_RxHead>
 2d6:	ef 5f       	subi	r30, 0xFF	; 255
 2d8:	ef 73       	andi	r30, 0x3F	; 63

    if (tmphead == UART_RxTail)
 2da:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <UART_RxTail>
 2de:	e9 17       	cp	r30, r25
 2e0:	39 f0       	breq	.+14     	; 0x2f0 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 2e2:	e0 93 85 01 	sts	0x0185, r30	; 0x800185 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	e8 57       	subi	r30, 0x78	; 120
 2ea:	fe 4f       	sbci	r31, 0xFE	; 254
 2ec:	20 83       	st	Z, r18
 2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 2f0:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 2f2:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <UART_LastRxError>
 2f6:	89 2b       	or	r24, r25
 2f8:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <UART_LastRxError>
}
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	2f 91       	pop	r18
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 310:	1f 92       	push	r1
 312:	0f 92       	push	r0
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	0f 92       	push	r0
 318:	11 24       	eor	r1, r1
 31a:	8f 93       	push	r24
 31c:	9f 93       	push	r25
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 322:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <UART_TxHead>
 326:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <UART_TxTail>
 32a:	98 17       	cp	r25, r24
 32c:	69 f0       	breq	.+26     	; 0x348 <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 32e:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <UART_TxTail>
 332:	ef 5f       	subi	r30, 0xFF	; 255
 334:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
 336:	e0 93 86 01 	sts	0x0186, r30	; 0x800186 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	e8 53       	subi	r30, 0x38	; 56
 33e:	fe 4f       	sbci	r31, 0xFE	; 254
 340:	80 81       	ld	r24, Z
 342:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 346:	05 c0       	rjmp	.+10     	; 0x352 <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 348:	e1 ec       	ldi	r30, 0xC1	; 193
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	8f 7d       	andi	r24, 0xDF	; 223
 350:	80 83       	st	Z, r24
    }
}
 352:	ff 91       	pop	r31
 354:	ef 91       	pop	r30
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <__umulhisi3>:
 364:	a2 9f       	mul	r26, r18
 366:	b0 01       	movw	r22, r0
 368:	b3 9f       	mul	r27, r19
 36a:	c0 01       	movw	r24, r0
 36c:	a3 9f       	mul	r26, r19
 36e:	70 0d       	add	r23, r0
 370:	81 1d       	adc	r24, r1
 372:	11 24       	eor	r1, r1
 374:	91 1d       	adc	r25, r1
 376:	b2 9f       	mul	r27, r18
 378:	70 0d       	add	r23, r0
 37a:	81 1d       	adc	r24, r1
 37c:	11 24       	eor	r1, r1
 37e:	91 1d       	adc	r25, r1
 380:	08 95       	ret

00000382 <_exit>:
 382:	f8 94       	cli

00000384 <__stop_program>:
 384:	ff cf       	rjmp	.-2      	; 0x384 <__stop_program>
