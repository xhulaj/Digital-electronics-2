
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  0000073e  000007d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000073e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  0080014e  0080014e  00000820  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000850  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001675  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aab  00000000  00000000  00002025  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bea  00000000  00000000  00002ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  000036bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000597  00000000  00000000  00003974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c68  00000000  00000000  00003f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004b73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 08 03 	jmp	0x610	; 0x610 <__vector_18>
  4c:	0c 94 36 03 	jmp	0x66c	; 0x66c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 34       	cpi	r26, 0x4E	; 78
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e4       	ldi	r26, 0x4E	; 78
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 39       	cpi	r26, 0x93	; 147
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 06 01 	call	0x20c	; 0x20c <main>
  9e:	0c 94 9d 03 	jmp	0x73a	; 0x73a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <is_button_pressed>:

/* Function definitions ----------------------------------------------*/

uint16_t is_button_pressed(uint16_t *button_history){
	uint8_t pressed = 0;
	if ((*button_history & MASK) == 0b1111000000000000){ 
  a6:	fc 01       	movw	r30, r24
  a8:	20 81       	ld	r18, Z
  aa:	31 81       	ldd	r19, Z+1	; 0x01
  ac:	2f 73       	andi	r18, 0x3F	; 63
  ae:	30 7f       	andi	r19, 0xF0	; 240
  b0:	21 15       	cp	r18, r1
  b2:	30 4f       	sbci	r19, 0xF0	; 240
  b4:	29 f4       	brne	.+10     	; 0xc0 <is_button_pressed+0x1a>
		pressed = 1;
		*button_history = 0b0000000000000000;
  b6:	fc 01       	movw	r30, r24
  b8:	11 82       	std	Z+1, r1	; 0x01
  ba:	10 82       	st	Z, r1
/* Function definitions ----------------------------------------------*/

uint16_t is_button_pressed(uint16_t *button_history){
	uint8_t pressed = 0;
	if ((*button_history & MASK) == 0b1111000000000000){ 
		pressed = 1;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <is_button_pressed+0x1c>
#include "debounce.h"

/* Function definitions ----------------------------------------------*/

uint16_t is_button_pressed(uint16_t *button_history){
	uint8_t pressed = 0;
  c0:	80 e0       	ldi	r24, 0x00	; 0
	if ((*button_history & MASK) == 0b1111000000000000){ 
		pressed = 1;
		*button_history = 0b0000000000000000;
	}
	return pressed;
}
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	08 95       	ret

000000c6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  c6:	29 9a       	sbi	0x05, 1	; 5
  c8:	85 e0       	ldi	r24, 0x05	; 5
  ca:	8a 95       	dec	r24
  cc:	f1 f7       	brne	.-4      	; 0xca <toggle_e+0x4>
  ce:	00 00       	nop
  d0:	29 98       	cbi	0x05, 1	; 5
  d2:	08 95       	ret

000000d4 <lcd_write>:
  d4:	cf 93       	push	r28
  d6:	c8 2f       	mov	r28, r24
  d8:	66 23       	and	r22, r22
  da:	11 f0       	breq	.+4      	; 0xe0 <lcd_write+0xc>
  dc:	28 9a       	sbi	0x05, 0	; 5
  de:	01 c0       	rjmp	.+2      	; 0xe2 <lcd_write+0xe>
  e0:	28 98       	cbi	0x05, 0	; 5
  e2:	54 9a       	sbi	0x0a, 4	; 10
  e4:	55 9a       	sbi	0x0a, 5	; 10
  e6:	56 9a       	sbi	0x0a, 6	; 10
  e8:	57 9a       	sbi	0x0a, 7	; 10
  ea:	5f 98       	cbi	0x0b, 7	; 11
  ec:	5e 98       	cbi	0x0b, 6	; 11
  ee:	5d 98       	cbi	0x0b, 5	; 11
  f0:	5c 98       	cbi	0x0b, 4	; 11
  f2:	cc 23       	and	r28, r28
  f4:	0c f4       	brge	.+2      	; 0xf8 <lcd_write+0x24>
  f6:	5f 9a       	sbi	0x0b, 7	; 11
  f8:	c6 fd       	sbrc	r28, 6
  fa:	5e 9a       	sbi	0x0b, 6	; 11
  fc:	c5 fd       	sbrc	r28, 5
  fe:	5d 9a       	sbi	0x0b, 5	; 11
 100:	c4 fd       	sbrc	r28, 4
 102:	5c 9a       	sbi	0x0b, 4	; 11
 104:	0e 94 63 00 	call	0xc6	; 0xc6 <toggle_e>
 108:	5f 98       	cbi	0x0b, 7	; 11
 10a:	5e 98       	cbi	0x0b, 6	; 11
 10c:	5d 98       	cbi	0x0b, 5	; 11
 10e:	5c 98       	cbi	0x0b, 4	; 11
 110:	c3 fd       	sbrc	r28, 3
 112:	5f 9a       	sbi	0x0b, 7	; 11
 114:	c2 fd       	sbrc	r28, 2
 116:	5e 9a       	sbi	0x0b, 6	; 11
 118:	c1 fd       	sbrc	r28, 1
 11a:	5d 9a       	sbi	0x0b, 5	; 11
 11c:	c0 fd       	sbrc	r28, 0
 11e:	5c 9a       	sbi	0x0b, 4	; 11
 120:	0e 94 63 00 	call	0xc6	; 0xc6 <toggle_e>
 124:	5c 9a       	sbi	0x0b, 4	; 11
 126:	5d 9a       	sbi	0x0b, 5	; 11
 128:	5e 9a       	sbi	0x0b, 6	; 11
 12a:	5f 9a       	sbi	0x0b, 7	; 11
 12c:	87 eb       	ldi	r24, 0xB7	; 183
 12e:	9b e0       	ldi	r25, 0x0B	; 11
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_write+0x5c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <lcd_write+0x62>
 136:	00 00       	nop
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <lcd_command>:
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_write>
 142:	08 95       	ret

00000144 <lcd_gotoxy>:
 144:	61 11       	cpse	r22, r1
 146:	04 c0       	rjmp	.+8      	; 0x150 <lcd_gotoxy+0xc>
 148:	80 58       	subi	r24, 0x80	; 128
 14a:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
 14e:	08 95       	ret
 150:	80 54       	subi	r24, 0x40	; 64
 152:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
 156:	08 95       	ret

00000158 <lcd_clrscr>:
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
 15e:	08 95       	ret

00000160 <lcd_putc>:
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	0e 94 6a 00 	call	0xd4	; 0xd4 <lcd_write>
 166:	08 95       	ret

00000168 <lcd_puts>:
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ec 01       	movw	r28, r24
 16e:	21 96       	adiw	r28, 0x01	; 1
 170:	fc 01       	movw	r30, r24
 172:	80 81       	ld	r24, Z
 174:	88 23       	and	r24, r24
 176:	29 f0       	breq	.+10     	; 0x182 <lcd_puts+0x1a>
 178:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putc>
 17c:	89 91       	ld	r24, Y+
 17e:	81 11       	cpse	r24, r1
 180:	fb cf       	rjmp	.-10     	; 0x178 <lcd_puts+0x10>
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 18c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 18e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 190:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 192:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 194:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 196:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 198:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	99 ef       	ldi	r25, 0xF9	; 249
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_init+0x16>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_init+0x1c>
 1a4:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 1a6:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 1a8:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 1aa:	0e 94 63 00 	call	0xc6	; 0xc6 <toggle_e>
 1ae:	8f e1       	ldi	r24, 0x1F	; 31
 1b0:	9e e4       	ldi	r25, 0x4E	; 78
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x2a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init+0x30>
 1b8:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1ba:	0e 94 63 00 	call	0xc6	; 0xc6 <toggle_e>
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_init+0x3a>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_init+0x40>
 1c8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1ca:	0e 94 63 00 	call	0xc6	; 0xc6 <toggle_e>
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_init+0x4a>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_init+0x50>
 1d8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1da:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1dc:	0e 94 63 00 	call	0xc6	; 0xc6 <toggle_e>
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_init+0x5c>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_init+0x62>
 1ea:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1ec:	88 e2       	ldi	r24, 0x28	; 40
 1ee:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1f8:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 202:	8c 2f       	mov	r24, r28
 204:	0e 94 9e 00 	call	0x13c	; 0x13c <lcd_command>
}/* lcd_init */
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <main>:


int main(void)
{
	//LCD settings
	lcd_init(LCD_DISP_ON);
 20c:	8c e0       	ldi	r24, 0x0C	; 12
 20e:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_init>
	lcd_gotoxy(1, 0); lcd_puts("            ");
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
 21a:	80 e2       	ldi	r24, 0x20	; 32
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
	lcd_gotoxy(1, 1); lcd_puts("            ");
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 a2 00 	call	0x144	; 0x144 <lcd_gotoxy>
 22a:	80 e2       	ldi	r24, 0x20	; 32
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
	*/
	
	//##########################################################ADC settings
    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
    ADMUX |= (1 << REFS0);
 232:	ec e7       	ldi	r30, 0x7C	; 124
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	80 64       	ori	r24, 0x40	; 64
 23a:	80 83       	st	Z, r24
    ADMUX &= ~(1 << REFS1);
 23c:	80 81       	ld	r24, Z
 23e:	8f 77       	andi	r24, 0x7F	; 127
 240:	80 83       	st	Z, r24
    
    // Set input channel to ADC0
    ADMUX &= ~((1 << MUX0)|(1 << MUX1)|(1 << MUX2)|(1 << MUX3));
 242:	80 81       	ld	r24, Z
 244:	80 7f       	andi	r24, 0xF0	; 240
 246:	80 83       	st	Z, r24

    // Enable ADC module
    ADCSRA |= (1 << ADEN);
 248:	ea e7       	ldi	r30, 0x7A	; 122
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	80 68       	ori	r24, 0x80	; 128
 250:	80 83       	st	Z, r24

    // Enable conversion complete interrupt
    ADCSRA |= (1 << ADIE);
 252:	80 81       	ld	r24, Z
 254:	88 60       	ori	r24, 0x08	; 8
 256:	80 83       	st	Z, r24

    // Set clock prescaler to 128
    ADCSRA |= ((1 << ADPS0)|(1 << ADPS1)|(1 << ADPS2));
 258:	80 81       	ld	r24, Z
 25a:	87 60       	ori	r24, 0x07	; 7
 25c:	80 83       	st	Z, r24
	//##########################################################ADC settings
	
    //timer for checking state of buttons every 4ms 
	TIM1_overflow_4ms(); //1s for debugging
 25e:	e1 e8       	ldi	r30, 0x81	; 129
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	89 7f       	andi	r24, 0xF9	; 249
 266:	80 83       	st	Z, r24
 268:	80 81       	ld	r24, Z
 26a:	81 60       	ori	r24, 0x01	; 1
 26c:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 26e:	ef e6       	ldi	r30, 0x6F	; 111
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	81 60       	ori	r24, 0x01	; 1
 276:	80 83       	st	Z, r24
	
	// Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
 278:	87 e6       	ldi	r24, 0x67	; 103
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 60 03 	call	0x6c0	; 0x6c0 <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
 280:	78 94       	sei
 282:	ff cf       	rjmp	.-2      	; 0x282 <main+0x76>

00000284 <__vector_13>:
    // Will never reach this
    return 0;
}

ISR(TIMER1_OVF_vect)
{	
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	8f 93       	push	r24
 290:	ef 93       	push	r30
 292:	ff 93       	push	r31
	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
 294:	ea e7       	ldi	r30, 0x7A	; 122
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	80 64       	ori	r24, 0x40	; 64
 29c:	80 83       	st	Z, r24
	uart_puts("\r\n");
	itoa(button1_history, lcd_string, 10);	
	uart_puts(lcd_string);
	*/
	
}
 29e:	ff 91       	pop	r31
 2a0:	ef 91       	pop	r30
 2a2:	8f 91       	pop	r24
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <__vector_21>:

ISR(ADC_vect)
{
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	2f 93       	push	r18
 2ba:	3f 93       	push	r19
 2bc:	4f 93       	push	r20
 2be:	5f 93       	push	r21
 2c0:	6f 93       	push	r22
 2c2:	7f 93       	push	r23
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	af 93       	push	r26
 2ca:	bf 93       	push	r27
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
	//clear decimal and hex position
	uint16_t value = ADC;
 2d0:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 2d4:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 2d8:	e0 e0       	ldi	r30, 0x00	; 0
 2da:	f1 e0       	ldi	r31, 0x01	; 1
 2dc:	20 e2       	ldi	r18, 0x20	; 32
 2de:	31 e0       	ldi	r19, 0x01	; 1
	};
	
	for(uint8_t i = 0; i < 16; ++i) //for all buttons
	{
	button_history[i] = (button_history[i] << 1); //make a space for new state
	button_history[i] |= 1; //set current state as not pushed in button history
 2e0:	80 81       	ld	r24, Z
 2e2:	91 81       	ldd	r25, Z+1	; 0x01
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	81 60       	ori	r24, 0x01	; 1
 2ea:	81 93       	st	Z+, r24
 2ec:	91 93       	st	Z+, r25
		0xFFFF,0xFFFF,0xFFFF,0xFFFF,
		0xFFFF,0xFFFF,0xFFFF,0xFFFF,
		0xFFFF,0xFFFF,0xFFFF,0xFFFF		
	};
	
	for(uint8_t i = 0; i < 16; ++i) //for all buttons
 2ee:	e2 17       	cp	r30, r18
 2f0:	f3 07       	cpc	r31, r19
 2f2:	b1 f7       	brne	.-20     	; 0x2e0 <__vector_21+0x32>
	button_history[i] = (button_history[i] << 1); //make a space for new state
	button_history[i] |= 1; //set current state as not pushed in button history
	}
			
    //################################## rozpoznani tlacitek
	if (value > 720)
 2f4:	41 3d       	cpi	r20, 0xD1	; 209
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	58 07       	cpc	r21, r24
 2fa:	08 f0       	brcs	.+2      	; 0x2fe <__vector_21+0x50>
 2fc:	78 c1       	rjmp	.+752    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
	{				
		//uart_puts("NONE");		
	}
	//       from ADC value          to value - (not included)
	else if (720 >= value && value > 660) //1 - key name
 2fe:	ca 01       	movw	r24, r20
 300:	85 59       	subi	r24, 0x95	; 149
 302:	92 40       	sbci	r25, 0x02	; 2
 304:	cc 97       	sbiw	r24, 0x3c	; 60
 306:	90 f4       	brcc	.+36     	; 0x32c <__vector_21+0x7e>
	{		
		button_history[0] &= ~(1<<0); //set current state as pushed in button history
 308:	e0 e0       	ldi	r30, 0x00	; 0
 30a:	f1 e0       	ldi	r31, 0x01	; 1
 30c:	80 81       	ld	r24, Z
 30e:	91 81       	ldd	r25, Z+1	; 0x01
 310:	8e 7f       	andi	r24, 0xFE	; 254
 312:	91 83       	std	Z+1, r25	; 0x01
 314:	80 83       	st	Z, r24
		if (is_button_pressed(&button_history[0])) //button is pressed if it is not bounce or glitch
 316:	cf 01       	movw	r24, r30
 318:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 31c:	89 2b       	or	r24, r25
 31e:	09 f4       	brne	.+2      	; 0x322 <__vector_21+0x74>
 320:	66 c1       	rjmp	.+716    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		{
			uart_puts("1"); //send pushed key on UART		
 322:	8d e2       	ldi	r24, 0x2D	; 45
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_puts>
 32a:	61 c1       	rjmp	.+706    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		}		
	}
	else if (660 >= value && value > 610) //4
 32c:	ca 01       	movw	r24, r20
 32e:	83 56       	subi	r24, 0x63	; 99
 330:	92 40       	sbci	r25, 0x02	; 2
 332:	c2 97       	sbiw	r24, 0x32	; 50
 334:	98 f4       	brcc	.+38     	; 0x35c <__vector_21+0xae>
	{
		button_history[1] &= ~(1<<0); 
 336:	e0 e0       	ldi	r30, 0x00	; 0
 338:	f1 e0       	ldi	r31, 0x01	; 1
 33a:	82 81       	ldd	r24, Z+2	; 0x02
 33c:	93 81       	ldd	r25, Z+3	; 0x03
 33e:	8e 7f       	andi	r24, 0xFE	; 254
 340:	93 83       	std	Z+3, r25	; 0x03
 342:	82 83       	std	Z+2, r24	; 0x02
		if (is_button_pressed(&button_history[1]))
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 34c:	89 2b       	or	r24, r25
 34e:	09 f4       	brne	.+2      	; 0x352 <__vector_21+0xa4>
 350:	4e c1       	rjmp	.+668    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		{
			uart_puts("4");		
 352:	8f e2       	ldi	r24, 0x2F	; 47
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_puts>
 35a:	49 c1       	rjmp	.+658    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		}		
	}
	else if (610 >= value && value > 570) //7
 35c:	ca 01       	movw	r24, r20
 35e:	8b 53       	subi	r24, 0x3B	; 59
 360:	92 40       	sbci	r25, 0x02	; 2
 362:	88 97       	sbiw	r24, 0x28	; 40
 364:	98 f4       	brcc	.+38     	; 0x38c <__vector_21+0xde>
	{
		button_history[2] &= ~(1<<0); 
 366:	e0 e0       	ldi	r30, 0x00	; 0
 368:	f1 e0       	ldi	r31, 0x01	; 1
 36a:	84 81       	ldd	r24, Z+4	; 0x04
 36c:	95 81       	ldd	r25, Z+5	; 0x05
 36e:	8e 7f       	andi	r24, 0xFE	; 254
 370:	95 83       	std	Z+5, r25	; 0x05
 372:	84 83       	std	Z+4, r24	; 0x04
		if (is_button_pressed(&button_history[2]))
 374:	84 e0       	ldi	r24, 0x04	; 4
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 37c:	89 2b       	or	r24, r25
 37e:	09 f4       	brne	.+2      	; 0x382 <__vector_21+0xd4>
 380:	36 c1       	rjmp	.+620    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		{
			uart_puts("7");
 382:	81 e3       	ldi	r24, 0x31	; 49
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_puts>
 38a:	31 c1       	rjmp	.+610    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		}
	}
	else if (570 >= value && value > 530) //*
 38c:	ca 01       	movw	r24, r20
 38e:	83 51       	subi	r24, 0x13	; 19
 390:	92 40       	sbci	r25, 0x02	; 2
 392:	88 97       	sbiw	r24, 0x28	; 40
 394:	98 f4       	brcc	.+38     	; 0x3bc <__vector_21+0x10e>
	{
		button_history[3] &= ~(1<<0); 
 396:	e0 e0       	ldi	r30, 0x00	; 0
 398:	f1 e0       	ldi	r31, 0x01	; 1
 39a:	86 81       	ldd	r24, Z+6	; 0x06
 39c:	97 81       	ldd	r25, Z+7	; 0x07
 39e:	8e 7f       	andi	r24, 0xFE	; 254
 3a0:	97 83       	std	Z+7, r25	; 0x07
 3a2:	86 83       	std	Z+6, r24	; 0x06
		if (is_button_pressed(&button_history[3]))
 3a4:	86 e0       	ldi	r24, 0x06	; 6
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 3ac:	89 2b       	or	r24, r25
 3ae:	09 f4       	brne	.+2      	; 0x3b2 <__vector_21+0x104>
 3b0:	1e c1       	rjmp	.+572    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		{
			uart_puts("*");
 3b2:	83 e3       	ldi	r24, 0x33	; 51
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_puts>
 3ba:	19 c1       	rjmp	.+562    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		}
	}
	else if (530 >= value && value > 490) //2
 3bc:	ca 01       	movw	r24, r20
 3be:	8b 5e       	subi	r24, 0xEB	; 235
 3c0:	91 40       	sbci	r25, 0x01	; 1
 3c2:	88 97       	sbiw	r24, 0x28	; 40
 3c4:	98 f4       	brcc	.+38     	; 0x3ec <__vector_21+0x13e>
	{
		button_history[4] &= ~(1<<0); 
 3c6:	e0 e0       	ldi	r30, 0x00	; 0
 3c8:	f1 e0       	ldi	r31, 0x01	; 1
 3ca:	80 85       	ldd	r24, Z+8	; 0x08
 3cc:	91 85       	ldd	r25, Z+9	; 0x09
 3ce:	8e 7f       	andi	r24, 0xFE	; 254
 3d0:	91 87       	std	Z+9, r25	; 0x09
 3d2:	80 87       	std	Z+8, r24	; 0x08
		if (is_button_pressed(&button_history[4]))
 3d4:	88 e0       	ldi	r24, 0x08	; 8
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 3dc:	89 2b       	or	r24, r25
 3de:	09 f4       	brne	.+2      	; 0x3e2 <__vector_21+0x134>
 3e0:	06 c1       	rjmp	.+524    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		{
			uart_puts("2");
 3e2:	85 e3       	ldi	r24, 0x35	; 53
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_puts>
 3ea:	01 c1       	rjmp	.+514    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		}
	}
	else if (490 >= value && value > 460) //3
 3ec:	ca 01       	movw	r24, r20
 3ee:	8d 5c       	subi	r24, 0xCD	; 205
 3f0:	91 40       	sbci	r25, 0x01	; 1
 3f2:	4e 97       	sbiw	r24, 0x1e	; 30
 3f4:	98 f4       	brcc	.+38     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	{
		button_history[5] &= 0xFFFE; 
 3f6:	e0 e0       	ldi	r30, 0x00	; 0
 3f8:	f1 e0       	ldi	r31, 0x01	; 1
 3fa:	82 85       	ldd	r24, Z+10	; 0x0a
 3fc:	93 85       	ldd	r25, Z+11	; 0x0b
 3fe:	8e 7f       	andi	r24, 0xFE	; 254
 400:	93 87       	std	Z+11, r25	; 0x0b
 402:	82 87       	std	Z+10, r24	; 0x0a
		if (is_button_pressed(&button_history[5]))
 404:	8a e0       	ldi	r24, 0x0A	; 10
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 40c:	89 2b       	or	r24, r25
 40e:	09 f4       	brne	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 410:	ee c0       	rjmp	.+476    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		{
			uart_puts("3");
 412:	87 e3       	ldi	r24, 0x37	; 55
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_puts>
 41a:	e9 c0       	rjmp	.+466    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		}
	}
	else if (460 >= value && value > 430) //A
 41c:	ca 01       	movw	r24, r20
 41e:	8f 5a       	subi	r24, 0xAF	; 175
 420:	91 40       	sbci	r25, 0x01	; 1
 422:	4e 97       	sbiw	r24, 0x1e	; 30
 424:	98 f4       	brcc	.+38     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	{
		button_history[6] &= ~(1<<0); 
 426:	e0 e0       	ldi	r30, 0x00	; 0
 428:	f1 e0       	ldi	r31, 0x01	; 1
 42a:	84 85       	ldd	r24, Z+12	; 0x0c
 42c:	95 85       	ldd	r25, Z+13	; 0x0d
 42e:	8e 7f       	andi	r24, 0xFE	; 254
 430:	95 87       	std	Z+13, r25	; 0x0d
 432:	84 87       	std	Z+12, r24	; 0x0c
		if (is_button_pressed(&button_history[6]))
 434:	8c e0       	ldi	r24, 0x0C	; 12
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 43c:	89 2b       	or	r24, r25
 43e:	09 f4       	brne	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 440:	d6 c0       	rjmp	.+428    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		{
			uart_puts("A");
 442:	89 e3       	ldi	r24, 0x39	; 57
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_puts>
 44a:	d1 c0       	rjmp	.+418    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		}
	}
    else if (430 >= value && value > 390) //5
 44c:	ca 01       	movw	r24, r20
 44e:	87 58       	subi	r24, 0x87	; 135
 450:	91 40       	sbci	r25, 0x01	; 1
 452:	88 97       	sbiw	r24, 0x28	; 40
 454:	98 f4       	brcc	.+38     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
    {
		button_history[7] &= ~(1<<0); 
 456:	e0 e0       	ldi	r30, 0x00	; 0
 458:	f1 e0       	ldi	r31, 0x01	; 1
 45a:	86 85       	ldd	r24, Z+14	; 0x0e
 45c:	97 85       	ldd	r25, Z+15	; 0x0f
 45e:	8e 7f       	andi	r24, 0xFE	; 254
 460:	97 87       	std	Z+15, r25	; 0x0f
 462:	86 87       	std	Z+14, r24	; 0x0e
		if (is_button_pressed(&button_history[7]))
 464:	8e e0       	ldi	r24, 0x0E	; 14
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 46c:	89 2b       	or	r24, r25
 46e:	09 f4       	brne	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 470:	be c0       	rjmp	.+380    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		{
			uart_puts("5");
 472:	8b e3       	ldi	r24, 0x3B	; 59
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_puts>
 47a:	b9 c0       	rjmp	.+370    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		}
    }
	else if (390 >= value && value > 340) //6
 47c:	ca 01       	movw	r24, r20
 47e:	85 55       	subi	r24, 0x55	; 85
 480:	91 40       	sbci	r25, 0x01	; 1
 482:	c2 97       	sbiw	r24, 0x32	; 50
 484:	98 f4       	brcc	.+38     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
	{
		button_history[8] &= ~(1<<0); 
 486:	e0 e0       	ldi	r30, 0x00	; 0
 488:	f1 e0       	ldi	r31, 0x01	; 1
 48a:	80 89       	ldd	r24, Z+16	; 0x10
 48c:	91 89       	ldd	r25, Z+17	; 0x11
 48e:	8e 7f       	andi	r24, 0xFE	; 254
 490:	91 8b       	std	Z+17, r25	; 0x11
 492:	80 8b       	std	Z+16, r24	; 0x10
		if (is_button_pressed(&button_history[8]))
 494:	80 e1       	ldi	r24, 0x10	; 16
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 49c:	89 2b       	or	r24, r25
 49e:	09 f4       	brne	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4a0:	a6 c0       	rjmp	.+332    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		{
			uart_puts("6");
 4a2:	8d e3       	ldi	r24, 0x3D	; 61
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_puts>
 4aa:	a1 c0       	rjmp	.+322    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		}
	}
	else if (340 >= value && value > 290) //B
 4ac:	ca 01       	movw	r24, r20
 4ae:	83 52       	subi	r24, 0x23	; 35
 4b0:	91 40       	sbci	r25, 0x01	; 1
 4b2:	c2 97       	sbiw	r24, 0x32	; 50
 4b4:	98 f4       	brcc	.+38     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
	{
		button_history[9] &= ~(1<<0); 
 4b6:	e0 e0       	ldi	r30, 0x00	; 0
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	82 89       	ldd	r24, Z+18	; 0x12
 4bc:	93 89       	ldd	r25, Z+19	; 0x13
 4be:	8e 7f       	andi	r24, 0xFE	; 254
 4c0:	93 8b       	std	Z+19, r25	; 0x13
 4c2:	82 8b       	std	Z+18, r24	; 0x12
		if (is_button_pressed(&button_history[9]))
 4c4:	82 e1       	ldi	r24, 0x12	; 18
 4c6:	91 e0       	ldi	r25, 0x01	; 1
 4c8:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 4cc:	89 2b       	or	r24, r25
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4d0:	8e c0       	rjmp	.+284    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		{
			uart_puts("B");
 4d2:	8f e3       	ldi	r24, 0x3F	; 63
 4d4:	91 e0       	ldi	r25, 0x01	; 1
 4d6:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_puts>
 4da:	89 c0       	rjmp	.+274    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		}
	}
	else if (290 >= value && value > 230) //8
 4dc:	ca 01       	movw	r24, r20
 4de:	87 5e       	subi	r24, 0xE7	; 231
 4e0:	91 09       	sbc	r25, r1
 4e2:	cc 97       	sbiw	r24, 0x3c	; 60
 4e4:	98 f4       	brcc	.+38     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
	{
		button_history[10] &= ~(1<<0); 
 4e6:	e0 e0       	ldi	r30, 0x00	; 0
 4e8:	f1 e0       	ldi	r31, 0x01	; 1
 4ea:	84 89       	ldd	r24, Z+20	; 0x14
 4ec:	95 89       	ldd	r25, Z+21	; 0x15
 4ee:	8e 7f       	andi	r24, 0xFE	; 254
 4f0:	95 8b       	std	Z+21, r25	; 0x15
 4f2:	84 8b       	std	Z+20, r24	; 0x14
		if (is_button_pressed(&button_history[10]))
 4f4:	84 e1       	ldi	r24, 0x14	; 20
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 4fc:	89 2b       	or	r24, r25
 4fe:	09 f4       	brne	.+2      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 500:	76 c0       	rjmp	.+236    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		{
			uart_puts("8");
 502:	81 e4       	ldi	r24, 0x41	; 65
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_puts>
 50a:	71 c0       	rjmp	.+226    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		}
	}
	else if (230 >= value && value > 190) //9
 50c:	ca 01       	movw	r24, r20
 50e:	8f 5b       	subi	r24, 0xBF	; 191
 510:	91 09       	sbc	r25, r1
 512:	88 97       	sbiw	r24, 0x28	; 40
 514:	98 f4       	brcc	.+38     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
	{
		button_history[11] &= ~(1<<0); 
 516:	e0 e0       	ldi	r30, 0x00	; 0
 518:	f1 e0       	ldi	r31, 0x01	; 1
 51a:	86 89       	ldd	r24, Z+22	; 0x16
 51c:	97 89       	ldd	r25, Z+23	; 0x17
 51e:	8e 7f       	andi	r24, 0xFE	; 254
 520:	97 8b       	std	Z+23, r25	; 0x17
 522:	86 8b       	std	Z+22, r24	; 0x16
		if (is_button_pressed(&button_history[11]))
 524:	86 e1       	ldi	r24, 0x16	; 22
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 52c:	89 2b       	or	r24, r25
 52e:	09 f4       	brne	.+2      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 530:	5e c0       	rjmp	.+188    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		{
			uart_puts("9");
 532:	83 e4       	ldi	r24, 0x43	; 67
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_puts>
 53a:	59 c0       	rjmp	.+178    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		}
	}
	else if (190 >= value && value > 150) //0
 53c:	ca 01       	movw	r24, r20
 53e:	87 59       	subi	r24, 0x97	; 151
 540:	91 09       	sbc	r25, r1
 542:	88 97       	sbiw	r24, 0x28	; 40
 544:	98 f4       	brcc	.+38     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
	{
		button_history[12] &= ~(1<<0); 
 546:	e0 e0       	ldi	r30, 0x00	; 0
 548:	f1 e0       	ldi	r31, 0x01	; 1
 54a:	80 8d       	ldd	r24, Z+24	; 0x18
 54c:	91 8d       	ldd	r25, Z+25	; 0x19
 54e:	8e 7f       	andi	r24, 0xFE	; 254
 550:	91 8f       	std	Z+25, r25	; 0x19
 552:	80 8f       	std	Z+24, r24	; 0x18
		if (is_button_pressed(&button_history[12]))
 554:	88 e1       	ldi	r24, 0x18	; 24
 556:	91 e0       	ldi	r25, 0x01	; 1
 558:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 55c:	89 2b       	or	r24, r25
 55e:	09 f4       	brne	.+2      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 560:	46 c0       	rjmp	.+140    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		{
			uart_puts("0");
 562:	85 e4       	ldi	r24, 0x45	; 69
 564:	91 e0       	ldi	r25, 0x01	; 1
 566:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_puts>
 56a:	41 c0       	rjmp	.+130    	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		}
	}
	else if (150 >= value && value > 110) //C
 56c:	ca 01       	movw	r24, r20
 56e:	8f 56       	subi	r24, 0x6F	; 111
 570:	91 09       	sbc	r25, r1
 572:	88 97       	sbiw	r24, 0x28	; 40
 574:	90 f4       	brcc	.+36     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
	{
		button_history[13] &= ~(1<<0); 
 576:	e0 e0       	ldi	r30, 0x00	; 0
 578:	f1 e0       	ldi	r31, 0x01	; 1
 57a:	82 8d       	ldd	r24, Z+26	; 0x1a
 57c:	93 8d       	ldd	r25, Z+27	; 0x1b
 57e:	8e 7f       	andi	r24, 0xFE	; 254
 580:	93 8f       	std	Z+27, r25	; 0x1b
 582:	82 8f       	std	Z+26, r24	; 0x1a
		if (is_button_pressed(&button_history[13]))
 584:	8a e1       	ldi	r24, 0x1A	; 26
 586:	91 e0       	ldi	r25, 0x01	; 1
 588:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 58c:	89 2b       	or	r24, r25
 58e:	79 f1       	breq	.+94     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		{
			uart_puts("C");
 590:	87 e4       	ldi	r24, 0x47	; 71
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_puts>
 598:	2a c0       	rjmp	.+84     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		}
	}
	else if (110 >= value && value > 50) //#
 59a:	ca 01       	movw	r24, r20
 59c:	c3 97       	sbiw	r24, 0x33	; 51
 59e:	cc 97       	sbiw	r24, 0x3c	; 60
 5a0:	90 f4       	brcc	.+36     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
	{
		button_history[14] &= ~(1<<0); 
 5a2:	e0 e0       	ldi	r30, 0x00	; 0
 5a4:	f1 e0       	ldi	r31, 0x01	; 1
 5a6:	84 8d       	ldd	r24, Z+28	; 0x1c
 5a8:	95 8d       	ldd	r25, Z+29	; 0x1d
 5aa:	8e 7f       	andi	r24, 0xFE	; 254
 5ac:	95 8f       	std	Z+29, r25	; 0x1d
 5ae:	84 8f       	std	Z+28, r24	; 0x1c
		if (is_button_pressed(&button_history[14]))
 5b0:	8c e1       	ldi	r24, 0x1C	; 28
 5b2:	91 e0       	ldi	r25, 0x01	; 1
 5b4:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 5b8:	89 2b       	or	r24, r25
 5ba:	c9 f0       	breq	.+50     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		{
			uart_puts("#");
 5bc:	89 e4       	ldi	r24, 0x49	; 73
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_puts>
 5c4:	14 c0       	rjmp	.+40     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		}
	}
	else if (50 >= value && value >= 0) //D
 5c6:	43 33       	cpi	r20, 0x33	; 51
 5c8:	51 05       	cpc	r21, r1
 5ca:	88 f4       	brcc	.+34     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
	{
		button_history[15] &= ~(1<<0); 
 5cc:	e0 e0       	ldi	r30, 0x00	; 0
 5ce:	f1 e0       	ldi	r31, 0x01	; 1
 5d0:	86 8d       	ldd	r24, Z+30	; 0x1e
 5d2:	97 8d       	ldd	r25, Z+31	; 0x1f
 5d4:	8e 7f       	andi	r24, 0xFE	; 254
 5d6:	97 8f       	std	Z+31, r25	; 0x1f
 5d8:	86 8f       	std	Z+30, r24	; 0x1e
		if (is_button_pressed(&button_history[15]))
 5da:	8e e1       	ldi	r24, 0x1E	; 30
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	0e 94 53 00 	call	0xa6	; 0xa6 <is_button_pressed>
 5e2:	89 2b       	or	r24, r25
 5e4:	21 f0       	breq	.+8      	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
		{
			uart_puts("D");
 5e6:	8b e4       	ldi	r24, 0x4B	; 75
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_puts>
	{		
	}	
    //##################################
			
	
 5ee:	ff 91       	pop	r31
 5f0:	ef 91       	pop	r30
 5f2:	bf 91       	pop	r27
 5f4:	af 91       	pop	r26
 5f6:	9f 91       	pop	r25
 5f8:	8f 91       	pop	r24
 5fa:	7f 91       	pop	r23
 5fc:	6f 91       	pop	r22
 5fe:	5f 91       	pop	r21
 600:	4f 91       	pop	r20
 602:	3f 91       	pop	r19
 604:	2f 91       	pop	r18
 606:	0f 90       	pop	r0
 608:	0f be       	out	0x3f, r0	; 63
 60a:	0f 90       	pop	r0
 60c:	1f 90       	pop	r1
 60e:	18 95       	reti

00000610 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 610:	1f 92       	push	r1
 612:	0f 92       	push	r0
 614:	0f b6       	in	r0, 0x3f	; 63
 616:	0f 92       	push	r0
 618:	11 24       	eor	r1, r1
 61a:	2f 93       	push	r18
 61c:	8f 93       	push	r24
 61e:	9f 93       	push	r25
 620:	ef 93       	push	r30
 622:	ff 93       	push	r31
 624:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 628:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 62c:	8c 71       	andi	r24, 0x1C	; 28
 62e:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <UART_RxHead>
 632:	ef 5f       	subi	r30, 0xFF	; 255
 634:	ef 71       	andi	r30, 0x1F	; 31
 636:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <UART_RxTail>
 63a:	e9 17       	cp	r30, r25
 63c:	39 f0       	breq	.+14     	; 0x64c <__vector_18+0x3c>
 63e:	e0 93 50 01 	sts	0x0150, r30	; 0x800150 <UART_RxHead>
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	ed 5a       	subi	r30, 0xAD	; 173
 646:	fe 4f       	sbci	r31, 0xFE	; 254
 648:	20 83       	st	Z, r18
 64a:	01 c0       	rjmp	.+2      	; 0x64e <__vector_18+0x3e>
 64c:	82 e0       	ldi	r24, 0x02	; 2
 64e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <__data_end>
 652:	89 2b       	or	r24, r25
 654:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>
 658:	ff 91       	pop	r31
 65a:	ef 91       	pop	r30
 65c:	9f 91       	pop	r25
 65e:	8f 91       	pop	r24
 660:	2f 91       	pop	r18
 662:	0f 90       	pop	r0
 664:	0f be       	out	0x3f, r0	; 63
 666:	0f 90       	pop	r0
 668:	1f 90       	pop	r1
 66a:	18 95       	reti

0000066c <__vector_19>:
 66c:	1f 92       	push	r1
 66e:	0f 92       	push	r0
 670:	0f b6       	in	r0, 0x3f	; 63
 672:	0f 92       	push	r0
 674:	11 24       	eor	r1, r1
 676:	8f 93       	push	r24
 678:	9f 93       	push	r25
 67a:	ef 93       	push	r30
 67c:	ff 93       	push	r31
 67e:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <UART_TxHead>
 682:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <UART_TxTail>
 686:	98 17       	cp	r25, r24
 688:	69 f0       	breq	.+26     	; 0x6a4 <__vector_19+0x38>
 68a:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <UART_TxTail>
 68e:	ef 5f       	subi	r30, 0xFF	; 255
 690:	ef 71       	andi	r30, 0x1F	; 31
 692:	e0 93 51 01 	sts	0x0151, r30	; 0x800151 <UART_TxTail>
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	ed 58       	subi	r30, 0x8D	; 141
 69a:	fe 4f       	sbci	r31, 0xFE	; 254
 69c:	80 81       	ld	r24, Z
 69e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 6a2:	05 c0       	rjmp	.+10     	; 0x6ae <__vector_19+0x42>
 6a4:	e1 ec       	ldi	r30, 0xC1	; 193
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	80 81       	ld	r24, Z
 6aa:	8f 7d       	andi	r24, 0xDF	; 223
 6ac:	80 83       	st	Z, r24
 6ae:	ff 91       	pop	r31
 6b0:	ef 91       	pop	r30
 6b2:	9f 91       	pop	r25
 6b4:	8f 91       	pop	r24
 6b6:	0f 90       	pop	r0
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	0f 90       	pop	r0
 6bc:	1f 90       	pop	r1
 6be:	18 95       	reti

000006c0 <uart_init>:
 6c0:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <UART_TxHead>
 6c4:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <UART_TxTail>
 6c8:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <UART_RxHead>
 6cc:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <UART_RxTail>
 6d0:	99 23       	and	r25, r25
 6d2:	1c f4       	brge	.+6      	; 0x6da <uart_init+0x1a>
 6d4:	22 e0       	ldi	r18, 0x02	; 2
 6d6:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 6da:	90 78       	andi	r25, 0x80	; 128
 6dc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 6e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 6e4:	88 e9       	ldi	r24, 0x98	; 152
 6e6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 6ea:	86 e0       	ldi	r24, 0x06	; 6
 6ec:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 6f0:	08 95       	ret

000006f2 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 6f2:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <UART_TxHead>
 6f6:	2f 5f       	subi	r18, 0xFF	; 255
 6f8:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 6fa:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <UART_TxTail>
 6fe:	29 17       	cp	r18, r25
 700:	e1 f3       	breq	.-8      	; 0x6fa <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 702:	e2 2f       	mov	r30, r18
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	ed 58       	subi	r30, 0x8D	; 141
 708:	fe 4f       	sbci	r31, 0xFE	; 254
 70a:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 70c:	20 93 52 01 	sts	0x0152, r18	; 0x800152 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 710:	e1 ec       	ldi	r30, 0xC1	; 193
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	80 62       	ori	r24, 0x20	; 32
 718:	80 83       	st	Z, r24
 71a:	08 95       	ret

0000071c <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 71c:	cf 93       	push	r28
 71e:	df 93       	push	r29
 720:	ec 01       	movw	r28, r24
    while (*s)
 722:	88 81       	ld	r24, Y
 724:	88 23       	and	r24, r24
 726:	31 f0       	breq	.+12     	; 0x734 <uart_puts+0x18>
 728:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 72a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 72e:	89 91       	ld	r24, Y+
 730:	81 11       	cpse	r24, r1
 732:	fb cf       	rjmp	.-10     	; 0x72a <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	08 95       	ret

0000073a <_exit>:
 73a:	f8 94       	cli

0000073c <__stop_program>:
 73c:	ff cf       	rjmp	.-2      	; 0x73c <__stop_program>
