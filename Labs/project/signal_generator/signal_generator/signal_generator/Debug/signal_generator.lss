
signal_generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000220  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800100  00800100  00000294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eed  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000869  00000000  00000000  000012b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054a  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000206c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000574  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000490  00000000  00000000  000027c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002c50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_18>
  4c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 38       	cpi	r26, 0x85	; 133
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6d 00 	call	0xda	; 0xda <main>
  88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <GPIO_config_output>:
/*--------------------------------------------------------------------*/

/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name |= (1<<pin_num); //Write high-value to a set bit in given register
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <GPIO_config_output+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <GPIO_config_output+0xa>
  a2:	24 2b       	or	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <GPIO_write_low>:
  a8:	fc 01       	movw	r30, r24
  aa:	90 81       	ld	r25, Z
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <GPIO_write_low+0xe>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <GPIO_write_low+0xa>
  ba:	20 95       	com	r18
  bc:	29 23       	and	r18, r25
  be:	20 83       	st	Z, r18
  c0:	08 95       	ret

000000c2 <GPIO_toggle>:
/*--------------------------------------------------------------------*/

/* GPIO_toggle */
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name ^= (1<<pin_num);  // Flib given bit in register
  c2:	fc 01       	movw	r30, r24
  c4:	40 81       	ld	r20, Z
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <GPIO_toggle+0xe>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <GPIO_toggle+0xa>
  d4:	24 27       	eor	r18, r20
  d6:	20 83       	st	Z, r18
  d8:	08 95       	ret

000000da <main>:

int main(void)
{
	//uint8_t output = 0b00000000;
	//############# TIMER/COUNTER0 SETTINGS
	TIM0_set_mode_CTC();			// Set timer to CTC mode
  da:	85 b5       	in	r24, 0x25	; 37
  dc:	87 7f       	andi	r24, 0xF7	; 247
  de:	85 bd       	out	0x25, r24	; 37
  e0:	84 b5       	in	r24, 0x24	; 36
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	84 bd       	out	0x24, r24	; 36
  e6:	84 b5       	in	r24, 0x24	; 36
  e8:	8e 7f       	andi	r24, 0xFE	; 254
  ea:	84 bd       	out	0x24, r24	; 36
	TIM0_overflow_16us();
  ec:	85 b5       	in	r24, 0x25	; 37
  ee:	89 7f       	andi	r24, 0xF9	; 249
  f0:	85 bd       	out	0x25, r24	; 37
  f2:	85 b5       	in	r24, 0x25	; 37
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	85 bd       	out	0x25, r24	; 37
	TIM0_CTC_A_interrupt_enable();	// Interrupt enable
  f8:	ee e6       	ldi	r30, 0x6E	; 110
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	80 83       	st	Z, r24
	OCR0A = COMP_REG_A_MASK;		// Set Compare register A mask for 1 MHz frequency
 102:	88 e5       	ldi	r24, 0x58	; 88
 104:	87 bd       	out	0x27, r24	; 39
	GPIO_config_output(&DDRC, PC0);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	87 e2       	ldi	r24, 0x27	; 39
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
	GPIO_write_low(&PORTC, PC0);
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	88 e2       	ldi	r24, 0x28	; 40
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
	
	// Enables interrupts by setting the global interrupt mask
	sei();
 11a:	78 94       	sei
 11c:	ff cf       	rjmp	.-2      	; 0x11c <main+0x42>

0000011e <__vector_14>:
		
    }
}

ISR(TIMER0_COMPA_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	4f 93       	push	r20
 12e:	5f 93       	push	r21
 130:	6f 93       	push	r22
 132:	7f 93       	push	r23
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
 138:	af 93       	push	r26
 13a:	bf 93       	push	r27
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	{
		sample = 0b00;
	}
	*/
	//uint8_t button;
	GPIO_toggle(&PORTC, PC0);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	88 e2       	ldi	r24, 0x28	; 40
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_toggle>

}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	2f 93       	push	r18
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 180:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    data = UART0_DATA;
 184:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 188:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 18a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <UART_RxHead>
 18e:	ef 5f       	subi	r30, 0xFF	; 255
 190:	ef 73       	andi	r30, 0x3F	; 63

    if (tmphead == UART_RxTail)
 192:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <UART_RxTail>
 196:	e9 17       	cp	r30, r25
 198:	39 f0       	breq	.+14     	; 0x1a8 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 19a:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	eb 5f       	subi	r30, 0xFB	; 251
 1a2:	fe 4f       	sbci	r31, 0xFE	; 254
 1a4:	20 83       	st	Z, r18
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 1a8:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 1aa:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 1ae:	89 2b       	or	r24, r25
 1b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	ef 93       	push	r30
 1d8:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 1da:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <UART_TxHead>
 1de:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <UART_TxTail>
 1e2:	98 17       	cp	r25, r24
 1e4:	69 f0       	breq	.+26     	; 0x200 <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 1e6:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <UART_TxTail>
 1ea:	ef 5f       	subi	r30, 0xFF	; 255
 1ec:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
 1ee:	e0 93 03 01 	sts	0x0103, r30	; 0x800103 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	eb 5b       	subi	r30, 0xBB	; 187
 1f6:	fe 4f       	sbci	r31, 0xFE	; 254
 1f8:	80 81       	ld	r24, Z
 1fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 200:	e1 ec       	ldi	r30, 0xC1	; 193
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	8f 7d       	andi	r24, 0xDF	; 223
 208:	80 83       	st	Z, r24
    }
}
 20a:	ff 91       	pop	r31
 20c:	ef 91       	pop	r30
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
