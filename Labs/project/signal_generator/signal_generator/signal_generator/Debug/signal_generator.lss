
signal_generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000216  00800100  00000432  000004c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000432  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  00800316  00800316  000006dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000070c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f04  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000965  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000644  00000000  00000000  0000209d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  000026e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d1  00000000  00000000  00002900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000654  00000000  00000000  00002ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003525  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 44 01 	jmp	0x288	; 0x288 <__vector_18>
  4c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b3 e0       	ldi	r27, 0x03	; 3
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 39       	cpi	r26, 0x9F	; 159
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 17 02 	jmp	0x42e	; 0x42e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/*--------------------------------------------------------------------*/

/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name |= (1<<pin_num); //Write high-value to a set bit in given register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_toggle>:
/*--------------------------------------------------------------------*/

/* GPIO_toggle */
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name ^= (1<<pin_num);  // Flib given bit in register
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_toggle+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_toggle+0xa>
  ea:	24 27       	eor	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:

int main(void)
{
	//uint8_t output = 0b00000000;
	//############# TIMER/COUNTER0 SETTINGS
	TIM0_set_mode_CTC();			// Set timer to CTC mode
  f0:	85 b5       	in	r24, 0x25	; 37
  f2:	87 7f       	andi	r24, 0xF7	; 247
  f4:	85 bd       	out	0x25, r24	; 37
  f6:	84 b5       	in	r24, 0x24	; 36
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	84 bd       	out	0x24, r24	; 36
  fc:	84 b5       	in	r24, 0x24	; 36
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	84 bd       	out	0x24, r24	; 36
	TIM0_overflow_16us();
 102:	85 b5       	in	r24, 0x25	; 37
 104:	89 7f       	andi	r24, 0xF9	; 249
 106:	85 bd       	out	0x25, r24	; 37
 108:	85 b5       	in	r24, 0x25	; 37
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	85 bd       	out	0x25, r24	; 37
	TIM0_CTC_A_interrupt_enable();	// Interrupt enable
 10e:	ee e6       	ldi	r30, 0x6E	; 110
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	82 60       	ori	r24, 0x02	; 2
 116:	80 83       	st	Z, r24
	OCR0A = COMP_REG_A_MASK;		// Set Compare register A mask for 1 MHz frequency
 118:	87 e0       	ldi	r24, 0x07	; 7
 11a:	87 bd       	out	0x27, r24	; 39
	GPIO_config_output(&DDRC, PC0);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	87 e2       	ldi	r24, 0x27	; 39
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC, PC0);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	88 e2       	ldi	r24, 0x28	; 40
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	
	// Enables interrupts by setting the global interrupt mask
	sei();
 130:	78 94       	sei
 132:	ff cf       	rjmp	.-2      	; 0x132 <main+0x42>

00000134 <__vector_14>:
		
    }
}

ISR(TIMER0_COMPA_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	00 d0       	rcall	.+0      	; 0x160 <__vector_14+0x2c>
 160:	00 d0       	rcall	.+0      	; 0x162 <__vector_14+0x2e>
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	char uart_message[4] = "    ";
 166:	80 e2       	ldi	r24, 0x20	; 32
 168:	90 e2       	ldi	r25, 0x20	; 32
 16a:	9a 83       	std	Y+2, r25	; 0x02
 16c:	89 83       	std	Y+1, r24	; 0x01
 16e:	9c 83       	std	Y+4, r25	; 0x04
 170:	8b 83       	std	Y+3, r24	; 0x03
		0b01111101,    // sample511
		0b01111111,    // sample512


	};
	if(signal_duration >= sample)
 172:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <__data_end>
 176:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <__data_end+0x1>
 17a:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <__data_end+0x2>
 17e:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <__data_end+0x3>
 182:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <signal_duration.1993>
 186:	10 91 11 01 	lds	r17, 0x0111	; 0x800111 <signal_duration.1993+0x1>
 18a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <signal_duration.1993+0x2>
 18e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <signal_duration.1993+0x3>
 192:	06 17       	cp	r16, r22
 194:	17 07       	cpc	r17, r23
 196:	28 07       	cpc	r18, r24
 198:	39 07       	cpc	r19, r25
 19a:	e8 f1       	brcs	.+122    	; 0x216 <__vector_14+0xe2>
	{
		signal_amplitude = (sinus_table[gen_sig_sample_id(sample, &frequency_set[key/4])] + sinus_table[gen_sig_sample_id(sample, &frequency_set[4 + (key % 4)])])/2;
 19c:	46 e0       	ldi	r20, 0x06	; 6
 19e:	51 e0       	ldi	r21, 0x01	; 1
 1a0:	0e 94 31 01 	call	0x262	; 0x262 <gen_sig_sample_id>
 1a4:	8c 5e       	subi	r24, 0xEC	; 236
 1a6:	9e 4f       	sbci	r25, 0xFE	; 254
 1a8:	fc 01       	movw	r30, r24
 1aa:	00 81       	ld	r16, Z
 1ac:	10 e0       	ldi	r17, 0x00	; 0
 1ae:	60 91 16 03 	lds	r22, 0x0316	; 0x800316 <__data_end>
 1b2:	70 91 17 03 	lds	r23, 0x0317	; 0x800317 <__data_end+0x1>
 1b6:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <__data_end+0x2>
 1ba:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <__data_end+0x3>
 1be:	48 e0       	ldi	r20, 0x08	; 8
 1c0:	51 e0       	ldi	r21, 0x01	; 1
 1c2:	0e 94 31 01 	call	0x262	; 0x262 <gen_sig_sample_id>
 1c6:	8c 5e       	subi	r24, 0xEC	; 236
 1c8:	9e 4f       	sbci	r25, 0xFE	; 254
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1ca:	fc 01       	movw	r30, r24
 1cc:	80 81       	ld	r24, Z
 1ce:	08 0f       	add	r16, r24
 1d0:	11 1d       	adc	r17, r1
 1d2:	c8 01       	movw	r24, r16
 1d4:	95 95       	asr	r25
 1d6:	87 95       	ror	r24
 1d8:	4a e0       	ldi	r20, 0x0A	; 10
 1da:	be 01       	movw	r22, r28
 1dc:	6f 5f       	subi	r22, 0xFF	; 255
 1de:	7f 4f       	sbci	r23, 0xFF	; 255
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <__itoa_ncheck>
		itoa(signal_amplitude, uart_message, 10);
		uart_puts(uart_message);
 1e6:	ce 01       	movw	r24, r28
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	0e 94 b1 01 	call	0x362	; 0x362 <uart_puts>
		sample++;
 1ee:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <__data_end>
 1f2:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <__data_end+0x1>
 1f6:	a0 91 18 03 	lds	r26, 0x0318	; 0x800318 <__data_end+0x2>
 1fa:	b0 91 19 03 	lds	r27, 0x0319	; 0x800319 <__data_end+0x3>
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	a1 1d       	adc	r26, r1
 202:	b1 1d       	adc	r27, r1
 204:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <__data_end>
 208:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <__data_end+0x1>
 20c:	a0 93 18 03 	sts	0x0318, r26	; 0x800318 <__data_end+0x2>
 210:	b0 93 19 03 	sts	0x0319, r27	; 0x800319 <__data_end+0x3>
 214:	08 c0       	rjmp	.+16     	; 0x226 <__vector_14+0xf2>
	}
	else
	{
		signal_duration = 0b00;
 216:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <signal_duration.1993>
 21a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <signal_duration.1993+0x1>
 21e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <signal_duration.1993+0x2>
 222:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <signal_duration.1993+0x3>
	}
	
	//uint8_t button;
	GPIO_toggle(&PORTC, PC0);
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	88 e2       	ldi	r24, 0x28	; 40
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_toggle>

}
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	bf 91       	pop	r27
 242:	af 91       	pop	r26
 244:	9f 91       	pop	r25
 246:	8f 91       	pop	r24
 248:	7f 91       	pop	r23
 24a:	6f 91       	pop	r22
 24c:	5f 91       	pop	r21
 24e:	4f 91       	pop	r20
 250:	3f 91       	pop	r19
 252:	2f 91       	pop	r18
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <gen_sig_sample_id>:
/* Function definitions ----------------------------------------*/

uint16_t gen_sig_sample_id(uint32_t sample, uint16_t *frequency)
{
	uint16_t table_sample = ((512 * sample)/ *frequency) % 512;
	return table_sample;
 262:	05 2e       	mov	r0, r21
 264:	59 e0       	ldi	r21, 0x09	; 9
 266:	66 0f       	add	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	88 1f       	adc	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	5a 95       	dec	r21
 270:	d1 f7       	brne	.-12     	; 0x266 <gen_sig_sample_id+0x4>
 272:	50 2d       	mov	r21, r0
 274:	fa 01       	movw	r30, r20
 276:	20 81       	ld	r18, Z
 278:	31 81       	ldd	r19, Z+1	; 0x01
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	0e 94 c0 01 	call	0x380	; 0x380 <__udivmodsi4>
}
 282:	c9 01       	movw	r24, r18
 284:	91 70       	andi	r25, 0x01	; 1
 286:	08 95       	ret

00000288 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	2f 93       	push	r18
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	ef 93       	push	r30
 29a:	ff 93       	push	r31
 29c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 2a0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2a4:	8c 71       	andi	r24, 0x1C	; 28
 2a6:	e0 91 1c 03 	lds	r30, 0x031C	; 0x80031c <UART_RxHead>
 2aa:	ef 5f       	subi	r30, 0xFF	; 255
 2ac:	ef 73       	andi	r30, 0x3F	; 63
 2ae:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <UART_RxTail>
 2b2:	e9 17       	cp	r30, r25
 2b4:	39 f0       	breq	.+14     	; 0x2c4 <__vector_18+0x3c>
 2b6:	e0 93 1c 03 	sts	0x031C, r30	; 0x80031c <UART_RxHead>
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	e1 5e       	subi	r30, 0xE1	; 225
 2be:	fc 4f       	sbci	r31, 0xFC	; 252
 2c0:	20 83       	st	Z, r18
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <__vector_18+0x3e>
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <UART_LastRxError>
 2ca:	89 2b       	or	r24, r25
 2cc:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <UART_LastRxError>
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	2f 91       	pop	r18
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <__vector_19>:
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	8f 93       	push	r24
 2f0:	9f 93       	push	r25
 2f2:	ef 93       	push	r30
 2f4:	ff 93       	push	r31
 2f6:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <UART_TxHead>
 2fa:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <UART_TxTail>
 2fe:	98 17       	cp	r25, r24
 300:	69 f0       	breq	.+26     	; 0x31c <__vector_19+0x38>
 302:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <UART_TxTail>
 306:	ef 5f       	subi	r30, 0xFF	; 255
 308:	ef 73       	andi	r30, 0x3F	; 63
 30a:	e0 93 1d 03 	sts	0x031D, r30	; 0x80031d <UART_TxTail>
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	e1 5a       	subi	r30, 0xA1	; 161
 312:	fc 4f       	sbci	r31, 0xFC	; 252
 314:	80 81       	ld	r24, Z
 316:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 31a:	05 c0       	rjmp	.+10     	; 0x326 <__vector_19+0x42>
 31c:	e1 ec       	ldi	r30, 0xC1	; 193
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	8f 7d       	andi	r24, 0xDF	; 223
 324:	80 83       	st	Z, r24
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 338:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <UART_TxHead>
 33c:	2f 5f       	subi	r18, 0xFF	; 255
 33e:	2f 73       	andi	r18, 0x3F	; 63

    while (tmphead == UART_TxTail)
 340:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <UART_TxTail>
 344:	29 17       	cp	r18, r25
 346:	e1 f3       	breq	.-8      	; 0x340 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 348:	e2 2f       	mov	r30, r18
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	e1 5a       	subi	r30, 0xA1	; 161
 34e:	fc 4f       	sbci	r31, 0xFC	; 252
 350:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 352:	20 93 1e 03 	sts	0x031E, r18	; 0x80031e <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 356:	e1 ec       	ldi	r30, 0xC1	; 193
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	80 62       	ori	r24, 0x20	; 32
 35e:	80 83       	st	Z, r24
 360:	08 95       	ret

00000362 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	ec 01       	movw	r28, r24
    while (*s)
 368:	88 81       	ld	r24, Y
 36a:	88 23       	and	r24, r24
 36c:	31 f0       	breq	.+12     	; 0x37a <uart_puts+0x18>
 36e:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 370:	0e 94 9c 01 	call	0x338	; 0x338 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 374:	89 91       	ld	r24, Y+
 376:	81 11       	cpse	r24, r1
 378:	fb cf       	rjmp	.-10     	; 0x370 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <__udivmodsi4>:
 380:	a1 e2       	ldi	r26, 0x21	; 33
 382:	1a 2e       	mov	r1, r26
 384:	aa 1b       	sub	r26, r26
 386:	bb 1b       	sub	r27, r27
 388:	fd 01       	movw	r30, r26
 38a:	0d c0       	rjmp	.+26     	; 0x3a6 <__udivmodsi4_ep>

0000038c <__udivmodsi4_loop>:
 38c:	aa 1f       	adc	r26, r26
 38e:	bb 1f       	adc	r27, r27
 390:	ee 1f       	adc	r30, r30
 392:	ff 1f       	adc	r31, r31
 394:	a2 17       	cp	r26, r18
 396:	b3 07       	cpc	r27, r19
 398:	e4 07       	cpc	r30, r20
 39a:	f5 07       	cpc	r31, r21
 39c:	20 f0       	brcs	.+8      	; 0x3a6 <__udivmodsi4_ep>
 39e:	a2 1b       	sub	r26, r18
 3a0:	b3 0b       	sbc	r27, r19
 3a2:	e4 0b       	sbc	r30, r20
 3a4:	f5 0b       	sbc	r31, r21

000003a6 <__udivmodsi4_ep>:
 3a6:	66 1f       	adc	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	88 1f       	adc	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	1a 94       	dec	r1
 3b0:	69 f7       	brne	.-38     	; 0x38c <__udivmodsi4_loop>
 3b2:	60 95       	com	r22
 3b4:	70 95       	com	r23
 3b6:	80 95       	com	r24
 3b8:	90 95       	com	r25
 3ba:	9b 01       	movw	r18, r22
 3bc:	ac 01       	movw	r20, r24
 3be:	bd 01       	movw	r22, r26
 3c0:	cf 01       	movw	r24, r30
 3c2:	08 95       	ret

000003c4 <__itoa_ncheck>:
 3c4:	bb 27       	eor	r27, r27
 3c6:	4a 30       	cpi	r20, 0x0A	; 10
 3c8:	31 f4       	brne	.+12     	; 0x3d6 <__itoa_ncheck+0x12>
 3ca:	99 23       	and	r25, r25
 3cc:	22 f4       	brpl	.+8      	; 0x3d6 <__itoa_ncheck+0x12>
 3ce:	bd e2       	ldi	r27, 0x2D	; 45
 3d0:	90 95       	com	r25
 3d2:	81 95       	neg	r24
 3d4:	9f 4f       	sbci	r25, 0xFF	; 255
 3d6:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__utoa_common>

000003da <__utoa_ncheck>:
 3da:	bb 27       	eor	r27, r27

000003dc <__utoa_common>:
 3dc:	fb 01       	movw	r30, r22
 3de:	55 27       	eor	r21, r21
 3e0:	aa 27       	eor	r26, r26
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	aa 1f       	adc	r26, r26
 3e8:	a4 17       	cp	r26, r20
 3ea:	10 f0       	brcs	.+4      	; 0x3f0 <__utoa_common+0x14>
 3ec:	a4 1b       	sub	r26, r20
 3ee:	83 95       	inc	r24
 3f0:	50 51       	subi	r21, 0x10	; 16
 3f2:	b9 f7       	brne	.-18     	; 0x3e2 <__utoa_common+0x6>
 3f4:	a0 5d       	subi	r26, 0xD0	; 208
 3f6:	aa 33       	cpi	r26, 0x3A	; 58
 3f8:	08 f0       	brcs	.+2      	; 0x3fc <__utoa_common+0x20>
 3fa:	a9 5d       	subi	r26, 0xD9	; 217
 3fc:	a1 93       	st	Z+, r26
 3fe:	00 97       	sbiw	r24, 0x00	; 0
 400:	79 f7       	brne	.-34     	; 0x3e0 <__utoa_common+0x4>
 402:	b1 11       	cpse	r27, r1
 404:	b1 93       	st	Z+, r27
 406:	11 92       	st	Z+, r1
 408:	cb 01       	movw	r24, r22
 40a:	0c 94 07 02 	jmp	0x40e	; 0x40e <strrev>

0000040e <strrev>:
 40e:	dc 01       	movw	r26, r24
 410:	fc 01       	movw	r30, r24
 412:	67 2f       	mov	r22, r23
 414:	71 91       	ld	r23, Z+
 416:	77 23       	and	r23, r23
 418:	e1 f7       	brne	.-8      	; 0x412 <strrev+0x4>
 41a:	32 97       	sbiw	r30, 0x02	; 2
 41c:	04 c0       	rjmp	.+8      	; 0x426 <strrev+0x18>
 41e:	7c 91       	ld	r23, X
 420:	6d 93       	st	X+, r22
 422:	70 83       	st	Z, r23
 424:	62 91       	ld	r22, -Z
 426:	ae 17       	cp	r26, r30
 428:	bf 07       	cpc	r27, r31
 42a:	c8 f3       	brcs	.-14     	; 0x41e <strrev+0x10>
 42c:	08 95       	ret

0000042e <_exit>:
 42e:	f8 94       	cli

00000430 <__stop_program>:
 430:	ff cf       	rjmp	.-2      	; 0x430 <__stop_program>
