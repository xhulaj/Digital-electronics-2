
signal_generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000326  000003ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000326  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800102  00800102  000003bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d2  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085c  00000000  00000000  000015c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d9  00000000  00000000  00001e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  000023fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055f  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000490  00000000  00000000  00002b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002fcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 39 01 	jmp	0x272	; 0x272 <__vector_18>
  4c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 38       	cpi	r26, 0x88	; 136
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 84 00 	call	0x108	; 0x108 <main>
  9e:	0c 94 91 01 	jmp	0x322	; 0x322 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/* GPIO_config_input_pullup */
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:

/*--------------------------------------------------------------------*/

/* GPIO_write_low */
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num); // Write low-value to a set bit in given register
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/*--------------------------------------------------------------------*/

/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name |= (1<<pin_num); //Write high-value to a set bit in given register
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <GPIO_toggle>:
/*--------------------------------------------------------------------*/

/* GPIO_toggle */
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name ^= (1<<pin_num);  // Flib given bit in register
  f0:	fc 01       	movw	r30, r24
  f2:	40 81       	ld	r20, Z
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <GPIO_toggle+0xe>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <GPIO_toggle+0xa>
 102:	24 27       	eor	r18, r20
 104:	20 83       	st	Z, r18
 106:	08 95       	ret

00000108 <main>:


int main(void)
{
	//############# TIMER/COUNTER0 SETTINGS
	TIM0_set_mode_CTC();			// Set timer to CTC mode
 108:	85 b5       	in	r24, 0x25	; 37
 10a:	87 7f       	andi	r24, 0xF7	; 247
 10c:	85 bd       	out	0x25, r24	; 37
 10e:	84 b5       	in	r24, 0x24	; 36
 110:	82 60       	ori	r24, 0x02	; 2
 112:	84 bd       	out	0x24, r24	; 36
 114:	84 b5       	in	r24, 0x24	; 36
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	84 bd       	out	0x24, r24	; 36
	TIM0_overflow_16us();
 11a:	85 b5       	in	r24, 0x25	; 37
 11c:	89 7f       	andi	r24, 0xF9	; 249
 11e:	85 bd       	out	0x25, r24	; 37
 120:	85 b5       	in	r24, 0x25	; 37
 122:	81 60       	ori	r24, 0x01	; 1
 124:	85 bd       	out	0x25, r24	; 37
	TIM0_CTC_A_interrupt_enable();	// Interrupt enable
 126:	ee e6       	ldi	r30, 0x6E	; 110
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	80 83       	st	Z, r24
	OCR0A = COMP_REG_A_MASK;		// Set Compare register A mask for 1 MHz frequency
 130:	80 e1       	ldi	r24, 0x10	; 16
 132:	87 bd       	out	0x27, r24	; 39
	GPIO_config_output(&DDRC, PC0);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	87 e2       	ldi	r24, 0x27	; 39
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTC, PC0);
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	88 e2       	ldi	r24, 0x28	; 40
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	// SET output pins for R2R ladder
	GPIO_config_output(&DDRB, R0);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	84 e2       	ldi	r24, 0x24	; 36
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R0);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	85 e2       	ldi	r24, 0x25	; 37
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRB, R1);
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	84 e2       	ldi	r24, 0x24	; 36
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R1);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	85 e2       	ldi	r24, 0x25	; 37
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRB, R2);
 170:	62 e0       	ldi	r22, 0x02	; 2
 172:	84 e2       	ldi	r24, 0x24	; 36
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R2);
 17a:	62 e0       	ldi	r22, 0x02	; 2
 17c:	85 e2       	ldi	r24, 0x25	; 37
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRB, R3);
 184:	63 e0       	ldi	r22, 0x03	; 3
 186:	84 e2       	ldi	r24, 0x24	; 36
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R3);
 18e:	63 e0       	ldi	r22, 0x03	; 3
 190:	85 e2       	ldi	r24, 0x25	; 37
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRB, R4);
 198:	64 e0       	ldi	r22, 0x04	; 4
 19a:	84 e2       	ldi	r24, 0x24	; 36
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R4);
 1a2:	64 e0       	ldi	r22, 0x04	; 4
 1a4:	85 e2       	ldi	r24, 0x25	; 37
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRB, R5);
 1ac:	65 e0       	ldi	r22, 0x05	; 5
 1ae:	84 e2       	ldi	r24, 0x24	; 36
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R5);
 1b6:	65 e0       	ldi	r22, 0x05	; 5
 1b8:	85 e2       	ldi	r24, 0x25	; 37
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRB, R6);
 1c0:	66 e0       	ldi	r22, 0x06	; 6
 1c2:	84 e2       	ldi	r24, 0x24	; 36
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R6);
 1ca:	66 e0       	ldi	r22, 0x06	; 6
 1cc:	85 e2       	ldi	r24, 0x25	; 37
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_config_output(&DDRB, R7);
 1d4:	67 e0       	ldi	r22, 0x07	; 7
 1d6:	84 e2       	ldi	r24, 0x24	; 36
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, R7);
 1de:	67 e0       	ldi	r22, 0x07	; 7
 1e0:	85 e2       	ldi	r24, 0x25	; 37
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	
	// Enables interrupts by setting the global interrupt mask
	sei();
 1e8:	78 94       	sei
 1ea:	ff cf       	rjmp	.-2      	; 0x1ea <main+0xe2>

000001ec <__vector_14>:
		//PORTB = 0b11111111;
    }
}

ISR(TIMER0_COMPA_vect)
{
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	2f 93       	push	r18
 1f8:	3f 93       	push	r19
 1fa:	4f 93       	push	r20
 1fc:	5f 93       	push	r21
 1fe:	6f 93       	push	r22
 200:	7f 93       	push	r23
 202:	8f 93       	push	r24
 204:	9f 93       	push	r25
 206:	af 93       	push	r26
 208:	bf 93       	push	r27
 20a:	ef 93       	push	r30
 20c:	ff 93       	push	r31
		0b01111101     // sample512
	};
		// return amplitude value based on currently pressed button
		
		//keys are index from 0 to 15, thus row frquency (index 0-3) is given by: key/4; and and column frequency (index 4-7)  is given by: 4 + key % 4;
		signal_amplitude = sample_cnt_1;
 20e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 212:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 216:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		//signal_amplitude = sinus_table[sample_cnt_1];
		//signal_amplitude = (sinus_table[gen_sig_sample_id(&sample_cnt_1, &samples_set[key/4])] + sinus_table[gen_sig_sample_id(&sample_cnt_2, &samples_set[4 + (key % 4)])])/2;  
		sample_cnt_1 = sample_cnt_1 + 1;
 21a:	01 96       	adiw	r24, 0x01	; 1
		//sample_cnt_2 = sample_cnt_2 + 1;
		if(sample_cnt_1 > 511) sample_cnt_1 = 0;									// increment sample
 21c:	81 15       	cp	r24, r1
 21e:	22 e0       	ldi	r18, 0x02	; 2
 220:	92 07       	cpc	r25, r18
 222:	28 f4       	brcc	.+10     	; 0x22e <__vector_14+0x42>
		
		//keys are index from 0 to 15, thus row frquency (index 0-3) is given by: key/4; and and column frequency (index 4-7)  is given by: 4 + key % 4;
		signal_amplitude = sample_cnt_1;
		//signal_amplitude = sinus_table[sample_cnt_1];
		//signal_amplitude = (sinus_table[gen_sig_sample_id(&sample_cnt_1, &samples_set[key/4])] + sinus_table[gen_sig_sample_id(&sample_cnt_2, &samples_set[4 + (key % 4)])])/2;  
		sample_cnt_1 = sample_cnt_1 + 1;
 224:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 228:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 22c:	04 c0       	rjmp	.+8      	; 0x236 <__vector_14+0x4a>
		//sample_cnt_2 = sample_cnt_2 + 1;
		if(sample_cnt_1 > 511) sample_cnt_1 = 0;									// increment sample
 22e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 232:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	//uint8_t button;
	GPIO_toggle(&PORTC, PC0);
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	88 e2       	ldi	r24, 0x28	; 40
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 78 00 	call	0xf0	; 0xf0 <GPIO_toggle>
	PORTB = signal_amplitude;
 240:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 244:	85 b9       	out	0x05, r24	; 5
	//PORTB = 0b11111111;
	GPIO_write_high(&PORTB, R6);
 246:	66 e0       	ldi	r22, 0x06	; 6
 248:	85 e2       	ldi	r24, 0x25	; 37
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
}
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	7f 91       	pop	r23
 25e:	6f 91       	pop	r22
 260:	5f 91       	pop	r21
 262:	4f 91       	pop	r20
 264:	3f 91       	pop	r19
 266:	2f 91       	pop	r18
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 272:	1f 92       	push	r1
 274:	0f 92       	push	r0
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	0f 92       	push	r0
 27a:	11 24       	eor	r1, r1
 27c:	2f 93       	push	r18
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
 282:	ef 93       	push	r30
 284:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 286:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    data = UART0_DATA;
 28a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 28e:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 290:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <UART_RxHead>
 294:	ef 5f       	subi	r30, 0xFF	; 255
 296:	ef 73       	andi	r30, 0x3F	; 63

    if (tmphead == UART_RxTail)
 298:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <UART_RxTail>
 29c:	e9 17       	cp	r30, r25
 29e:	39 f0       	breq	.+14     	; 0x2ae <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 2a0:	e0 93 05 01 	sts	0x0105, r30	; 0x800105 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	e8 5f       	subi	r30, 0xF8	; 248
 2a8:	fe 4f       	sbci	r31, 0xFE	; 254
 2aa:	20 83       	st	Z, r18
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 2ae:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 2b0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <UART_LastRxError>
 2b4:	89 2b       	or	r24, r25
 2b6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <UART_LastRxError>
}
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	0f 90       	pop	r0
 2ca:	1f 90       	pop	r1
 2cc:	18 95       	reti

000002ce <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	ef 93       	push	r30
 2de:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 2e0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <UART_TxHead>
 2e4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <UART_TxTail>
 2e8:	98 17       	cp	r25, r24
 2ea:	69 f0       	breq	.+26     	; 0x306 <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 2ec:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <UART_TxTail>
 2f0:	ef 5f       	subi	r30, 0xFF	; 255
 2f2:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
 2f4:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	e8 5b       	subi	r30, 0xB8	; 184
 2fc:	fe 4f       	sbci	r31, 0xFE	; 254
 2fe:	80 81       	ld	r24, Z
 300:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 304:	05 c0       	rjmp	.+10     	; 0x310 <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 306:	e1 ec       	ldi	r30, 0xC1	; 193
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	8f 7d       	andi	r24, 0xDF	; 223
 30e:	80 83       	st	Z, r24
    }
}
 310:	ff 91       	pop	r31
 312:	ef 91       	pop	r30
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>
