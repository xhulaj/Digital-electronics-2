
signal_generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800100  00800100  00000224  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c79  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f8  00000000  00000000  00000fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000533  00000000  00000000  000017c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00001cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000510  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ed  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000277d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_18>
  4c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 38       	cpi	r26, 0x85	; 133
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  88:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <GPIO_config_input_pullup>:

/*--------------------------------------------------------------------*/

/* GPIO_config_input_pullup */
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
  90:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
  92:	80 81       	ld	r24, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <GPIO_config_input_pullup+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <GPIO_config_input_pullup+0xa>
  a2:	92 2f       	mov	r25, r18
  a4:	90 95       	com	r25
  a6:	89 23       	and	r24, r25
  a8:	80 83       	st	Z, r24
    *reg_name++;                    // Change pointer to Data Register
  aa:	80 81       	ld	r24, Z
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  ac:	81 81       	ldd	r24, Z+1	; 0x01
  ae:	28 2b       	or	r18, r24
  b0:	21 83       	std	Z+1, r18	; 0x01
  b2:	08 95       	ret

000000b4 <main>:
#include "lcd.h"

int main(void)
{
	/* Set pins 0 - 7 on port D to input with pullup resistor */
	GPIO_config_input_pullup(&DDRD, KEYBOARD_ROW_0);
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	8a e2       	ldi	r24, 0x2A	; 42
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_input_pullup>
	GPIO_config_input_pullup(&DDRD, KEYBOARD_ROW_1);
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	8a e2       	ldi	r24, 0x2A	; 42
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_input_pullup>
	GPIO_config_input_pullup(&DDRD, KEYBOARD_ROW_2);
  c8:	62 e0       	ldi	r22, 0x02	; 2
  ca:	8a e2       	ldi	r24, 0x2A	; 42
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_input_pullup>
	GPIO_config_input_pullup(&DDRD, KEYBOARD_ROW_3);
  d2:	63 e0       	ldi	r22, 0x03	; 3
  d4:	8a e2       	ldi	r24, 0x2A	; 42
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_input_pullup>
	GPIO_config_input_pullup(&DDRD, KEYBOARD_COL_0);
  dc:	64 e0       	ldi	r22, 0x04	; 4
  de:	8a e2       	ldi	r24, 0x2A	; 42
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_input_pullup>
	GPIO_config_input_pullup(&DDRD, KEYBOARD_COL_1);
  e6:	65 e0       	ldi	r22, 0x05	; 5
  e8:	8a e2       	ldi	r24, 0x2A	; 42
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_input_pullup>
	GPIO_config_input_pullup(&DDRD, KEYBOARD_COL_2);
  f0:	66 e0       	ldi	r22, 0x06	; 6
  f2:	8a e2       	ldi	r24, 0x2A	; 42
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_input_pullup>
  fa:	ff cf       	rjmp	.-2      	; 0xfa <main+0x46>

000000fc <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 110:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    data = UART0_DATA;
 114:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 118:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 11a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <UART_RxHead>
 11e:	ef 5f       	subi	r30, 0xFF	; 255
 120:	ef 73       	andi	r30, 0x3F	; 63

    if (tmphead == UART_RxTail)
 122:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <UART_RxTail>
 126:	e9 17       	cp	r30, r25
 128:	39 f0       	breq	.+14     	; 0x138 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 12a:	e0 93 02 01 	sts	0x0102, r30	; 0x800102 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	eb 5f       	subi	r30, 0xFB	; 251
 132:	fe 4f       	sbci	r31, 0xFE	; 254
 134:	20 83       	st	Z, r18
 136:	01 c0       	rjmp	.+2      	; 0x13a <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 138:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 13a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 13e:	89 2b       	or	r24, r25
 140:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 16a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <UART_TxHead>
 16e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <UART_TxTail>
 172:	98 17       	cp	r25, r24
 174:	69 f0       	breq	.+26     	; 0x190 <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 176:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <UART_TxTail>
 17a:	ef 5f       	subi	r30, 0xFF	; 255
 17c:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
 17e:	e0 93 03 01 	sts	0x0103, r30	; 0x800103 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	eb 5b       	subi	r30, 0xBB	; 187
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	80 81       	ld	r24, Z
 18a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 18e:	05 c0       	rjmp	.+10     	; 0x19a <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 190:	e1 ec       	ldi	r30, 0xC1	; 193
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8f 7d       	andi	r24, 0xDF	; 223
 198:	80 83       	st	Z, r24
    }
}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
